# Code generated by smithy-python-codegen DO NOT EDIT.

from types import MappingProxyType

from smithy_core.prelude import UNIT
from smithy_core.schemas import Schema
from smithy_core.shapes import ShapeID, ShapeType
from smithy_core.traits import Trait


STRING = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#String"), shape_type=ShapeType.STRING
)

CONFIDENCE = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Confidence"),
    shape_type=ShapeType.DOUBLE,
    traits=[Trait.new(id=ShapeID("smithy.api#box"))],
)

DOUBLE = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Double"),
    shape_type=ShapeType.DOUBLE,
    traits=[Trait.new(id=ShapeID("smithy.api#default"), value=0)],
)

ENTITY = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Entity"),
    members={
        "StartTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "Category": {"target": STRING},
        "Type": {"target": STRING},
        "Content": {"target": STRING},
        "Confidence": {"target": CONFIDENCE},
    },
)

ENTITY_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#EntityList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": ENTITY}},
)

STABLE = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Stable"),
    shape_type=ShapeType.BOOLEAN,
    traits=[Trait.new(id=ShapeID("smithy.api#box"))],
)

ITEM_TYPE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ItemType"),
    shape_type=ShapeType.ENUM,
    members={
        "PRONUNCIATION": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="pronunciation")
            ],
        },
        "PUNCTUATION": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="punctuation")
            ],
        },
    },
)

BOOLEAN = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Boolean"),
    shape_type=ShapeType.BOOLEAN,
    traits=[Trait.new(id=ShapeID("smithy.api#default"), value=False)],
)

ITEM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Item"),
    members={
        "StartTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "Type": {"target": ITEM_TYPE},
        "Content": {"target": STRING},
        "VocabularyFilterMatch": {
            "target": BOOLEAN,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=False)],
        },
        "Speaker": {"target": STRING},
        "Confidence": {"target": CONFIDENCE},
        "Stable": {"target": STABLE},
    },
)

ITEM_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ItemList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": ITEM}},
)

ALTERNATIVE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Alternative"),
    members={
        "Transcript": {"target": STRING},
        "Items": {"target": ITEM_LIST},
        "Entities": {"target": ENTITY_LIST},
    },
)

ALTERNATIVE_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#AlternativeList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": ALTERNATIVE}},
)

AUDIO_CHUNK = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#AudioChunk"),
    shape_type=ShapeType.BLOB,
)

AUDIO_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#AudioEvent"),
    members={
        "AudioChunk": {
            "target": AUDIO_CHUNK,
            "traits": [Trait.new(id=ShapeID("smithy.api#eventPayload"))],
        }
    },
)

CHANNEL_ID = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#ChannelId"),
    shape_type=ShapeType.INTEGER,
    traits=[
        Trait.new(id=ShapeID("smithy.api#default"), value=0),
        Trait.new(
            id=ShapeID("smithy.api#range"), value=MappingProxyType({"min": 0, "max": 1})
        ),
    ],
)

PARTICIPANT_ROLE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ParticipantRole"),
    shape_type=ShapeType.ENUM,
    members={
        "AGENT": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="AGENT")],
        },
        "CUSTOMER": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="CUSTOMER")],
        },
    },
)

CHANNEL_DEFINITION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ChannelDefinition"),
    members={
        "ChannelId": {
            "target": CHANNEL_ID,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=0),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "ParticipantRole": {
            "target": PARTICIPANT_ROLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
    },
)

CHANNEL_DEFINITIONS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ChannelDefinitions"),
    shape_type=ShapeType.LIST,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 2, "max": 2}),
        )
    ],
    members={"member": {"target": CHANNEL_DEFINITION}},
)

CONTENT_REDACTION_OUTPUT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ContentRedactionOutput"),
    shape_type=ShapeType.ENUM,
    members={
        "REDACTED": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="redacted")],
        },
        "REDACTED_AND_UNREDACTED": {
            "target": UNIT,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#enumValue"), value="redacted_and_unredacted"
                )
            ],
        },
    },
)

POST_CALL_ANALYTICS_SETTINGS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#PostCallAnalyticsSettings"),
    members={
        "OutputLocation": {
            "target": STRING,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
        "DataAccessRoleArn": {
            "target": STRING,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
        "ContentRedactionOutput": {"target": CONTENT_REDACTION_OUTPUT},
        "OutputEncryptionKMSKeyId": {"target": STRING},
    },
)

CONFIGURATION_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ConfigurationEvent"),
    members={
        "ChannelDefinitions": {"target": CHANNEL_DEFINITIONS},
        "PostCallAnalyticsSettings": {"target": POST_CALL_ANALYTICS_SETTINGS},
    },
)

AUDIO_STREAM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#AudioStream"),
    shape_type=ShapeType.UNION,
    traits=[Trait.new(id=ShapeID("smithy.api#streaming"))],
    members={
        "AudioEvent": {"target": AUDIO_EVENT},
        "ConfigurationEvent": {"target": CONFIGURATION_EVENT},
    },
)

BAD_REQUEST_EXCEPTION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#BadRequestException"),
    traits=[
        Trait.new(id=ShapeID("smithy.api#error"), value="client"),
        Trait.new(id=ShapeID("smithy.api#httpError"), value=400),
    ],
    members={"Message": {"target": STRING}},
)

BUCKET_NAME = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#BucketName"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 0, "max": 64}),
        ),
        Trait.new(
            id=ShapeID("smithy.api#pattern"),
            value="^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        ),
    ],
)

LONG = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Long"),
    shape_type=ShapeType.LONG,
    traits=[Trait.new(id=ShapeID("smithy.api#box"))],
)

CALL_ANALYTICS_ENTITY = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsEntity"),
    members={
        "BeginOffsetMillis": {"target": LONG},
        "EndOffsetMillis": {"target": LONG},
        "Category": {"target": STRING},
        "Type": {"target": STRING},
        "Content": {"target": STRING},
        "Confidence": {"target": CONFIDENCE},
    },
)

CALL_ANALYTICS_ENTITY_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsEntityList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": CALL_ANALYTICS_ENTITY}},
)

CALL_ANALYTICS_ITEM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsItem"),
    members={
        "BeginOffsetMillis": {"target": LONG},
        "EndOffsetMillis": {"target": LONG},
        "Type": {"target": ITEM_TYPE},
        "Content": {"target": STRING},
        "Confidence": {"target": CONFIDENCE},
        "VocabularyFilterMatch": {
            "target": BOOLEAN,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=False)],
        },
        "Stable": {"target": STABLE},
    },
)

CALL_ANALYTICS_ITEM_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsItemList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": CALL_ANALYTICS_ITEM}},
)

CALL_ANALYTICS_LANGUAGE_CODE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsLanguageCode"),
    shape_type=ShapeType.ENUM,
    members={
        "EN_US": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-US")],
        },
        "EN_GB": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-GB")],
        },
        "ES_US": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="es-US")],
        },
        "FR_CA": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="fr-CA")],
        },
        "FR_FR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="fr-FR")],
        },
        "EN_AU": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-AU")],
        },
        "IT_IT": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="it-IT")],
        },
        "DE_DE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="de-DE")],
        },
        "PT_BR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="pt-BR")],
        },
    },
)

CALL_ANALYTICS_LANGUAGE_WITH_SCORE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsLanguageWithScore"),
    members={
        "LanguageCode": {"target": CALL_ANALYTICS_LANGUAGE_CODE},
        "Score": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
    },
)

CALL_ANALYTICS_LANGUAGE_IDENTIFICATION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsLanguageIdentification"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": CALL_ANALYTICS_LANGUAGE_WITH_SCORE}},
)

STRING_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#StringList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": STRING}},
)

TIMESTAMP_RANGE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#TimestampRange"),
    members={
        "BeginOffsetMillis": {"target": LONG},
        "EndOffsetMillis": {"target": LONG},
    },
)

TIMESTAMP_RANGES = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#TimestampRanges"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": TIMESTAMP_RANGE}},
)

POINTS_OF_INTEREST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#PointsOfInterest"),
    members={"TimestampRanges": {"target": TIMESTAMP_RANGES}},
)

MATCHED_CATEGORY_DETAILS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MatchedCategoryDetails"),
    shape_type=ShapeType.MAP,
    members={"key": {"target": STRING}, "value": {"target": POINTS_OF_INTEREST}},
)

CATEGORY_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CategoryEvent"),
    members={
        "MatchedCategories": {"target": STRING_LIST},
        "MatchedDetails": {"target": MATCHED_CATEGORY_DETAILS},
    },
)

CONFLICT_EXCEPTION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ConflictException"),
    traits=[
        Trait.new(id=ShapeID("smithy.api#error"), value="client"),
        Trait.new(id=ShapeID("smithy.api#httpError"), value=409),
    ],
    members={"Message": {"target": STRING}},
)

INTERNAL_FAILURE_EXCEPTION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#InternalFailureException"),
    traits=[
        Trait.new(id=ShapeID("smithy.api#error"), value="server"),
        Trait.new(id=ShapeID("smithy.api#httpError"), value=500),
    ],
    members={"Message": {"target": STRING}},
)

LIMIT_EXCEEDED_EXCEPTION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#LimitExceededException"),
    traits=[
        Trait.new(id=ShapeID("smithy.api#error"), value="client"),
        Trait.new(id=ShapeID("smithy.api#httpError"), value=429),
    ],
    members={"Message": {"target": STRING}},
)

SERVICE_UNAVAILABLE_EXCEPTION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ServiceUnavailableException"),
    traits=[
        Trait.new(id=ShapeID("smithy.api#error"), value="server"),
        Trait.new(id=ShapeID("smithy.api#httpError"), value=503),
    ],
    members={"Message": {"target": STRING}},
)

INTEGER = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Integer"),
    shape_type=ShapeType.INTEGER,
    traits=[Trait.new(id=ShapeID("smithy.api#box"))],
)

CHARACTER_OFFSETS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CharacterOffsets"),
    members={"Begin": {"target": INTEGER}, "End": {"target": INTEGER}},
)

ISSUE_DETECTED = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#IssueDetected"),
    members={"CharacterOffsets": {"target": CHARACTER_OFFSETS}},
)

ISSUES_DETECTED = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#IssuesDetected"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": ISSUE_DETECTED}},
)

SENTIMENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Sentiment"),
    shape_type=ShapeType.ENUM,
    members={
        "POSITIVE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="POSITIVE")],
        },
        "NEGATIVE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="NEGATIVE")],
        },
        "MIXED": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="MIXED")],
        },
        "NEUTRAL": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="NEUTRAL")],
        },
    },
)

UTTERANCE_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#UtteranceEvent"),
    members={
        "UtteranceId": {"target": STRING},
        "IsPartial": {
            "target": BOOLEAN,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=False)],
        },
        "ParticipantRole": {"target": PARTICIPANT_ROLE},
        "BeginOffsetMillis": {"target": LONG},
        "EndOffsetMillis": {"target": LONG},
        "Transcript": {"target": STRING},
        "Items": {"target": CALL_ANALYTICS_ITEM_LIST},
        "Entities": {"target": CALL_ANALYTICS_ENTITY_LIST},
        "Sentiment": {"target": SENTIMENT},
        "IssuesDetected": {"target": ISSUES_DETECTED},
        "LanguageCode": {"target": CALL_ANALYTICS_LANGUAGE_CODE},
        "LanguageIdentification": {"target": CALL_ANALYTICS_LANGUAGE_IDENTIFICATION},
    },
)

CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#CallAnalyticsTranscriptResultStream"),
    shape_type=ShapeType.UNION,
    traits=[Trait.new(id=ShapeID("smithy.api#streaming"))],
    members={
        "UtteranceEvent": {"target": UTTERANCE_EVENT},
        "CategoryEvent": {"target": CATEGORY_EVENT},
        "BadRequestException": {"target": BAD_REQUEST_EXCEPTION},
        "LimitExceededException": {"target": LIMIT_EXCEEDED_EXCEPTION},
        "InternalFailureException": {"target": INTERNAL_FAILURE_EXCEPTION},
        "ConflictException": {"target": CONFLICT_EXCEPTION},
        "ServiceUnavailableException": {"target": SERVICE_UNAVAILABLE_EXCEPTION},
    },
)

URI = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Uri"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 2000}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^(s3://|http(s*)://).+$"),
    ],
)

CLINICAL_NOTE_GENERATION_STATUS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ClinicalNoteGenerationStatus"),
    shape_type=ShapeType.ENUM,
    members={
        "IN_PROGRESS": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="IN_PROGRESS")
            ],
        },
        "FAILED": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="FAILED")],
        },
        "COMPLETED": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="COMPLETED")
            ],
        },
    },
)

CLINICAL_NOTE_GENERATION_RESULT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ClinicalNoteGenerationResult"),
    members={
        "ClinicalNoteOutputLocation": {"target": URI},
        "TranscriptOutputLocation": {"target": URI},
        "Status": {"target": CLINICAL_NOTE_GENERATION_STATUS},
        "FailureReason": {"target": STRING},
    },
)

MEDICAL_SCRIBE_NOTE_TEMPLATE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeNoteTemplate"),
    shape_type=ShapeType.ENUM,
    members={
        "HISTORY_AND_PHYSICAL": {
            "target": UNIT,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#enumValue"), value="HISTORY_AND_PHYSICAL"
                )
            ],
        },
        "GIRPP": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="GIRPP")],
        },
        "DAP": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="DAP")],
        },
        "SIRP": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="SIRP")],
        },
        "BIRP": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="BIRP")],
        },
        "BEHAVIORAL_SOAP": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="BEHAVIORAL_SOAP")
            ],
        },
        "PHYSICAL_SOAP": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="PHYSICAL_SOAP")
            ],
        },
    },
)

CLINICAL_NOTE_GENERATION_SETTINGS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ClinicalNoteGenerationSettings"),
    members={
        "OutputBucketName": {
            "target": BUCKET_NAME,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
        "NoteTemplate": {"target": MEDICAL_SCRIBE_NOTE_TEMPLATE},
    },
)

CONTENT_IDENTIFICATION_TYPE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ContentIdentificationType"),
    shape_type=ShapeType.ENUM,
    members={
        "PII": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="PII")],
        }
    },
)

CONTENT_REDACTION_TYPE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ContentRedactionType"),
    shape_type=ShapeType.ENUM,
    members={
        "PII": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="PII")],
        }
    },
)

DATE_TIME = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#DateTime"),
    shape_type=ShapeType.TIMESTAMP,
)

SESSION_ID = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#SessionId"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 36, "max": 36}),
        ),
        Trait.new(
            id=ShapeID("smithy.api#pattern"),
            value="^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    ],
)

GET_MEDICAL_SCRIBE_STREAM_INPUT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#GetMedicalScribeStreamInput"),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#GetMedicalScribeStreamRequest",
        ),
        Trait.new(id=ShapeID("smithy.api#input")),
    ],
    members={
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#required")),
                Trait.new(id=ShapeID("smithy.api#httpLabel")),
            ],
        }
    },
)

MEDICAL_SCRIBE_CHANNEL_ID = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeChannelId"),
    shape_type=ShapeType.INTEGER,
    traits=[
        Trait.new(id=ShapeID("smithy.api#default"), value=0),
        Trait.new(
            id=ShapeID("smithy.api#range"), value=MappingProxyType({"min": 0, "max": 1})
        ),
    ],
)

MEDICAL_SCRIBE_PARTICIPANT_ROLE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeParticipantRole"),
    shape_type=ShapeType.ENUM,
    members={
        "PATIENT": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="PATIENT")],
        },
        "CLINICIAN": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="CLINICIAN")
            ],
        },
    },
)

MEDICAL_SCRIBE_CHANNEL_DEFINITION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeChannelDefinition"),
    members={
        "ChannelId": {
            "target": MEDICAL_SCRIBE_CHANNEL_ID,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=0),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "ParticipantRole": {
            "target": MEDICAL_SCRIBE_PARTICIPANT_ROLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
    },
)

MEDICAL_SCRIBE_CHANNEL_DEFINITIONS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeChannelDefinitions"),
    shape_type=ShapeType.LIST,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 2, "max": 2}),
        )
    ],
    members={"member": {"target": MEDICAL_SCRIBE_CHANNEL_DEFINITION}},
)

NON_EMPTY_STRING = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#NonEmptyString"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 2000}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="\\S"),
    ],
)

KMS_ENCRYPTION_CONTEXT_MAP = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#KMSEncryptionContextMap"),
    shape_type=ShapeType.MAP,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 10}),
        )
    ],
    members={
        "key": {"target": NON_EMPTY_STRING},
        "value": {"target": NON_EMPTY_STRING},
    },
)

KMS_KEY_ID = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#KMSKeyId"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 2048}),
        ),
        Trait.new(
            id=ShapeID("smithy.api#pattern"),
            value="^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$",
        ),
    ],
)

MEDICAL_SCRIBE_ENCRYPTION_SETTINGS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeEncryptionSettings"),
    members={
        "KmsEncryptionContext": {"target": KMS_ENCRYPTION_CONTEXT_MAP},
        "KmsKeyId": {
            "target": KMS_KEY_ID,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
    },
)

MEDICAL_SCRIBE_LANGUAGE_CODE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeLanguageCode"),
    shape_type=ShapeType.ENUM,
    members={
        "EN_US": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-US")],
        }
    },
)

MEDICAL_SCRIBE_MEDIA_ENCODING = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeMediaEncoding"),
    shape_type=ShapeType.ENUM,
    members={
        "PCM": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="pcm")],
        },
        "OGG_OPUS": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ogg-opus")],
        },
        "FLAC": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="flac")],
        },
    },
)

MEDICAL_SCRIBE_MEDIA_SAMPLE_RATE_HERTZ = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeMediaSampleRateHertz"),
    shape_type=ShapeType.INTEGER,
    traits=[
        Trait.new(id=ShapeID("smithy.api#box")),
        Trait.new(
            id=ShapeID("smithy.api#range"),
            value=MappingProxyType({"min": 16000, "max": 48000}),
        ),
    ],
)

NULLABLE_BOOLEAN = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#NullableBoolean"),
    shape_type=ShapeType.BOOLEAN,
    traits=[Trait.new(id=ShapeID("smithy.api#box"))],
)

MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_RESULT = Schema.collection(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#MedicalScribePostStreamAnalyticsResult"
    ),
    members={
        "ClinicalNoteGenerationResult": {"target": CLINICAL_NOTE_GENERATION_RESULT}
    },
)

MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS = Schema.collection(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#MedicalScribePostStreamAnalyticsSettings"
    ),
    members={
        "ClinicalNoteGenerationSettings": {
            "target": CLINICAL_NOTE_GENERATION_SETTINGS,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        }
    },
)

IAM_ROLE_ARN = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#IamRoleArn"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 20, "max": 2048}),
        ),
        Trait.new(
            id=ShapeID("smithy.api#pattern"),
            value="^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$",
        ),
    ],
)

MEDICAL_SCRIBE_STREAM_STATUS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeStreamStatus"),
    shape_type=ShapeType.ENUM,
    members={
        "IN_PROGRESS": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="IN_PROGRESS")
            ],
        },
        "PAUSED": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="PAUSED")],
        },
        "FAILED": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="FAILED")],
        },
        "COMPLETED": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="COMPLETED")
            ],
        },
    },
)

MEDICAL_SCRIBE_VOCABULARY_FILTER_METHOD = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeVocabularyFilterMethod"),
    shape_type=ShapeType.ENUM,
    members={
        "REMOVE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="remove")],
        },
        "MASK": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="mask")],
        },
        "TAG": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="tag")],
        },
    },
)

VOCABULARY_FILTER_NAME = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#VocabularyFilterName"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 200}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^[0-9a-zA-Z._-]+$"),
    ],
)

VOCABULARY_NAME = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#VocabularyName"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 200}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^[0-9a-zA-Z._-]+$"),
    ],
)

MEDICAL_SCRIBE_STREAM_DETAILS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeStreamDetails"),
    members={
        "SessionId": {"target": SESSION_ID},
        "StreamCreatedAt": {"target": DATE_TIME},
        "StreamEndedAt": {"target": DATE_TIME},
        "LanguageCode": {"target": MEDICAL_SCRIBE_LANGUAGE_CODE},
        "MediaSampleRateHertz": {"target": MEDICAL_SCRIBE_MEDIA_SAMPLE_RATE_HERTZ},
        "MediaEncoding": {"target": MEDICAL_SCRIBE_MEDIA_ENCODING},
        "VocabularyName": {"target": VOCABULARY_NAME},
        "VocabularyFilterName": {"target": VOCABULARY_FILTER_NAME},
        "VocabularyFilterMethod": {"target": MEDICAL_SCRIBE_VOCABULARY_FILTER_METHOD},
        "ResourceAccessRoleArn": {"target": IAM_ROLE_ARN},
        "ChannelDefinitions": {"target": MEDICAL_SCRIBE_CHANNEL_DEFINITIONS},
        "EncryptionSettings": {"target": MEDICAL_SCRIBE_ENCRYPTION_SETTINGS},
        "StreamStatus": {"target": MEDICAL_SCRIBE_STREAM_STATUS},
        "PostStreamAnalyticsSettings": {
            "target": MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS
        },
        "PostStreamAnalyticsResult": {
            "target": MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_RESULT
        },
        "MedicalScribeContextProvided": {"target": NULLABLE_BOOLEAN},
    },
)

GET_MEDICAL_SCRIBE_STREAM_OUTPUT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#GetMedicalScribeStreamOutput"),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#GetMedicalScribeStreamResponse",
        ),
        Trait.new(id=ShapeID("smithy.api#output")),
    ],
    members={"MedicalScribeStreamDetails": {"target": MEDICAL_SCRIBE_STREAM_DETAILS}},
)

RESOURCE_NOT_FOUND_EXCEPTION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ResourceNotFoundException"),
    traits=[
        Trait.new(id=ShapeID("smithy.api#error"), value="client"),
        Trait.new(id=ShapeID("smithy.api#httpError"), value=404),
    ],
    members={"Message": {"target": STRING}},
)

GET_MEDICAL_SCRIBE_STREAM = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#GetMedicalScribeStream"),
    shape_type=ShapeType.OPERATION,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#http"),
            value=MappingProxyType(
                {
                    "method": "GET",
                    "uri": "/medical-scribe-stream/{SessionId}",
                    "code": 200,
                }
            ),
        )
    ],
)

LANGUAGE_CODE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#LanguageCode"),
    shape_type=ShapeType.ENUM,
    members={
        "EN_US": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-US")],
        },
        "EN_GB": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-GB")],
        },
        "ES_US": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="es-US")],
        },
        "FR_CA": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="fr-CA")],
        },
        "FR_FR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="fr-FR")],
        },
        "EN_AU": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-AU")],
        },
        "IT_IT": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="it-IT")],
        },
        "DE_DE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="de-DE")],
        },
        "PT_BR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="pt-BR")],
        },
        "JA_JP": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ja-JP")],
        },
        "KO_KR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ko-KR")],
        },
        "ZH_CN": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="zh-CN")],
        },
        "TH_TH": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="th-TH")],
        },
        "ES_ES": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="es-ES")],
        },
        "AR_SA": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ar-SA")],
        },
        "PT_PT": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="pt-PT")],
        },
        "CA_ES": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ca-ES")],
        },
        "AR_AE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ar-AE")],
        },
        "HI_IN": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="hi-IN")],
        },
        "ZH_HK": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="zh-HK")],
        },
        "NL_NL": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="nl-NL")],
        },
        "NO_NO": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="no-NO")],
        },
        "SV_SE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="sv-SE")],
        },
        "PL_PL": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="pl-PL")],
        },
        "FI_FI": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="fi-FI")],
        },
        "ZH_TW": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="zh-TW")],
        },
        "EN_IN": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-IN")],
        },
        "EN_IE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-IE")],
        },
        "EN_NZ": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-NZ")],
        },
        "EN_AB": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-AB")],
        },
        "EN_ZA": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-ZA")],
        },
        "EN_WL": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="en-WL")],
        },
        "DE_CH": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="de-CH")],
        },
        "AF_ZA": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="af-ZA")],
        },
        "EU_ES": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="eu-ES")],
        },
        "HR_HR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="hr-HR")],
        },
        "CS_CZ": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="cs-CZ")],
        },
        "DA_DK": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="da-DK")],
        },
        "FA_IR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="fa-IR")],
        },
        "GL_ES": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="gl-ES")],
        },
        "EL_GR": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="el-GR")],
        },
        "HE_IL": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="he-IL")],
        },
        "ID_ID": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="id-ID")],
        },
        "LV_LV": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="lv-LV")],
        },
        "MS_MY": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ms-MY")],
        },
        "RO_RO": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ro-RO")],
        },
        "RU_RU": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ru-RU")],
        },
        "SR_RS": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="sr-RS")],
        },
        "SK_SK": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="sk-SK")],
        },
        "SO_SO": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="so-SO")],
        },
        "TL_PH": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="tl-PH")],
        },
        "UK_UA": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="uk-UA")],
        },
        "VI_VN": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="vi-VN")],
        },
        "ZU_ZA": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="zu-ZA")],
        },
    },
)

LANGUAGE_WITH_SCORE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#LanguageWithScore"),
    members={
        "LanguageCode": {"target": LANGUAGE_CODE},
        "Score": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
    },
)

LANGUAGE_IDENTIFICATION = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#LanguageIdentification"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": LANGUAGE_WITH_SCORE}},
)

LANGUAGE_OPTIONS = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#LanguageOptions"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 200}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^[a-zA-Z-,]+$"),
    ],
)

MEDIA_ENCODING = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MediaEncoding"),
    shape_type=ShapeType.ENUM,
    members={
        "PCM": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="pcm")],
        },
        "OGG_OPUS": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ogg-opus")],
        },
        "FLAC": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="flac")],
        },
    },
)

MEDIA_SAMPLE_RATE_HERTZ = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#MediaSampleRateHertz"),
    shape_type=ShapeType.INTEGER,
    traits=[
        Trait.new(id=ShapeID("smithy.api#box")),
        Trait.new(
            id=ShapeID("smithy.api#range"),
            value=MappingProxyType({"min": 8000, "max": 48000}),
        ),
    ],
)

MEDICAL_ENTITY = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalEntity"),
    members={
        "StartTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "Category": {"target": STRING},
        "Content": {"target": STRING},
        "Confidence": {"target": CONFIDENCE},
    },
)

MEDICAL_ENTITY_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalEntityList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": MEDICAL_ENTITY}},
)

MEDICAL_ITEM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalItem"),
    members={
        "StartTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "Type": {"target": ITEM_TYPE},
        "Content": {"target": STRING},
        "Confidence": {"target": CONFIDENCE},
        "Speaker": {"target": STRING},
    },
)

MEDICAL_ITEM_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalItemList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": MEDICAL_ITEM}},
)

MEDICAL_ALTERNATIVE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalAlternative"),
    members={
        "Transcript": {"target": STRING},
        "Items": {"target": MEDICAL_ITEM_LIST},
        "Entities": {"target": MEDICAL_ENTITY_LIST},
    },
)

MEDICAL_ALTERNATIVE_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalAlternativeList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": MEDICAL_ALTERNATIVE}},
)

MEDICAL_CONTENT_IDENTIFICATION_TYPE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalContentIdentificationType"),
    shape_type=ShapeType.ENUM,
    members={
        "PHI": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="PHI")],
        }
    },
)

MEDICAL_RESULT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalResult"),
    members={
        "ResultId": {"target": STRING},
        "StartTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "IsPartial": {
            "target": BOOLEAN,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=False)],
        },
        "Alternatives": {"target": MEDICAL_ALTERNATIVE_LIST},
        "ChannelId": {"target": STRING},
    },
)

MEDICAL_RESULT_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalResultList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": MEDICAL_RESULT}},
)

MEDICAL_SCRIBE_AUDIO_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeAudioEvent"),
    members={
        "AudioChunk": {
            "target": AUDIO_CHUNK,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#eventPayload")),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        }
    },
)

PRONOUNS = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Pronouns"),
    shape_type=ShapeType.ENUM,
    traits=[Trait.new(id=ShapeID("smithy.api#sensitive"))],
    members={
        "HE_HIM": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="HE_HIM")],
        },
        "SHE_HER": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="SHE_HER")],
        },
        "THEY_THEM": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="THEY_THEM")
            ],
        },
    },
)

MEDICAL_SCRIBE_PATIENT_CONTEXT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribePatientContext"),
    members={"Pronouns": {"target": PRONOUNS}},
)

MEDICAL_SCRIBE_CONTEXT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeContext"),
    members={"PatientContext": {"target": MEDICAL_SCRIBE_PATIENT_CONTEXT}},
)

MEDICAL_SCRIBE_CONFIGURATION_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeConfigurationEvent"),
    members={
        "VocabularyName": {"target": VOCABULARY_NAME},
        "VocabularyFilterName": {"target": VOCABULARY_FILTER_NAME},
        "VocabularyFilterMethod": {"target": MEDICAL_SCRIBE_VOCABULARY_FILTER_METHOD},
        "ResourceAccessRoleArn": {
            "target": IAM_ROLE_ARN,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
        "ChannelDefinitions": {"target": MEDICAL_SCRIBE_CHANNEL_DEFINITIONS},
        "EncryptionSettings": {"target": MEDICAL_SCRIBE_ENCRYPTION_SETTINGS},
        "PostStreamAnalyticsSettings": {
            "target": MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        },
        "MedicalScribeContext": {"target": MEDICAL_SCRIBE_CONTEXT},
    },
)

MEDICAL_SCRIBE_SESSION_CONTROL_EVENT_TYPE = Schema.collection(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#MedicalScribeSessionControlEventType"
    ),
    shape_type=ShapeType.ENUM,
    members={
        "END_OF_SESSION": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="END_OF_SESSION")
            ],
        }
    },
)

MEDICAL_SCRIBE_SESSION_CONTROL_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeSessionControlEvent"),
    members={
        "Type": {
            "target": MEDICAL_SCRIBE_SESSION_CONTROL_EVENT_TYPE,
            "traits": [Trait.new(id=ShapeID("smithy.api#required"))],
        }
    },
)

MEDICAL_SCRIBE_INPUT_STREAM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeInputStream"),
    shape_type=ShapeType.UNION,
    traits=[Trait.new(id=ShapeID("smithy.api#streaming"))],
    members={
        "AudioEvent": {"target": MEDICAL_SCRIBE_AUDIO_EVENT},
        "SessionControlEvent": {"target": MEDICAL_SCRIBE_SESSION_CONTROL_EVENT},
        "ConfigurationEvent": {"target": MEDICAL_SCRIBE_CONFIGURATION_EVENT},
    },
)

MEDICAL_SCRIBE_TRANSCRIPT_ITEM_TYPE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeTranscriptItemType"),
    shape_type=ShapeType.ENUM,
    members={
        "PRONUNCIATION": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="pronunciation")
            ],
        },
        "PUNCTUATION": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="punctuation")
            ],
        },
    },
)

MEDICAL_SCRIBE_TRANSCRIPT_ITEM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeTranscriptItem"),
    members={
        "BeginAudioTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndAudioTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "Type": {"target": MEDICAL_SCRIBE_TRANSCRIPT_ITEM_TYPE},
        "Confidence": {"target": CONFIDENCE},
        "Content": {"target": STRING},
        "VocabularyFilterMatch": {"target": NULLABLE_BOOLEAN},
    },
)

MEDICAL_SCRIBE_TRANSCRIPT_ITEM_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeTranscriptItemList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": MEDICAL_SCRIBE_TRANSCRIPT_ITEM}},
)

MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeTranscriptSegment"),
    members={
        "SegmentId": {"target": STRING},
        "BeginAudioTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndAudioTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "Content": {"target": STRING},
        "Items": {"target": MEDICAL_SCRIBE_TRANSCRIPT_ITEM_LIST},
        "IsPartial": {
            "target": BOOLEAN,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=False)],
        },
        "ChannelId": {"target": STRING},
    },
)

MEDICAL_SCRIBE_TRANSCRIPT_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeTranscriptEvent"),
    members={"TranscriptSegment": {"target": MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT}},
)

MEDICAL_SCRIBE_RESULT_STREAM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalScribeResultStream"),
    shape_type=ShapeType.UNION,
    traits=[Trait.new(id=ShapeID("smithy.api#streaming"))],
    members={
        "TranscriptEvent": {"target": MEDICAL_SCRIBE_TRANSCRIPT_EVENT},
        "BadRequestException": {"target": BAD_REQUEST_EXCEPTION},
        "LimitExceededException": {"target": LIMIT_EXCEEDED_EXCEPTION},
        "InternalFailureException": {"target": INTERNAL_FAILURE_EXCEPTION},
        "ConflictException": {"target": CONFLICT_EXCEPTION},
        "ServiceUnavailableException": {"target": SERVICE_UNAVAILABLE_EXCEPTION},
    },
)

MEDICAL_TRANSCRIPT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalTranscript"),
    members={"Results": {"target": MEDICAL_RESULT_LIST}},
)

MEDICAL_TRANSCRIPT_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalTranscriptEvent"),
    members={"Transcript": {"target": MEDICAL_TRANSCRIPT}},
)

MEDICAL_TRANSCRIPT_RESULT_STREAM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#MedicalTranscriptResultStream"),
    shape_type=ShapeType.UNION,
    traits=[Trait.new(id=ShapeID("smithy.api#streaming"))],
    members={
        "TranscriptEvent": {"target": MEDICAL_TRANSCRIPT_EVENT},
        "BadRequestException": {"target": BAD_REQUEST_EXCEPTION},
        "LimitExceededException": {"target": LIMIT_EXCEEDED_EXCEPTION},
        "InternalFailureException": {"target": INTERNAL_FAILURE_EXCEPTION},
        "ConflictException": {"target": CONFLICT_EXCEPTION},
        "ServiceUnavailableException": {"target": SERVICE_UNAVAILABLE_EXCEPTION},
    },
)

MODEL_NAME = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#ModelName"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 200}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^[0-9a-zA-Z._-]+$"),
    ],
)

NUMBER_OF_CHANNELS = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#NumberOfChannels"),
    shape_type=ShapeType.INTEGER,
    traits=[
        Trait.new(id=ShapeID("smithy.api#box")),
        Trait.new(id=ShapeID("smithy.api#range"), value=MappingProxyType({"min": 2})),
    ],
)

PARTIAL_RESULTS_STABILITY = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#PartialResultsStability"),
    shape_type=ShapeType.ENUM,
    members={
        "HIGH": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="high")],
        },
        "MEDIUM": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="medium")],
        },
        "LOW": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="low")],
        },
    },
)

PII_ENTITY_TYPES = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#PiiEntityTypes"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 300}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^[A-Z_, ]+$"),
    ],
)

REQUEST_ID = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#RequestId"),
    shape_type=ShapeType.STRING,
)

RESULT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Result"),
    members={
        "ResultId": {"target": STRING},
        "StartTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "EndTime": {
            "target": DOUBLE,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=0)],
        },
        "IsPartial": {
            "target": BOOLEAN,
            "traits": [Trait.new(id=ShapeID("smithy.api#default"), value=False)],
        },
        "Alternatives": {"target": ALTERNATIVE_LIST},
        "ChannelId": {"target": STRING},
        "LanguageCode": {"target": LANGUAGE_CODE},
        "LanguageIdentification": {"target": LANGUAGE_IDENTIFICATION},
    },
)

RESULT_LIST = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#ResultList"),
    shape_type=ShapeType.LIST,
    members={"member": {"target": RESULT}},
)

SPECIALTY = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Specialty"),
    shape_type=ShapeType.ENUM,
    members={
        "PRIMARYCARE": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="PRIMARYCARE")
            ],
        },
        "CARDIOLOGY": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="CARDIOLOGY")
            ],
        },
        "NEUROLOGY": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="NEUROLOGY")
            ],
        },
        "ONCOLOGY": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="ONCOLOGY")],
        },
        "RADIOLOGY": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="RADIOLOGY")
            ],
        },
        "UROLOGY": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="UROLOGY")],
        },
    },
)

VOCABULARY_FILTER_METHOD = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#VocabularyFilterMethod"),
    shape_type=ShapeType.ENUM,
    members={
        "REMOVE": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="remove")],
        },
        "MASK": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="mask")],
        },
        "TAG": {
            "target": UNIT,
            "traits": [Trait.new(id=ShapeID("smithy.api#enumValue"), value="tag")],
        },
    },
)

VOCABULARY_FILTER_NAMES = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#VocabularyFilterNames"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 3000}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^[a-zA-Z0-9,-._]+$"),
    ],
)

VOCABULARY_NAMES = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#VocabularyNames"),
    shape_type=ShapeType.STRING,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#length"),
            value=MappingProxyType({"min": 1, "max": 3000}),
        ),
        Trait.new(id=ShapeID("smithy.api#pattern"), value="^[a-zA-Z0-9,-._]+$"),
    ],
)

START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT = Schema.collection(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#StartCallAnalyticsStreamTranscriptionInput"
    ),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartCallAnalyticsStreamTranscriptionRequest",
        ),
        Trait.new(id=ShapeID("smithy.api#input")),
    ],
    members={
        "LanguageCode": {
            "target": CALL_ANALYTICS_LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                )
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "MediaEncoding": {
            "target": MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "VocabularyName": {
            "target": VOCABULARY_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-name",
                )
            ],
        },
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "AudioStream": {
            "target": AUDIO_STREAM,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#required")),
                Trait.new(id=ShapeID("smithy.api#httpPayload")),
            ],
        },
        "VocabularyFilterName": {
            "target": VOCABULARY_FILTER_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-name",
                )
            ],
        },
        "VocabularyFilterMethod": {
            "target": VOCABULARY_FILTER_METHOD,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-method",
                )
            ],
        },
        "LanguageModelName": {
            "target": MODEL_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-model-name",
                )
            ],
        },
        "IdentifyLanguage": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-identify-language",
                ),
            ],
        },
        "LanguageOptions": {
            "target": LANGUAGE_OPTIONS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-options",
                )
            ],
        },
        "PreferredLanguage": {
            "target": CALL_ANALYTICS_LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-preferred-language",
                )
            ],
        },
        "VocabularyNames": {
            "target": VOCABULARY_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-names",
                )
            ],
        },
        "VocabularyFilterNames": {
            "target": VOCABULARY_FILTER_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-names",
                )
            ],
        },
        "EnablePartialResultsStabilization": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-partial-results-stabilization",
                ),
            ],
        },
        "PartialResultsStability": {
            "target": PARTIAL_RESULTS_STABILITY,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-partial-results-stability",
                )
            ],
        },
        "ContentIdentificationType": {
            "target": CONTENT_IDENTIFICATION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-identification-type",
                )
            ],
        },
        "ContentRedactionType": {
            "target": CONTENT_REDACTION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-redaction-type",
                )
            ],
        },
        "PiiEntityTypes": {
            "target": PII_ENTITY_TYPES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-pii-entity-types",
                )
            ],
        },
    },
)

START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT = Schema.collection(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#StartCallAnalyticsStreamTranscriptionOutput"
    ),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartCallAnalyticsStreamTranscriptionResponse",
        ),
        Trait.new(id=ShapeID("smithy.api#output")),
    ],
    members={
        "RequestId": {
            "target": REQUEST_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"), value="x-amzn-request-id"
                )
            ],
        },
        "LanguageCode": {
            "target": CALL_ANALYTICS_LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                )
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                )
            ],
        },
        "MediaEncoding": {
            "target": MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                )
            ],
        },
        "VocabularyName": {
            "target": VOCABULARY_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-name",
                )
            ],
        },
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "CallAnalyticsTranscriptResultStream": {
            "target": CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM,
            "traits": [Trait.new(id=ShapeID("smithy.api#httpPayload"))],
        },
        "VocabularyFilterName": {
            "target": VOCABULARY_FILTER_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-name",
                )
            ],
        },
        "VocabularyFilterMethod": {
            "target": VOCABULARY_FILTER_METHOD,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-method",
                )
            ],
        },
        "LanguageModelName": {
            "target": MODEL_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-model-name",
                )
            ],
        },
        "IdentifyLanguage": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-identify-language",
                ),
            ],
        },
        "LanguageOptions": {
            "target": LANGUAGE_OPTIONS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-options",
                )
            ],
        },
        "PreferredLanguage": {
            "target": CALL_ANALYTICS_LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-preferred-language",
                )
            ],
        },
        "VocabularyNames": {
            "target": VOCABULARY_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-names",
                )
            ],
        },
        "VocabularyFilterNames": {
            "target": VOCABULARY_FILTER_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-names",
                )
            ],
        },
        "EnablePartialResultsStabilization": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-partial-results-stabilization",
                ),
            ],
        },
        "PartialResultsStability": {
            "target": PARTIAL_RESULTS_STABILITY,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-partial-results-stability",
                )
            ],
        },
        "ContentIdentificationType": {
            "target": CONTENT_IDENTIFICATION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-identification-type",
                )
            ],
        },
        "ContentRedactionType": {
            "target": CONTENT_REDACTION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-redaction-type",
                )
            ],
        },
        "PiiEntityTypes": {
            "target": PII_ENTITY_TYPES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-pii-entity-types",
                )
            ],
        },
    },
)

START_CALL_ANALYTICS_STREAM_TRANSCRIPTION = Schema(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#StartCallAnalyticsStreamTranscription"
    ),
    shape_type=ShapeType.OPERATION,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#http"),
            value=MappingProxyType(
                {
                    "method": "POST",
                    "uri": "/call-analytics-stream-transcription",
                    "code": 200,
                }
            ),
        )
    ],
)

START_MEDICAL_SCRIBE_STREAM_INPUT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#StartMedicalScribeStreamInput"),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartMedicalScribeStreamRequest",
        ),
        Trait.new(id=ShapeID("smithy.api#input")),
    ],
    members={
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "LanguageCode": {
            "target": MEDICAL_SCRIBE_LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDICAL_SCRIBE_MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "MediaEncoding": {
            "target": MEDICAL_SCRIBE_MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "InputStream": {
            "target": MEDICAL_SCRIBE_INPUT_STREAM,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#required")),
                Trait.new(id=ShapeID("smithy.api#httpPayload")),
            ],
        },
    },
)

START_MEDICAL_SCRIBE_STREAM_OUTPUT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#StartMedicalScribeStreamOutput"),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartMedicalScribeStreamResponse",
        ),
        Trait.new(id=ShapeID("smithy.api#output")),
    ],
    members={
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "RequestId": {
            "target": REQUEST_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"), value="x-amzn-request-id"
                )
            ],
        },
        "LanguageCode": {
            "target": MEDICAL_SCRIBE_LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                )
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDICAL_SCRIBE_MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                )
            ],
        },
        "MediaEncoding": {
            "target": MEDICAL_SCRIBE_MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                )
            ],
        },
        "ResultStream": {
            "target": MEDICAL_SCRIBE_RESULT_STREAM,
            "traits": [Trait.new(id=ShapeID("smithy.api#httpPayload"))],
        },
    },
)

START_MEDICAL_SCRIBE_STREAM = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#StartMedicalScribeStream"),
    shape_type=ShapeType.OPERATION,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#http"),
            value=MappingProxyType(
                {"method": "POST", "uri": "/medical-scribe-stream", "code": 200}
            ),
        )
    ],
)

TYPE = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Type"),
    shape_type=ShapeType.ENUM,
    members={
        "CONVERSATION": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="CONVERSATION")
            ],
        },
        "DICTATION": {
            "target": UNIT,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#enumValue"), value="DICTATION")
            ],
        },
    },
)

START_MEDICAL_STREAM_TRANSCRIPTION_INPUT = Schema.collection(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#StartMedicalStreamTranscriptionInput"
    ),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartMedicalStreamTranscriptionRequest",
        ),
        Trait.new(id=ShapeID("smithy.api#input")),
    ],
    members={
        "LanguageCode": {
            "target": LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "MediaEncoding": {
            "target": MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "VocabularyName": {
            "target": VOCABULARY_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-name",
                )
            ],
        },
        "Specialty": {
            "target": SPECIALTY,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-specialty",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "Type": {
            "target": TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"), value="x-amzn-transcribe-type"
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "ShowSpeakerLabel": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-show-speaker-label",
                ),
            ],
        },
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "AudioStream": {
            "target": AUDIO_STREAM,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#required")),
                Trait.new(id=ShapeID("smithy.api#httpPayload")),
            ],
        },
        "EnableChannelIdentification": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-channel-identification",
                ),
            ],
        },
        "NumberOfChannels": {
            "target": NUMBER_OF_CHANNELS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-number-of-channels",
                )
            ],
        },
        "ContentIdentificationType": {
            "target": MEDICAL_CONTENT_IDENTIFICATION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-identification-type",
                )
            ],
        },
    },
)

START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT = Schema.collection(
    id=ShapeID(
        "com.amazonaws.transcribestreaming#StartMedicalStreamTranscriptionOutput"
    ),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartMedicalStreamTranscriptionResponse",
        ),
        Trait.new(id=ShapeID("smithy.api#output")),
    ],
    members={
        "RequestId": {
            "target": REQUEST_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"), value="x-amzn-request-id"
                )
            ],
        },
        "LanguageCode": {
            "target": LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                )
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                )
            ],
        },
        "MediaEncoding": {
            "target": MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                )
            ],
        },
        "VocabularyName": {
            "target": VOCABULARY_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-name",
                )
            ],
        },
        "Specialty": {
            "target": SPECIALTY,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-specialty",
                )
            ],
        },
        "Type": {
            "target": TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"), value="x-amzn-transcribe-type"
                )
            ],
        },
        "ShowSpeakerLabel": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-show-speaker-label",
                ),
            ],
        },
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "TranscriptResultStream": {
            "target": MEDICAL_TRANSCRIPT_RESULT_STREAM,
            "traits": [Trait.new(id=ShapeID("smithy.api#httpPayload"))],
        },
        "EnableChannelIdentification": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-channel-identification",
                ),
            ],
        },
        "NumberOfChannels": {
            "target": NUMBER_OF_CHANNELS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-number-of-channels",
                )
            ],
        },
        "ContentIdentificationType": {
            "target": MEDICAL_CONTENT_IDENTIFICATION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-identification-type",
                )
            ],
        },
    },
)

START_MEDICAL_STREAM_TRANSCRIPTION = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#StartMedicalStreamTranscription"),
    shape_type=ShapeType.OPERATION,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#http"),
            value=MappingProxyType(
                {"method": "POST", "uri": "/medical-stream-transcription", "code": 200}
            ),
        )
    ],
)

START_STREAM_TRANSCRIPTION_INPUT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#StartStreamTranscriptionInput"),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartStreamTranscriptionRequest",
        ),
        Trait.new(id=ShapeID("smithy.api#input")),
    ],
    members={
        "LanguageCode": {
            "target": LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                )
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "MediaEncoding": {
            "target": MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                ),
                Trait.new(id=ShapeID("smithy.api#required")),
            ],
        },
        "VocabularyName": {
            "target": VOCABULARY_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-name",
                )
            ],
        },
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "AudioStream": {
            "target": AUDIO_STREAM,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#required")),
                Trait.new(id=ShapeID("smithy.api#httpPayload")),
            ],
        },
        "VocabularyFilterName": {
            "target": VOCABULARY_FILTER_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-name",
                )
            ],
        },
        "VocabularyFilterMethod": {
            "target": VOCABULARY_FILTER_METHOD,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-method",
                )
            ],
        },
        "ShowSpeakerLabel": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-show-speaker-label",
                ),
            ],
        },
        "EnableChannelIdentification": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-channel-identification",
                ),
            ],
        },
        "NumberOfChannels": {
            "target": NUMBER_OF_CHANNELS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-number-of-channels",
                )
            ],
        },
        "EnablePartialResultsStabilization": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-partial-results-stabilization",
                ),
            ],
        },
        "PartialResultsStability": {
            "target": PARTIAL_RESULTS_STABILITY,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-partial-results-stability",
                )
            ],
        },
        "ContentIdentificationType": {
            "target": CONTENT_IDENTIFICATION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-identification-type",
                )
            ],
        },
        "ContentRedactionType": {
            "target": CONTENT_REDACTION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-redaction-type",
                )
            ],
        },
        "PiiEntityTypes": {
            "target": PII_ENTITY_TYPES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-pii-entity-types",
                )
            ],
        },
        "LanguageModelName": {
            "target": MODEL_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-model-name",
                )
            ],
        },
        "IdentifyLanguage": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-identify-language",
                ),
            ],
        },
        "LanguageOptions": {
            "target": LANGUAGE_OPTIONS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-options",
                )
            ],
        },
        "PreferredLanguage": {
            "target": LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-preferred-language",
                )
            ],
        },
        "IdentifyMultipleLanguages": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-identify-multiple-languages",
                ),
            ],
        },
        "VocabularyNames": {
            "target": VOCABULARY_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-names",
                )
            ],
        },
        "VocabularyFilterNames": {
            "target": VOCABULARY_FILTER_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-names",
                )
            ],
        },
    },
)

TRANSCRIPT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#Transcript"),
    members={"Results": {"target": RESULT_LIST}},
)

TRANSCRIPT_EVENT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#TranscriptEvent"),
    members={"Transcript": {"target": TRANSCRIPT}},
)

TRANSCRIPT_RESULT_STREAM = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#TranscriptResultStream"),
    shape_type=ShapeType.UNION,
    traits=[Trait.new(id=ShapeID("smithy.api#streaming"))],
    members={
        "TranscriptEvent": {"target": TRANSCRIPT_EVENT},
        "BadRequestException": {"target": BAD_REQUEST_EXCEPTION},
        "LimitExceededException": {"target": LIMIT_EXCEEDED_EXCEPTION},
        "InternalFailureException": {"target": INTERNAL_FAILURE_EXCEPTION},
        "ConflictException": {"target": CONFLICT_EXCEPTION},
        "ServiceUnavailableException": {"target": SERVICE_UNAVAILABLE_EXCEPTION},
    },
)

START_STREAM_TRANSCRIPTION_OUTPUT = Schema.collection(
    id=ShapeID("com.amazonaws.transcribestreaming#StartStreamTranscriptionOutput"),
    traits=[
        Trait.new(
            id=ShapeID("smithy.synthetic#originalShapeId"),
            value="com.amazonaws.transcribestreaming#StartStreamTranscriptionResponse",
        ),
        Trait.new(id=ShapeID("smithy.api#output")),
    ],
    members={
        "RequestId": {
            "target": REQUEST_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"), value="x-amzn-request-id"
                )
            ],
        },
        "LanguageCode": {
            "target": LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-code",
                )
            ],
        },
        "MediaSampleRateHertz": {
            "target": MEDIA_SAMPLE_RATE_HERTZ,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-sample-rate",
                )
            ],
        },
        "MediaEncoding": {
            "target": MEDIA_ENCODING,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-media-encoding",
                )
            ],
        },
        "VocabularyName": {
            "target": VOCABULARY_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-name",
                )
            ],
        },
        "SessionId": {
            "target": SESSION_ID,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-session-id",
                )
            ],
        },
        "TranscriptResultStream": {
            "target": TRANSCRIPT_RESULT_STREAM,
            "traits": [Trait.new(id=ShapeID("smithy.api#httpPayload"))],
        },
        "VocabularyFilterName": {
            "target": VOCABULARY_FILTER_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-name",
                )
            ],
        },
        "VocabularyFilterMethod": {
            "target": VOCABULARY_FILTER_METHOD,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-method",
                )
            ],
        },
        "ShowSpeakerLabel": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-show-speaker-label",
                ),
            ],
        },
        "EnableChannelIdentification": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-channel-identification",
                ),
            ],
        },
        "NumberOfChannels": {
            "target": NUMBER_OF_CHANNELS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-number-of-channels",
                )
            ],
        },
        "EnablePartialResultsStabilization": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-enable-partial-results-stabilization",
                ),
            ],
        },
        "PartialResultsStability": {
            "target": PARTIAL_RESULTS_STABILITY,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-partial-results-stability",
                )
            ],
        },
        "ContentIdentificationType": {
            "target": CONTENT_IDENTIFICATION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-identification-type",
                )
            ],
        },
        "ContentRedactionType": {
            "target": CONTENT_REDACTION_TYPE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-content-redaction-type",
                )
            ],
        },
        "PiiEntityTypes": {
            "target": PII_ENTITY_TYPES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-pii-entity-types",
                )
            ],
        },
        "LanguageModelName": {
            "target": MODEL_NAME,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-model-name",
                )
            ],
        },
        "IdentifyLanguage": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-identify-language",
                ),
            ],
        },
        "LanguageOptions": {
            "target": LANGUAGE_OPTIONS,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-language-options",
                )
            ],
        },
        "PreferredLanguage": {
            "target": LANGUAGE_CODE,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-preferred-language",
                )
            ],
        },
        "IdentifyMultipleLanguages": {
            "target": BOOLEAN,
            "traits": [
                Trait.new(id=ShapeID("smithy.api#default"), value=False),
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-identify-multiple-languages",
                ),
            ],
        },
        "VocabularyNames": {
            "target": VOCABULARY_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-names",
                )
            ],
        },
        "VocabularyFilterNames": {
            "target": VOCABULARY_FILTER_NAMES,
            "traits": [
                Trait.new(
                    id=ShapeID("smithy.api#httpHeader"),
                    value="x-amzn-transcribe-vocabulary-filter-names",
                )
            ],
        },
    },
)

START_STREAM_TRANSCRIPTION = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#StartStreamTranscription"),
    shape_type=ShapeType.OPERATION,
    traits=[
        Trait.new(
            id=ShapeID("smithy.api#http"),
            value=MappingProxyType(
                {"method": "POST", "uri": "/stream-transcription", "code": 200}
            ),
        )
    ],
)

TRANSCRIBE = Schema(
    id=ShapeID("com.amazonaws.transcribestreaming#Transcribe"),
    shape_type=ShapeType.SERVICE,
    traits=[
        Trait.new(
            id=ShapeID("aws.auth#sigv4"), value=MappingProxyType({"name": "transcribe"})
        ),
        Trait.new(
            id=ShapeID("smithy.api#title"), value="Amazon Transcribe Streaming Service"
        ),
        Trait.new(
            id=ShapeID("smithy.rules#endpointTests"),
            value=MappingProxyType(
                {
                    "testCases": (
                        MappingProxyType(
                            {
                                "documentation": "For region ap-northeast-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.ap-northeast-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "ap-northeast-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region ap-northeast-2 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.ap-northeast-2.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "ap-northeast-2",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region ap-southeast-2 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.ap-southeast-2.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "ap-southeast-2",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region ca-central-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.ca-central-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "ca-central-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region eu-central-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.eu-central-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "eu-central-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region eu-west-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.eu-west-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "eu-west-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region eu-west-2 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.eu-west-2.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "eu-west-2",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region sa-east-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.sa-east-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "sa-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-east-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-east-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-east-2 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-east-2.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-2",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-west-2 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-west-2.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-west-2",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-east-1 with FIPS enabled and DualStack enabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.us-east-1.api.aws"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-1",
                                        "UseFIPS": True,
                                        "UseDualStack": True,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-east-1 with FIPS enabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.us-east-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-1",
                                        "UseFIPS": True,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-east-1 with FIPS disabled and DualStack enabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-east-1.api.aws"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": True,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region cn-north-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.cn-north-1.amazonaws.com.cn"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "cn-north-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region cn-northwest-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.cn-northwest-1.amazonaws.com.cn"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "cn-northwest-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region cn-north-1 with FIPS enabled and DualStack enabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.cn-north-1.api.amazonwebservices.com.cn"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "cn-north-1",
                                        "UseFIPS": True,
                                        "UseDualStack": True,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region cn-north-1 with FIPS enabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.cn-north-1.amazonaws.com.cn"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "cn-north-1",
                                        "UseFIPS": True,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region cn-north-1 with FIPS disabled and DualStack enabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.cn-north-1.api.amazonwebservices.com.cn"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "cn-north-1",
                                        "UseFIPS": False,
                                        "UseDualStack": True,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-gov-east-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-gov-east-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-gov-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-gov-west-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-gov-west-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-gov-west-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-gov-east-1 with FIPS enabled and DualStack enabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.us-gov-east-1.api.aws"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-gov-east-1",
                                        "UseFIPS": True,
                                        "UseDualStack": True,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-gov-east-1 with FIPS enabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.us-gov-east-1.amazonaws.com"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-gov-east-1",
                                        "UseFIPS": True,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-gov-east-1 with FIPS disabled and DualStack enabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-gov-east-1.api.aws"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-gov-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": True,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-iso-east-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-iso-east-1.c2s.ic.gov"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-iso-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-iso-east-1 with FIPS enabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.us-iso-east-1.c2s.ic.gov"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-iso-east-1",
                                        "UseFIPS": True,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-isob-east-1 with FIPS enabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming-fips.us-isob-east-1.sc2s.sgov.gov"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-isob-east-1",
                                        "UseFIPS": True,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For region us-isob-east-1 with FIPS disabled and DualStack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {
                                                "url": "https://transcribestreaming.us-isob-east-1.sc2s.sgov.gov"
                                            }
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-isob-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For custom endpoint with region set and fips disabled and dualstack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {"url": "https://example.com"}
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                        "Endpoint": "https://example.com",
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For custom endpoint with region not set and fips disabled and dualstack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "endpoint": MappingProxyType(
                                            {"url": "https://example.com"}
                                        )
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "UseFIPS": False,
                                        "UseDualStack": False,
                                        "Endpoint": "https://example.com",
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For custom endpoint with fips enabled and dualstack disabled",
                                "expect": MappingProxyType(
                                    {
                                        "error": "Invalid Configuration: FIPS and custom endpoint are not supported"
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-1",
                                        "UseFIPS": True,
                                        "UseDualStack": False,
                                        "Endpoint": "https://example.com",
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "For custom endpoint with fips disabled and dualstack enabled",
                                "expect": MappingProxyType(
                                    {
                                        "error": "Invalid Configuration: Dualstack and custom endpoint are not supported"
                                    }
                                ),
                                "params": MappingProxyType(
                                    {
                                        "Region": "us-east-1",
                                        "UseFIPS": False,
                                        "UseDualStack": True,
                                        "Endpoint": "https://example.com",
                                    }
                                ),
                            }
                        ),
                        MappingProxyType(
                            {
                                "documentation": "Missing region",
                                "expect": MappingProxyType(
                                    {"error": "Invalid Configuration: Missing Region"}
                                ),
                            }
                        ),
                    ),
                    "version": "1.0",
                }
            ),
        ),
        Trait.new(
            id=ShapeID("smithy.rules#endpointRuleSet"),
            value=MappingProxyType(
                {
                    "version": "1.0",
                    "parameters": MappingProxyType(
                        {
                            "Region": MappingProxyType(
                                {
                                    "builtIn": "AWS::Region",
                                    "required": False,
                                    "documentation": "The AWS region used to dispatch the request.",
                                    "type": "String",
                                }
                            ),
                            "UseDualStack": MappingProxyType(
                                {
                                    "builtIn": "AWS::UseDualStack",
                                    "required": True,
                                    "default": False,
                                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                                    "type": "Boolean",
                                }
                            ),
                            "UseFIPS": MappingProxyType(
                                {
                                    "builtIn": "AWS::UseFIPS",
                                    "required": True,
                                    "default": False,
                                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                                    "type": "Boolean",
                                }
                            ),
                            "Endpoint": MappingProxyType(
                                {
                                    "builtIn": "SDK::Endpoint",
                                    "required": False,
                                    "documentation": "Override the endpoint used to send this request",
                                    "type": "String",
                                }
                            ),
                        }
                    ),
                    "rules": (
                        MappingProxyType(
                            {
                                "conditions": (
                                    MappingProxyType(
                                        {
                                            "fn": "isSet",
                                            "argv": (
                                                MappingProxyType({"ref": "Endpoint"}),
                                            ),
                                        }
                                    ),
                                ),
                                "rules": (
                                    MappingProxyType(
                                        {
                                            "conditions": (
                                                MappingProxyType(
                                                    {
                                                        "fn": "booleanEquals",
                                                        "argv": (
                                                            MappingProxyType(
                                                                {"ref": "UseFIPS"}
                                                            ),
                                                            True,
                                                        ),
                                                    }
                                                ),
                                            ),
                                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                                            "type": "error",
                                        }
                                    ),
                                    MappingProxyType(
                                        {
                                            "conditions": (
                                                MappingProxyType(
                                                    {
                                                        "fn": "booleanEquals",
                                                        "argv": (
                                                            MappingProxyType(
                                                                {"ref": "UseDualStack"}
                                                            ),
                                                            True,
                                                        ),
                                                    }
                                                ),
                                            ),
                                            "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                            "type": "error",
                                        }
                                    ),
                                    MappingProxyType(
                                        {
                                            "conditions": (),
                                            "endpoint": MappingProxyType(
                                                {
                                                    "url": MappingProxyType(
                                                        {"ref": "Endpoint"}
                                                    ),
                                                    "properties": MappingProxyType({}),
                                                    "headers": MappingProxyType({}),
                                                }
                                            ),
                                            "type": "endpoint",
                                        }
                                    ),
                                ),
                                "type": "tree",
                            }
                        ),
                        MappingProxyType(
                            {
                                "conditions": (
                                    MappingProxyType(
                                        {
                                            "fn": "isSet",
                                            "argv": (
                                                MappingProxyType({"ref": "Region"}),
                                            ),
                                        }
                                    ),
                                ),
                                "rules": (
                                    MappingProxyType(
                                        {
                                            "conditions": (
                                                MappingProxyType(
                                                    {
                                                        "fn": "aws.partition",
                                                        "argv": (
                                                            MappingProxyType(
                                                                {"ref": "Region"}
                                                            ),
                                                        ),
                                                        "assign": "PartitionResult",
                                                    }
                                                ),
                                            ),
                                            "rules": (
                                                MappingProxyType(
                                                    {
                                                        "conditions": (
                                                            MappingProxyType(
                                                                {
                                                                    "fn": "booleanEquals",
                                                                    "argv": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "ref": "UseFIPS"
                                                                            }
                                                                        ),
                                                                        True,
                                                                    ),
                                                                }
                                                            ),
                                                            MappingProxyType(
                                                                {
                                                                    "fn": "booleanEquals",
                                                                    "argv": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "ref": "UseDualStack"
                                                                            }
                                                                        ),
                                                                        True,
                                                                    ),
                                                                }
                                                            ),
                                                        ),
                                                        "rules": (
                                                            MappingProxyType(
                                                                {
                                                                    "conditions": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "fn": "booleanEquals",
                                                                                "argv": (
                                                                                    True,
                                                                                    MappingProxyType(
                                                                                        {
                                                                                            "fn": "getAttr",
                                                                                            "argv": (
                                                                                                MappingProxyType(
                                                                                                    {
                                                                                                        "ref": "PartitionResult"
                                                                                                    }
                                                                                                ),
                                                                                                "supportsFIPS",
                                                                                            ),
                                                                                        }
                                                                                    ),
                                                                                ),
                                                                            }
                                                                        ),
                                                                        MappingProxyType(
                                                                            {
                                                                                "fn": "booleanEquals",
                                                                                "argv": (
                                                                                    True,
                                                                                    MappingProxyType(
                                                                                        {
                                                                                            "fn": "getAttr",
                                                                                            "argv": (
                                                                                                MappingProxyType(
                                                                                                    {
                                                                                                        "ref": "PartitionResult"
                                                                                                    }
                                                                                                ),
                                                                                                "supportsDualStack",
                                                                                            ),
                                                                                        }
                                                                                    ),
                                                                                ),
                                                                            }
                                                                        ),
                                                                    ),
                                                                    "rules": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "conditions": (),
                                                                                "endpoint": MappingProxyType(
                                                                                    {
                                                                                        "url": "https://transcribestreaming-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                                        "properties": MappingProxyType(
                                                                                            {}
                                                                                        ),
                                                                                        "headers": MappingProxyType(
                                                                                            {}
                                                                                        ),
                                                                                    }
                                                                                ),
                                                                                "type": "endpoint",
                                                                            }
                                                                        ),
                                                                    ),
                                                                    "type": "tree",
                                                                }
                                                            ),
                                                            MappingProxyType(
                                                                {
                                                                    "conditions": (),
                                                                    "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                                                    "type": "error",
                                                                }
                                                            ),
                                                        ),
                                                        "type": "tree",
                                                    }
                                                ),
                                                MappingProxyType(
                                                    {
                                                        "conditions": (
                                                            MappingProxyType(
                                                                {
                                                                    "fn": "booleanEquals",
                                                                    "argv": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "ref": "UseFIPS"
                                                                            }
                                                                        ),
                                                                        True,
                                                                    ),
                                                                }
                                                            ),
                                                        ),
                                                        "rules": (
                                                            MappingProxyType(
                                                                {
                                                                    "conditions": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "fn": "booleanEquals",
                                                                                "argv": (
                                                                                    MappingProxyType(
                                                                                        {
                                                                                            "fn": "getAttr",
                                                                                            "argv": (
                                                                                                MappingProxyType(
                                                                                                    {
                                                                                                        "ref": "PartitionResult"
                                                                                                    }
                                                                                                ),
                                                                                                "supportsFIPS",
                                                                                            ),
                                                                                        }
                                                                                    ),
                                                                                    True,
                                                                                ),
                                                                            }
                                                                        ),
                                                                    ),
                                                                    "rules": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "conditions": (),
                                                                                "endpoint": MappingProxyType(
                                                                                    {
                                                                                        "url": "https://transcribestreaming-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                                                        "properties": MappingProxyType(
                                                                                            {}
                                                                                        ),
                                                                                        "headers": MappingProxyType(
                                                                                            {}
                                                                                        ),
                                                                                    }
                                                                                ),
                                                                                "type": "endpoint",
                                                                            }
                                                                        ),
                                                                    ),
                                                                    "type": "tree",
                                                                }
                                                            ),
                                                            MappingProxyType(
                                                                {
                                                                    "conditions": (),
                                                                    "error": "FIPS is enabled but this partition does not support FIPS",
                                                                    "type": "error",
                                                                }
                                                            ),
                                                        ),
                                                        "type": "tree",
                                                    }
                                                ),
                                                MappingProxyType(
                                                    {
                                                        "conditions": (
                                                            MappingProxyType(
                                                                {
                                                                    "fn": "booleanEquals",
                                                                    "argv": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "ref": "UseDualStack"
                                                                            }
                                                                        ),
                                                                        True,
                                                                    ),
                                                                }
                                                            ),
                                                        ),
                                                        "rules": (
                                                            MappingProxyType(
                                                                {
                                                                    "conditions": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "fn": "booleanEquals",
                                                                                "argv": (
                                                                                    True,
                                                                                    MappingProxyType(
                                                                                        {
                                                                                            "fn": "getAttr",
                                                                                            "argv": (
                                                                                                MappingProxyType(
                                                                                                    {
                                                                                                        "ref": "PartitionResult"
                                                                                                    }
                                                                                                ),
                                                                                                "supportsDualStack",
                                                                                            ),
                                                                                        }
                                                                                    ),
                                                                                ),
                                                                            }
                                                                        ),
                                                                    ),
                                                                    "rules": (
                                                                        MappingProxyType(
                                                                            {
                                                                                "conditions": (),
                                                                                "endpoint": MappingProxyType(
                                                                                    {
                                                                                        "url": "https://transcribestreaming.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                                        "properties": MappingProxyType(
                                                                                            {}
                                                                                        ),
                                                                                        "headers": MappingProxyType(
                                                                                            {}
                                                                                        ),
                                                                                    }
                                                                                ),
                                                                                "type": "endpoint",
                                                                            }
                                                                        ),
                                                                    ),
                                                                    "type": "tree",
                                                                }
                                                            ),
                                                            MappingProxyType(
                                                                {
                                                                    "conditions": (),
                                                                    "error": "DualStack is enabled but this partition does not support DualStack",
                                                                    "type": "error",
                                                                }
                                                            ),
                                                        ),
                                                        "type": "tree",
                                                    }
                                                ),
                                                MappingProxyType(
                                                    {
                                                        "conditions": (),
                                                        "endpoint": MappingProxyType(
                                                            {
                                                                "url": "https://transcribestreaming.{Region}.{PartitionResult#dnsSuffix}",
                                                                "properties": MappingProxyType(
                                                                    {}
                                                                ),
                                                                "headers": MappingProxyType(
                                                                    {}
                                                                ),
                                                            }
                                                        ),
                                                        "type": "endpoint",
                                                    }
                                                ),
                                            ),
                                            "type": "tree",
                                        }
                                    ),
                                ),
                                "type": "tree",
                            }
                        ),
                        MappingProxyType(
                            {
                                "conditions": (),
                                "error": "Invalid Configuration: Missing Region",
                                "type": "error",
                            }
                        ),
                    ),
                }
            ),
        ),
        Trait.new(
            id=ShapeID("aws.api#service"),
            value=MappingProxyType(
                {
                    "sdkId": "Transcribe Streaming",
                    "arnNamespace": "transcribe",
                    "cloudFormationName": "TranscribeStreaming",
                    "cloudTrailEventSource": "transcribestreaming.amazonaws.com",
                    "endpointPrefix": "transcribestreaming",
                }
            ),
        ),
        Trait.new(
            id=ShapeID("aws.protocols#restJson1"),
            value=MappingProxyType(
                {"http": ("http/1.1", "h2"), "eventStreamHttp": ("h2",)}
            ),
        ),
    ],
)
