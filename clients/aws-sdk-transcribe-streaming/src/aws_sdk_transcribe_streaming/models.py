# Code generated by smithy-python-codegen DO NOT EDIT.

from dataclasses import dataclass, field
from datetime import datetime
from enum import StrEnum
import logging
from typing import Any, Literal, Self, Union

from smithy_core.deserializers import ShapeDeserializer
from smithy_core.documents import TypeRegistry
from smithy_core.exceptions import ModeledError, SerializationError
from smithy_core.schemas import APIOperation, Schema
from smithy_core.serializers import ShapeSerializer
from smithy_core.shapes import ShapeID

from ._private.schemas import (
    ALTERNATIVE as _SCHEMA_ALTERNATIVE,
    AUDIO_EVENT as _SCHEMA_AUDIO_EVENT,
    AUDIO_STREAM as _SCHEMA_AUDIO_STREAM,
    BAD_REQUEST_EXCEPTION as _SCHEMA_BAD_REQUEST_EXCEPTION,
    CALL_ANALYTICS_ENTITY as _SCHEMA_CALL_ANALYTICS_ENTITY,
    CALL_ANALYTICS_ITEM as _SCHEMA_CALL_ANALYTICS_ITEM,
    CALL_ANALYTICS_LANGUAGE_WITH_SCORE as _SCHEMA_CALL_ANALYTICS_LANGUAGE_WITH_SCORE,
    CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM as _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM,
    CATEGORY_EVENT as _SCHEMA_CATEGORY_EVENT,
    CHANNEL_DEFINITION as _SCHEMA_CHANNEL_DEFINITION,
    CHARACTER_OFFSETS as _SCHEMA_CHARACTER_OFFSETS,
    CLINICAL_NOTE_GENERATION_RESULT as _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT,
    CLINICAL_NOTE_GENERATION_SETTINGS as _SCHEMA_CLINICAL_NOTE_GENERATION_SETTINGS,
    CONFIGURATION_EVENT as _SCHEMA_CONFIGURATION_EVENT,
    CONFLICT_EXCEPTION as _SCHEMA_CONFLICT_EXCEPTION,
    ENTITY as _SCHEMA_ENTITY,
    GET_MEDICAL_SCRIBE_STREAM as _SCHEMA_GET_MEDICAL_SCRIBE_STREAM,
    GET_MEDICAL_SCRIBE_STREAM_INPUT as _SCHEMA_GET_MEDICAL_SCRIBE_STREAM_INPUT,
    GET_MEDICAL_SCRIBE_STREAM_OUTPUT as _SCHEMA_GET_MEDICAL_SCRIBE_STREAM_OUTPUT,
    INTERNAL_FAILURE_EXCEPTION as _SCHEMA_INTERNAL_FAILURE_EXCEPTION,
    ISSUE_DETECTED as _SCHEMA_ISSUE_DETECTED,
    ITEM as _SCHEMA_ITEM,
    LANGUAGE_WITH_SCORE as _SCHEMA_LANGUAGE_WITH_SCORE,
    LIMIT_EXCEEDED_EXCEPTION as _SCHEMA_LIMIT_EXCEEDED_EXCEPTION,
    MEDICAL_ALTERNATIVE as _SCHEMA_MEDICAL_ALTERNATIVE,
    MEDICAL_ENTITY as _SCHEMA_MEDICAL_ENTITY,
    MEDICAL_ITEM as _SCHEMA_MEDICAL_ITEM,
    MEDICAL_RESULT as _SCHEMA_MEDICAL_RESULT,
    MEDICAL_SCRIBE_AUDIO_EVENT as _SCHEMA_MEDICAL_SCRIBE_AUDIO_EVENT,
    MEDICAL_SCRIBE_CHANNEL_DEFINITION as _SCHEMA_MEDICAL_SCRIBE_CHANNEL_DEFINITION,
    MEDICAL_SCRIBE_CONFIGURATION_EVENT as _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT,
    MEDICAL_SCRIBE_CONTEXT as _SCHEMA_MEDICAL_SCRIBE_CONTEXT,
    MEDICAL_SCRIBE_ENCRYPTION_SETTINGS as _SCHEMA_MEDICAL_SCRIBE_ENCRYPTION_SETTINGS,
    MEDICAL_SCRIBE_INPUT_STREAM as _SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM,
    MEDICAL_SCRIBE_PATIENT_CONTEXT as _SCHEMA_MEDICAL_SCRIBE_PATIENT_CONTEXT,
    MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_RESULT as _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_RESULT,
    MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS as _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS,
    MEDICAL_SCRIBE_RESULT_STREAM as _SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM,
    MEDICAL_SCRIBE_SESSION_CONTROL_EVENT as _SCHEMA_MEDICAL_SCRIBE_SESSION_CONTROL_EVENT,
    MEDICAL_SCRIBE_STREAM_DETAILS as _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS,
    MEDICAL_SCRIBE_TRANSCRIPT_EVENT as _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_EVENT,
    MEDICAL_SCRIBE_TRANSCRIPT_ITEM as _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM,
    MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT as _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT,
    MEDICAL_TRANSCRIPT as _SCHEMA_MEDICAL_TRANSCRIPT,
    MEDICAL_TRANSCRIPT_EVENT as _SCHEMA_MEDICAL_TRANSCRIPT_EVENT,
    MEDICAL_TRANSCRIPT_RESULT_STREAM as _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM,
    POINTS_OF_INTEREST as _SCHEMA_POINTS_OF_INTEREST,
    POST_CALL_ANALYTICS_SETTINGS as _SCHEMA_POST_CALL_ANALYTICS_SETTINGS,
    RESOURCE_NOT_FOUND_EXCEPTION as _SCHEMA_RESOURCE_NOT_FOUND_EXCEPTION,
    RESULT as _SCHEMA_RESULT,
    SERVICE_UNAVAILABLE_EXCEPTION as _SCHEMA_SERVICE_UNAVAILABLE_EXCEPTION,
    START_CALL_ANALYTICS_STREAM_TRANSCRIPTION as _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION,
    START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT as _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT,
    START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT as _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT,
    START_MEDICAL_SCRIBE_STREAM as _SCHEMA_START_MEDICAL_SCRIBE_STREAM,
    START_MEDICAL_SCRIBE_STREAM_INPUT as _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT,
    START_MEDICAL_SCRIBE_STREAM_OUTPUT as _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT,
    START_MEDICAL_STREAM_TRANSCRIPTION as _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION,
    START_MEDICAL_STREAM_TRANSCRIPTION_INPUT as _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT,
    START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT as _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT,
    START_STREAM_TRANSCRIPTION as _SCHEMA_START_STREAM_TRANSCRIPTION,
    START_STREAM_TRANSCRIPTION_INPUT as _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT,
    START_STREAM_TRANSCRIPTION_OUTPUT as _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT,
    TIMESTAMP_RANGE as _SCHEMA_TIMESTAMP_RANGE,
    TRANSCRIPT as _SCHEMA_TRANSCRIPT,
    TRANSCRIPT_EVENT as _SCHEMA_TRANSCRIPT_EVENT,
    TRANSCRIPT_RESULT_STREAM as _SCHEMA_TRANSCRIPT_RESULT_STREAM,
    UTTERANCE_EVENT as _SCHEMA_UTTERANCE_EVENT,
)


logger = logging.getLogger(__name__)


class ServiceError(ModeledError):
    """Base error for all errors in the service.

    Some exceptions do not extend from this class, including
    synthetic, implicit, and shared exception types.
    """


@dataclass(kw_only=True)
class Entity:
    """
    Contains entities identified as personally identifiable information (PII) in
    your transcription output, along with various associated attributes. Examples
    include category, confidence score, type, stability score, and start and end
    times.

    """

    start_time: float = 0
    """
    The start time of the utterance that was identified as PII in seconds, with
    millisecond precision (e.g., 1.056)
    """
    end_time: float = 0
    """
    The end time of the utterance that was identified as PII in seconds, with
    millisecond precision (e.g., 1.056)
    """
    category: str | None = None
    """
    The category of information identified. The only category is ``PII``.
    """
    type: str | None = None
    """
    The type of PII identified. For example, ``NAME`` or ``CREDIT_DEBIT_NUMBER``.
    """
    content: str | None = None
    """
    The word or words identified as PII.
    """
    confidence: float | None = None
    """
    The confidence score associated with the identified PII entity in your audio.

    Confidence scores are values between 0 and 1. A larger value indicates a higher
    probability that the identified entity correctly matches the entity spoken in
    your media.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ENTITY, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_double(_SCHEMA_ENTITY.members["StartTime"], self.start_time)
        serializer.write_double(_SCHEMA_ENTITY.members["EndTime"], self.end_time)
        if self.category is not None:
            serializer.write_string(_SCHEMA_ENTITY.members["Category"], self.category)

        if self.type is not None:
            serializer.write_string(_SCHEMA_ENTITY.members["Type"], self.type)

        if self.content is not None:
            serializer.write_string(_SCHEMA_ENTITY.members["Content"], self.content)

        if self.confidence is not None:
            serializer.write_double(
                _SCHEMA_ENTITY.members["Confidence"], self.confidence
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["start_time"] = de.read_double(
                        _SCHEMA_ENTITY.members["StartTime"]
                    )

                case 1:
                    kwargs["end_time"] = de.read_double(
                        _SCHEMA_ENTITY.members["EndTime"]
                    )

                case 2:
                    kwargs["category"] = de.read_string(
                        _SCHEMA_ENTITY.members["Category"]
                    )

                case 3:
                    kwargs["type"] = de.read_string(_SCHEMA_ENTITY.members["Type"])

                case 4:
                    kwargs["content"] = de.read_string(
                        _SCHEMA_ENTITY.members["Content"]
                    )

                case 5:
                    kwargs["confidence"] = de.read_double(
                        _SCHEMA_ENTITY.members["Confidence"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ENTITY, consumer=_consumer)
        return kwargs


def _serialize_entity_list(
    serializer: ShapeSerializer, schema: Schema, value: list[Entity]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_entity_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[Entity]:
    result: list[Entity] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(Entity.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


class ItemType(StrEnum):
    PRONUNCIATION = "pronunciation"
    PUNCTUATION = "punctuation"


@dataclass(kw_only=True)
class Item:
    """
    A word, phrase, or punctuation mark in your transcription output, along with
    various associated attributes, such as confidence score, type, and start and end
    times.

    """

    start_time: float = 0
    """
    The start time of the transcribed item in seconds, with millisecond precision
    (e.g., 1.056)
    """
    end_time: float = 0
    """
    The end time of the transcribed item in seconds, with millisecond precision
    (e.g., 1.056)
    """
    type: str | None = None
    """
    The type of item identified. Options are: ``PRONUNCIATION`` (spoken words) and
    ``PUNCTUATION``.
    """
    content: str | None = None
    """
    The word or punctuation that was transcribed.
    """
    vocabulary_filter_match: bool = False
    """
    Indicates whether the specified item matches a word in the vocabulary filter
    included in your request. If ``true``, there is a vocabulary filter match.
    """
    speaker: str | None = None
    """
    If speaker partitioning is enabled, ``Speaker`` labels the speaker of the
    specified item.
    """
    confidence: float | None = None
    """
    The confidence score associated with a word or phrase in your transcript.

    Confidence scores are values between 0 and 1. A larger value indicates a higher
    probability that the identified item correctly matches the item spoken in your
    media.
    """
    stable: bool | None = None
    """
    If partial result stabilization is enabled, ``Stable`` indicates whether the
    specified item is stable (``true``) or if it may change when the segment is
    complete (``false``).
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ITEM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_double(_SCHEMA_ITEM.members["StartTime"], self.start_time)
        serializer.write_double(_SCHEMA_ITEM.members["EndTime"], self.end_time)
        if self.type is not None:
            serializer.write_string(_SCHEMA_ITEM.members["Type"], self.type)

        if self.content is not None:
            serializer.write_string(_SCHEMA_ITEM.members["Content"], self.content)

        serializer.write_boolean(
            _SCHEMA_ITEM.members["VocabularyFilterMatch"], self.vocabulary_filter_match
        )
        if self.speaker is not None:
            serializer.write_string(_SCHEMA_ITEM.members["Speaker"], self.speaker)

        if self.confidence is not None:
            serializer.write_double(_SCHEMA_ITEM.members["Confidence"], self.confidence)

        if self.stable is not None:
            serializer.write_boolean(_SCHEMA_ITEM.members["Stable"], self.stable)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["start_time"] = de.read_double(
                        _SCHEMA_ITEM.members["StartTime"]
                    )

                case 1:
                    kwargs["end_time"] = de.read_double(_SCHEMA_ITEM.members["EndTime"])

                case 2:
                    kwargs["type"] = de.read_string(_SCHEMA_ITEM.members["Type"])

                case 3:
                    kwargs["content"] = de.read_string(_SCHEMA_ITEM.members["Content"])

                case 4:
                    kwargs["vocabulary_filter_match"] = de.read_boolean(
                        _SCHEMA_ITEM.members["VocabularyFilterMatch"]
                    )

                case 5:
                    kwargs["speaker"] = de.read_string(_SCHEMA_ITEM.members["Speaker"])

                case 6:
                    kwargs["confidence"] = de.read_double(
                        _SCHEMA_ITEM.members["Confidence"]
                    )

                case 7:
                    kwargs["stable"] = de.read_boolean(_SCHEMA_ITEM.members["Stable"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ITEM, consumer=_consumer)
        return kwargs


def _serialize_item_list(
    serializer: ShapeSerializer, schema: Schema, value: list[Item]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_item_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[Item]:
    result: list[Item] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(Item.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class Alternative:
    """
    A list of possible alternative transcriptions for the input audio. Each
    alternative may contain one or more of ``Items``, ``Entities``, or
    ``Transcript``.

    """

    transcript: str | None = None
    """
    Contains transcribed text.
    """
    items: list[Item] | None = None
    """
    Contains words, phrases, or punctuation marks in your transcription output.
    """
    entities: list[Entity] | None = None
    """
    Contains entities identified as personally identifiable information (PII) in
    your transcription output.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ALTERNATIVE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.transcript is not None:
            serializer.write_string(
                _SCHEMA_ALTERNATIVE.members["Transcript"], self.transcript
            )

        if self.items is not None:
            _serialize_item_list(
                serializer, _SCHEMA_ALTERNATIVE.members["Items"], self.items
            )

        if self.entities is not None:
            _serialize_entity_list(
                serializer, _SCHEMA_ALTERNATIVE.members["Entities"], self.entities
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["transcript"] = de.read_string(
                        _SCHEMA_ALTERNATIVE.members["Transcript"]
                    )

                case 1:
                    kwargs["items"] = _deserialize_item_list(
                        de, _SCHEMA_ALTERNATIVE.members["Items"]
                    )

                case 2:
                    kwargs["entities"] = _deserialize_entity_list(
                        de, _SCHEMA_ALTERNATIVE.members["Entities"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ALTERNATIVE, consumer=_consumer)
        return kwargs


def _serialize_alternative_list(
    serializer: ShapeSerializer, schema: Schema, value: list[Alternative]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_alternative_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[Alternative]:
    result: list[Alternative] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(Alternative.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class AudioEvent:
    """
    A wrapper for your audio chunks. Your audio stream consists of one or more audio
    events, which consist of one or more audio chunks.

    For more information, see ``Event stream encoding <https://docs.aws.amazon.com/transcribe/latest/dg/event-stream.html>``_
    .

    """

    audio_chunk: bytes | None = None
    """
     An audio blob containing the next segment of audio from your application, with a
     maximum duration of 1 second. The maximum size in bytes varies based on audio
     properties.

    Find recommended size in `Transcribing streaming best practices <https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#best-practices>`_
    .

     Size calculation: ``Duration (s) * Sample Rate (Hz) * Number of Channels * 2
     (Bytes per Sample)``

     For example, a 1-second chunk of 16 kHz, 2-channel, 16-bit audio would be ``1 *
     16000 * 2 * 2 = 64000 bytes``.

     For 8 kHz, 1-channel, 16-bit audio, a 1-second chunk would be ``1 * 8000 * 1 * 2
     = 16000 bytes``.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_AUDIO_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.audio_chunk is not None:
            serializer.write_blob(
                _SCHEMA_AUDIO_EVENT.members["AudioChunk"], self.audio_chunk
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["audio_chunk"] = de.read_blob(
                        _SCHEMA_AUDIO_EVENT.members["AudioChunk"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_AUDIO_EVENT, consumer=_consumer)
        return kwargs


class ParticipantRole(StrEnum):
    AGENT = "AGENT"
    CUSTOMER = "CUSTOMER"


@dataclass(kw_only=True)
class ChannelDefinition:
    """
    Makes it possible to specify which speaker is on which audio channel. For
    example, if your agent is the first participant to speak, you would set
    ``ChannelId`` to ``0`` (to indicate the first channel) and ``ParticipantRole``
    to ``AGENT`` (to indicate that it's the agent speaking).

    """

    participant_role: str
    """
    Specify the speaker you want to define. Omitting this parameter is equivalent to
    specifying both participants.
    """

    channel_id: int = 0
    """
    Specify the audio channel you want to define.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CHANNEL_DEFINITION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_integer(
            _SCHEMA_CHANNEL_DEFINITION.members["ChannelId"], self.channel_id
        )
        serializer.write_string(
            _SCHEMA_CHANNEL_DEFINITION.members["ParticipantRole"], self.participant_role
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["channel_id"] = de.read_integer(
                        _SCHEMA_CHANNEL_DEFINITION.members["ChannelId"]
                    )

                case 1:
                    kwargs["participant_role"] = de.read_string(
                        _SCHEMA_CHANNEL_DEFINITION.members["ParticipantRole"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CHANNEL_DEFINITION, consumer=_consumer)
        return kwargs


def _serialize_channel_definitions(
    serializer: ShapeSerializer, schema: Schema, value: list[ChannelDefinition]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_channel_definitions(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[ChannelDefinition]:
    result: list[ChannelDefinition] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(ChannelDefinition.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


class ContentRedactionOutput(StrEnum):
    REDACTED = "redacted"
    REDACTED_AND_UNREDACTED = "redacted_and_unredacted"


@dataclass(kw_only=True)
class PostCallAnalyticsSettings:
    """
    Allows you to specify additional settings for your Call Analytics post-call
    request, including output locations for your redacted transcript, which IAM role
    to use, and which encryption key to use.

    ``DataAccessRoleArn`` and ``OutputLocation`` are required fields.

    ``PostCallAnalyticsSettings`` provides you with the same insights as a Call Analytics post-call transcription. Refer to ``Post-call analytics <https://docs.aws.amazon.com/transcribe/latest/dg/tca-post-call.html>``_
    for more information on this feature.

    """

    output_location: str
    """
    The Amazon S3 location where you want your Call Analytics post-call
    transcription output stored. You can use any of the following formats to specify
    the output location:

    * s3://DOC-EXAMPLE-BUCKET

    * s3://DOC-EXAMPLE-BUCKET/my-output-folder/

    * s3://DOC-EXAMPLE-BUCKET/my-output-folder/my-call-analytics-job.json
    """

    data_access_role_arn: str
    """
    The Amazon Resource Name (ARN) of an IAM role that has permissions to access the
    Amazon S3 bucket that contains your input files. If the role that you specify
    doesn’t have the appropriate permissions to access the specified Amazon S3
    location, your request fails.

    IAM role ARNs have the format
    ``arn:partition:iam::account:role/role-name-with-path``. For example: ``arn:aws:iam::111122223333:role/Admin``. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns>`_
    .
    """

    content_redaction_output: str | None = None
    """
    Specify whether you want only a redacted transcript or both a redacted and an
    unredacted transcript. If you choose redacted and unredacted, two JSON files are
    generated and stored in the Amazon S3 output location you specify.

    Note that to include ``ContentRedactionOutput`` in your request, you must enable
    content redaction (``ContentRedactionType``).
    """
    output_encryption_kms_key_id: str | None = None
    """
    The KMS key you want to use to encrypt your Call Analytics post-call output.

    If using a key located in the **current** Amazon Web Services account, you can
    specify your KMS key in one of four ways:

    * Use the KMS key ID itself. For example,
      ``1234abcd-12ab-34cd-56ef-1234567890ab``.

    * Use an alias for the KMS key ID. For example, ``alias/ExampleAlias``.

    * Use the Amazon Resource Name (ARN) for the KMS key ID. For example,
      ``arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab``.

    * Use the ARN for the KMS key alias. For example,
      ``arn:aws:kms:region:account-ID:alias/ExampleAlias``.

    If using a key located in a **different** Amazon Web Services account than the
    current Amazon Web Services account, you can specify your KMS key in one of two
    ways:

    * Use the ARN for the KMS key ID. For example,
      ``arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab``.

    * Use the ARN for the KMS key alias. For example,
      ``arn:aws:kms:region:account-ID:alias/ExampleAlias``.

    Note that the role making the request must have permission to use the specified
    KMS key.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_POST_CALL_ANALYTICS_SETTINGS, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(
            _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members["OutputLocation"],
            self.output_location,
        )
        serializer.write_string(
            _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members["DataAccessRoleArn"],
            self.data_access_role_arn,
        )
        if self.content_redaction_output is not None:
            serializer.write_string(
                _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members["ContentRedactionOutput"],
                self.content_redaction_output,
            )

        if self.output_encryption_kms_key_id is not None:
            serializer.write_string(
                _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members[
                    "OutputEncryptionKMSKeyId"
                ],
                self.output_encryption_kms_key_id,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["output_location"] = de.read_string(
                        _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members["OutputLocation"]
                    )

                case 1:
                    kwargs["data_access_role_arn"] = de.read_string(
                        _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members[
                            "DataAccessRoleArn"
                        ]
                    )

                case 2:
                    kwargs["content_redaction_output"] = de.read_string(
                        _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members[
                            "ContentRedactionOutput"
                        ]
                    )

                case 3:
                    kwargs["output_encryption_kms_key_id"] = de.read_string(
                        _SCHEMA_POST_CALL_ANALYTICS_SETTINGS.members[
                            "OutputEncryptionKMSKeyId"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_POST_CALL_ANALYTICS_SETTINGS, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class ConfigurationEvent:
    """
    Allows you to set audio channel definitions and post-call analytics settings.

    """

    channel_definitions: list[ChannelDefinition] | None = None
    """
    Indicates which speaker is on which audio channel.
    """
    post_call_analytics_settings: PostCallAnalyticsSettings | None = None
    """
    Provides additional optional settings for your Call Analytics post-call request,
    including encryption and output locations for your redacted transcript.

    ``PostCallAnalyticsSettings`` provides you with the same insights as a Call Analytics post-call transcription. Refer to `Post-call analytics <https://docs.aws.amazon.com/transcribe/latest/dg/tca-post-call.html>`_
    for more information on this feature.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONFIGURATION_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.channel_definitions is not None:
            _serialize_channel_definitions(
                serializer,
                _SCHEMA_CONFIGURATION_EVENT.members["ChannelDefinitions"],
                self.channel_definitions,
            )

        if self.post_call_analytics_settings is not None:
            serializer.write_struct(
                _SCHEMA_CONFIGURATION_EVENT.members["PostCallAnalyticsSettings"],
                self.post_call_analytics_settings,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["channel_definitions"] = _deserialize_channel_definitions(
                        de, _SCHEMA_CONFIGURATION_EVENT.members["ChannelDefinitions"]
                    )

                case 1:
                    kwargs["post_call_analytics_settings"] = (
                        PostCallAnalyticsSettings.deserialize(de)
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONFIGURATION_EVENT, consumer=_consumer)
        return kwargs


@dataclass
class AudioStreamAudioEvent:
    """
    A blob of audio from your application. Your audio stream consists of one or more
    audio events.

    For more information, see `Event stream encoding <https://docs.aws.amazon.com/transcribe/latest/dg/event-stream.html>`_
    .

    """

    value: AudioEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_AUDIO_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_AUDIO_STREAM.members["AudioEvent"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=AudioEvent.deserialize(deserializer))


@dataclass
class AudioStreamConfigurationEvent:
    """
    Contains audio channel definitions and post-call analytics settings.

    """

    value: ConfigurationEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_AUDIO_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_AUDIO_STREAM.members["ConfigurationEvent"], self.value
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ConfigurationEvent.deserialize(deserializer))


@dataclass
class AudioStreamUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()


AudioStream = Union[
    AudioStreamAudioEvent | AudioStreamConfigurationEvent | AudioStreamUnknown
]

"""
An encoded stream of audio blobs. Audio streams are encoded as either HTTP/2 or
WebSocket data frames.

For more information, see `Transcribing streaming audio <https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html>`_
.

"""


class _AudioStreamDeserializer:
    _result: AudioStream | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> AudioStream:
        self._result = None
        deserializer.read_struct(_SCHEMA_AUDIO_STREAM, self._consumer)

        if self._result is None:
            raise SerializationError(
                "Unions must have exactly one value, but found none."
            )

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(AudioStreamAudioEvent.deserialize(de))

            case 1:
                self._set_result(AudioStreamConfigurationEvent.deserialize(de))

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: AudioStream) -> None:
        if self._result is not None:
            raise SerializationError(
                "Unions must have exactly one value, but found more than one."
            )
        self._result = value


@dataclass(kw_only=True)
class BadRequestException(ServiceError):
    """
    One or more arguments to the ``StartStreamTranscription``,
    ``StartMedicalStreamTranscription``, or
    ``StartCallAnalyticsStreamTranscription`` operation was not valid. For example,
    ``MediaEncoding`` or ``LanguageCode`` used unsupported values. Check the
    specified parameters and try your request again.

    """

    fault: Literal["client", "server"] | None = "client"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_BAD_REQUEST_EXCEPTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.message is not None:
            serializer.write_string(
                _SCHEMA_BAD_REQUEST_EXCEPTION.members["Message"], self.message
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["message"] = de.read_string(
                        _SCHEMA_BAD_REQUEST_EXCEPTION.members["Message"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_BAD_REQUEST_EXCEPTION, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class CallAnalyticsEntity:
    """
    Contains entities identified as personally identifiable information (PII) in
    your transcription output, along with various associated attributes. Examples
    include category, confidence score, content, type, and start and end times.

    """

    begin_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the start
    of the identified entity.
    """
    end_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the end of
    the identified entity.
    """
    category: str | None = None
    """
    The category of information identified. For example, ``PII``.
    """
    type: str | None = None
    """
    The type of PII identified. For example, ``NAME`` or ``CREDIT_DEBIT_NUMBER``.
    """
    content: str | None = None
    """
    The word or words that represent the identified entity.
    """
    confidence: float | None = None
    """
    The confidence score associated with the identification of an entity in your
    transcript.

    Confidence scores are values between 0 and 1. A larger value indicates a higher
    probability that the identified entity correctly matches the entity spoken in
    your media.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_ENTITY, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.begin_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_CALL_ANALYTICS_ENTITY.members["BeginOffsetMillis"],
                self.begin_offset_millis,
            )

        if self.end_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_CALL_ANALYTICS_ENTITY.members["EndOffsetMillis"],
                self.end_offset_millis,
            )

        if self.category is not None:
            serializer.write_string(
                _SCHEMA_CALL_ANALYTICS_ENTITY.members["Category"], self.category
            )

        if self.type is not None:
            serializer.write_string(
                _SCHEMA_CALL_ANALYTICS_ENTITY.members["Type"], self.type
            )

        if self.content is not None:
            serializer.write_string(
                _SCHEMA_CALL_ANALYTICS_ENTITY.members["Content"], self.content
            )

        if self.confidence is not None:
            serializer.write_double(
                _SCHEMA_CALL_ANALYTICS_ENTITY.members["Confidence"], self.confidence
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["begin_offset_millis"] = de.read_long(
                        _SCHEMA_CALL_ANALYTICS_ENTITY.members["BeginOffsetMillis"]
                    )

                case 1:
                    kwargs["end_offset_millis"] = de.read_long(
                        _SCHEMA_CALL_ANALYTICS_ENTITY.members["EndOffsetMillis"]
                    )

                case 2:
                    kwargs["category"] = de.read_string(
                        _SCHEMA_CALL_ANALYTICS_ENTITY.members["Category"]
                    )

                case 3:
                    kwargs["type"] = de.read_string(
                        _SCHEMA_CALL_ANALYTICS_ENTITY.members["Type"]
                    )

                case 4:
                    kwargs["content"] = de.read_string(
                        _SCHEMA_CALL_ANALYTICS_ENTITY.members["Content"]
                    )

                case 5:
                    kwargs["confidence"] = de.read_double(
                        _SCHEMA_CALL_ANALYTICS_ENTITY.members["Confidence"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CALL_ANALYTICS_ENTITY, consumer=_consumer)
        return kwargs


def _serialize_call_analytics_entity_list(
    serializer: ShapeSerializer, schema: Schema, value: list[CallAnalyticsEntity]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_call_analytics_entity_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[CallAnalyticsEntity]:
    result: list[CallAnalyticsEntity] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(CallAnalyticsEntity.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class CallAnalyticsItem:
    """
    A word, phrase, or punctuation mark in your Call Analytics transcription output,
    along with various associated attributes, such as confidence score, type, and
    start and end times.

    """

    begin_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the start
    of the identified item.
    """
    end_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the end of
    the identified item.
    """
    type: str | None = None
    """
    The type of item identified. Options are: ``PRONUNCIATION`` (spoken words) and
    ``PUNCTUATION``.
    """
    content: str | None = None
    """
    The word or punctuation that was transcribed.
    """
    confidence: float | None = None
    """
    The confidence score associated with a word or phrase in your transcript.

    Confidence scores are values between 0 and 1. A larger value indicates a higher
    probability that the identified item correctly matches the item spoken in your
    media.
    """
    vocabulary_filter_match: bool = False
    """
    Indicates whether the specified item matches a word in the vocabulary filter
    included in your Call Analytics request. If ``true``, there is a vocabulary
    filter match.
    """
    stable: bool | None = None
    """
    If partial result stabilization is enabled, ``Stable`` indicates whether the
    specified item is stable (``true``) or if it may change when the segment is
    complete (``false``).
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_ITEM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.begin_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_CALL_ANALYTICS_ITEM.members["BeginOffsetMillis"],
                self.begin_offset_millis,
            )

        if self.end_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_CALL_ANALYTICS_ITEM.members["EndOffsetMillis"],
                self.end_offset_millis,
            )

        if self.type is not None:
            serializer.write_string(
                _SCHEMA_CALL_ANALYTICS_ITEM.members["Type"], self.type
            )

        if self.content is not None:
            serializer.write_string(
                _SCHEMA_CALL_ANALYTICS_ITEM.members["Content"], self.content
            )

        if self.confidence is not None:
            serializer.write_double(
                _SCHEMA_CALL_ANALYTICS_ITEM.members["Confidence"], self.confidence
            )

        serializer.write_boolean(
            _SCHEMA_CALL_ANALYTICS_ITEM.members["VocabularyFilterMatch"],
            self.vocabulary_filter_match,
        )
        if self.stable is not None:
            serializer.write_boolean(
                _SCHEMA_CALL_ANALYTICS_ITEM.members["Stable"], self.stable
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["begin_offset_millis"] = de.read_long(
                        _SCHEMA_CALL_ANALYTICS_ITEM.members["BeginOffsetMillis"]
                    )

                case 1:
                    kwargs["end_offset_millis"] = de.read_long(
                        _SCHEMA_CALL_ANALYTICS_ITEM.members["EndOffsetMillis"]
                    )

                case 2:
                    kwargs["type"] = de.read_string(
                        _SCHEMA_CALL_ANALYTICS_ITEM.members["Type"]
                    )

                case 3:
                    kwargs["content"] = de.read_string(
                        _SCHEMA_CALL_ANALYTICS_ITEM.members["Content"]
                    )

                case 4:
                    kwargs["confidence"] = de.read_double(
                        _SCHEMA_CALL_ANALYTICS_ITEM.members["Confidence"]
                    )

                case 5:
                    kwargs["vocabulary_filter_match"] = de.read_boolean(
                        _SCHEMA_CALL_ANALYTICS_ITEM.members["VocabularyFilterMatch"]
                    )

                case 6:
                    kwargs["stable"] = de.read_boolean(
                        _SCHEMA_CALL_ANALYTICS_ITEM.members["Stable"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CALL_ANALYTICS_ITEM, consumer=_consumer)
        return kwargs


def _serialize_call_analytics_item_list(
    serializer: ShapeSerializer, schema: Schema, value: list[CallAnalyticsItem]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_call_analytics_item_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[CallAnalyticsItem]:
    result: list[CallAnalyticsItem] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(CallAnalyticsItem.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


class CallAnalyticsLanguageCode(StrEnum):
    EN_US = "en-US"
    EN_GB = "en-GB"
    ES_US = "es-US"
    FR_CA = "fr-CA"
    FR_FR = "fr-FR"
    EN_AU = "en-AU"
    IT_IT = "it-IT"
    DE_DE = "de-DE"
    PT_BR = "pt-BR"


@dataclass(kw_only=True)
class CallAnalyticsLanguageWithScore:
    """
    The language code that represents the language identified in your audio,
    including the associated confidence score.

    """

    language_code: str | None = None
    """
    The language code of the identified language.
    """
    score: float = 0
    """
    The confidence score associated with the identified language code. Confidence
    scores are values between zero and one; larger values indicate a higher
    confidence in the identified language.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_LANGUAGE_WITH_SCORE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_CALL_ANALYTICS_LANGUAGE_WITH_SCORE.members["LanguageCode"],
                self.language_code,
            )

        serializer.write_double(
            _SCHEMA_CALL_ANALYTICS_LANGUAGE_WITH_SCORE.members["Score"], self.score
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_CALL_ANALYTICS_LANGUAGE_WITH_SCORE.members[
                            "LanguageCode"
                        ]
                    )

                case 1:
                    kwargs["score"] = de.read_double(
                        _SCHEMA_CALL_ANALYTICS_LANGUAGE_WITH_SCORE.members["Score"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_CALL_ANALYTICS_LANGUAGE_WITH_SCORE, consumer=_consumer
        )
        return kwargs


def _serialize_call_analytics_language_identification(
    serializer: ShapeSerializer,
    schema: Schema,
    value: list[CallAnalyticsLanguageWithScore],
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_call_analytics_language_identification(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[CallAnalyticsLanguageWithScore]:
    result: list[CallAnalyticsLanguageWithScore] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(CallAnalyticsLanguageWithScore.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


def _serialize_string_list(
    serializer: ShapeSerializer, schema: Schema, value: list[str]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)


def _deserialize_string_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class TimestampRange:
    """
    Contains the timestamp range (start time through end time) of a matched
    category.

    """

    begin_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the start
    of the category match.
    """
    end_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the end of
    the category match.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TIMESTAMP_RANGE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.begin_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_TIMESTAMP_RANGE.members["BeginOffsetMillis"],
                self.begin_offset_millis,
            )

        if self.end_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_TIMESTAMP_RANGE.members["EndOffsetMillis"],
                self.end_offset_millis,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["begin_offset_millis"] = de.read_long(
                        _SCHEMA_TIMESTAMP_RANGE.members["BeginOffsetMillis"]
                    )

                case 1:
                    kwargs["end_offset_millis"] = de.read_long(
                        _SCHEMA_TIMESTAMP_RANGE.members["EndOffsetMillis"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_TIMESTAMP_RANGE, consumer=_consumer)
        return kwargs


def _serialize_timestamp_ranges(
    serializer: ShapeSerializer, schema: Schema, value: list[TimestampRange]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_timestamp_ranges(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[TimestampRange]:
    result: list[TimestampRange] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(TimestampRange.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class PointsOfInterest:
    """
    Contains the timestamps of matched categories.

    """

    timestamp_ranges: list[TimestampRange] | None = None
    """
    Contains the timestamp ranges (start time through end time) of matched
    categories and rules.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_POINTS_OF_INTEREST, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.timestamp_ranges is not None:
            _serialize_timestamp_ranges(
                serializer,
                _SCHEMA_POINTS_OF_INTEREST.members["TimestampRanges"],
                self.timestamp_ranges,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["timestamp_ranges"] = _deserialize_timestamp_ranges(
                        de, _SCHEMA_POINTS_OF_INTEREST.members["TimestampRanges"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_POINTS_OF_INTEREST, consumer=_consumer)
        return kwargs


def _serialize_matched_category_details(
    serializer: ShapeSerializer, schema: Schema, value: dict[str, PointsOfInterest]
) -> None:
    with serializer.begin_map(schema, len(value)) as m:
        value_schema = schema.members["value"]
        for k, v in value.items():
            m.entry(k, lambda vs: vs.write_struct(value_schema, v))


def _deserialize_matched_category_details(
    deserializer: ShapeDeserializer, schema: Schema
) -> dict[str, PointsOfInterest]:
    result: dict[str, PointsOfInterest] = {}
    value_schema = schema.members["value"]

    def _read_value(k: str, d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result[k] = PointsOfInterest.deserialize(d)

    deserializer.read_map(schema, _read_value)
    return result


@dataclass(kw_only=True)
class CategoryEvent:
    """
    Provides information on any ``TranscriptFilterType`` categories that matched
    your transcription output. Matches are identified for each segment upon
    completion of that segment.

    """

    matched_categories: list[str] | None = None
    """
    Lists the categories that were matched in your audio segment.
    """
    matched_details: dict[str, PointsOfInterest] | None = None
    """
    Contains information about the matched categories, including category names and
    timestamps.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CATEGORY_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.matched_categories is not None:
            _serialize_string_list(
                serializer,
                _SCHEMA_CATEGORY_EVENT.members["MatchedCategories"],
                self.matched_categories,
            )

        if self.matched_details is not None:
            _serialize_matched_category_details(
                serializer,
                _SCHEMA_CATEGORY_EVENT.members["MatchedDetails"],
                self.matched_details,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["matched_categories"] = _deserialize_string_list(
                        de, _SCHEMA_CATEGORY_EVENT.members["MatchedCategories"]
                    )

                case 1:
                    kwargs["matched_details"] = _deserialize_matched_category_details(
                        de, _SCHEMA_CATEGORY_EVENT.members["MatchedDetails"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CATEGORY_EVENT, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class ConflictException(ServiceError):
    """
    A new stream started with the same session ID. The current stream has been
    terminated.

    """

    fault: Literal["client", "server"] | None = "client"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONFLICT_EXCEPTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.message is not None:
            serializer.write_string(
                _SCHEMA_CONFLICT_EXCEPTION.members["Message"], self.message
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["message"] = de.read_string(
                        _SCHEMA_CONFLICT_EXCEPTION.members["Message"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONFLICT_EXCEPTION, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class InternalFailureException(ServiceError):
    """
    A problem occurred while processing the audio. Amazon Transcribe terminated
    processing.

    """

    fault: Literal["client", "server"] | None = "server"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_INTERNAL_FAILURE_EXCEPTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.message is not None:
            serializer.write_string(
                _SCHEMA_INTERNAL_FAILURE_EXCEPTION.members["Message"], self.message
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["message"] = de.read_string(
                        _SCHEMA_INTERNAL_FAILURE_EXCEPTION.members["Message"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_INTERNAL_FAILURE_EXCEPTION, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class LimitExceededException(ServiceError):
    """
    Your client has exceeded one of the Amazon Transcribe limits. This is typically
    the audio length limit. Break your audio stream into smaller chunks and try your
    request again.

    """

    fault: Literal["client", "server"] | None = "client"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIMIT_EXCEEDED_EXCEPTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.message is not None:
            serializer.write_string(
                _SCHEMA_LIMIT_EXCEEDED_EXCEPTION.members["Message"], self.message
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["message"] = de.read_string(
                        _SCHEMA_LIMIT_EXCEEDED_EXCEPTION.members["Message"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIMIT_EXCEEDED_EXCEPTION, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class ServiceUnavailableException(ServiceError):
    """
    The service is currently unavailable. Try your request later.

    """

    fault: Literal["client", "server"] | None = "server"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_SERVICE_UNAVAILABLE_EXCEPTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.message is not None:
            serializer.write_string(
                _SCHEMA_SERVICE_UNAVAILABLE_EXCEPTION.members["Message"], self.message
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["message"] = de.read_string(
                        _SCHEMA_SERVICE_UNAVAILABLE_EXCEPTION.members["Message"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_SERVICE_UNAVAILABLE_EXCEPTION, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class CharacterOffsets:
    """
    Provides the location, using character count, in your transcript where a match
    is identified. For example, the location of an issue or a category match within
    a segment.

    """

    begin: int | None = None
    """
    Provides the character count of the first character where a match is identified.
    For example, the first character associated with an issue or a category match in
    a segment transcript.
    """
    end: int | None = None
    """
    Provides the character count of the last character where a match is identified.
    For example, the last character associated with an issue or a category match in
    a segment transcript.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CHARACTER_OFFSETS, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.begin is not None:
            serializer.write_integer(
                _SCHEMA_CHARACTER_OFFSETS.members["Begin"], self.begin
            )

        if self.end is not None:
            serializer.write_integer(_SCHEMA_CHARACTER_OFFSETS.members["End"], self.end)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["begin"] = de.read_integer(
                        _SCHEMA_CHARACTER_OFFSETS.members["Begin"]
                    )

                case 1:
                    kwargs["end"] = de.read_integer(
                        _SCHEMA_CHARACTER_OFFSETS.members["End"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CHARACTER_OFFSETS, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class IssueDetected:
    """
    Lists the issues that were identified in your audio segment.

    """

    character_offsets: CharacterOffsets | None = None
    """
    Provides the timestamps that identify when in an audio segment the specified
    issue occurs.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ISSUE_DETECTED, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.character_offsets is not None:
            serializer.write_struct(
                _SCHEMA_ISSUE_DETECTED.members["CharacterOffsets"],
                self.character_offsets,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["character_offsets"] = CharacterOffsets.deserialize(de)

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ISSUE_DETECTED, consumer=_consumer)
        return kwargs


def _serialize_issues_detected(
    serializer: ShapeSerializer, schema: Schema, value: list[IssueDetected]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_issues_detected(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[IssueDetected]:
    result: list[IssueDetected] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(IssueDetected.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


class Sentiment(StrEnum):
    POSITIVE = "POSITIVE"
    NEGATIVE = "NEGATIVE"
    MIXED = "MIXED"
    NEUTRAL = "NEUTRAL"


@dataclass(kw_only=True)
class UtteranceEvent:
    """
    Contains set of transcription results from one or more audio segments, along
    with additional information about the parameters included in your request. For
    example, channel definitions, partial result stabilization, sentiment, and issue
    detection.

    """

    utterance_id: str | None = None
    """
    The unique identifier that is associated with the specified ``UtteranceEvent``.
    """
    is_partial: bool = False
    """
    Indicates whether the segment in the ``UtteranceEvent`` is complete (``FALSE``)
    or partial (``TRUE``).
    """
    participant_role: str | None = None
    """
    Provides the role of the speaker for each audio channel, either ``CUSTOMER`` or
    ``AGENT``.
    """
    begin_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the start
    of the ``UtteranceEvent``.
    """
    end_offset_millis: int | None = None
    """
    The time, in milliseconds, from the beginning of the audio stream to the start
    of the ``UtteranceEvent``.
    """
    transcript: str | None = None
    """
    Contains transcribed text.
    """
    items: list[CallAnalyticsItem] | None = None
    """
    Contains words, phrases, or punctuation marks that are associated with the
    specified ``UtteranceEvent``.
    """
    entities: list[CallAnalyticsEntity] | None = None
    """
    Contains entities identified as personally identifiable information (PII) in
    your transcription output.
    """
    sentiment: str | None = None
    """
    Provides the sentiment that was detected in the specified segment.
    """
    issues_detected: list[IssueDetected] | None = None
    """
    Provides the issue that was detected in the specified segment.
    """
    language_code: str | None = None
    """
    The language code that represents the language spoken in your audio stream.
    """
    language_identification: list[CallAnalyticsLanguageWithScore] | None = None
    """
    The language code of the dominant language identified in your stream.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UTTERANCE_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.utterance_id is not None:
            serializer.write_string(
                _SCHEMA_UTTERANCE_EVENT.members["UtteranceId"], self.utterance_id
            )

        serializer.write_boolean(
            _SCHEMA_UTTERANCE_EVENT.members["IsPartial"], self.is_partial
        )
        if self.participant_role is not None:
            serializer.write_string(
                _SCHEMA_UTTERANCE_EVENT.members["ParticipantRole"],
                self.participant_role,
            )

        if self.begin_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_UTTERANCE_EVENT.members["BeginOffsetMillis"],
                self.begin_offset_millis,
            )

        if self.end_offset_millis is not None:
            serializer.write_long(
                _SCHEMA_UTTERANCE_EVENT.members["EndOffsetMillis"],
                self.end_offset_millis,
            )

        if self.transcript is not None:
            serializer.write_string(
                _SCHEMA_UTTERANCE_EVENT.members["Transcript"], self.transcript
            )

        if self.items is not None:
            _serialize_call_analytics_item_list(
                serializer, _SCHEMA_UTTERANCE_EVENT.members["Items"], self.items
            )

        if self.entities is not None:
            _serialize_call_analytics_entity_list(
                serializer, _SCHEMA_UTTERANCE_EVENT.members["Entities"], self.entities
            )

        if self.sentiment is not None:
            serializer.write_string(
                _SCHEMA_UTTERANCE_EVENT.members["Sentiment"], self.sentiment
            )

        if self.issues_detected is not None:
            _serialize_issues_detected(
                serializer,
                _SCHEMA_UTTERANCE_EVENT.members["IssuesDetected"],
                self.issues_detected,
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_UTTERANCE_EVENT.members["LanguageCode"], self.language_code
            )

        if self.language_identification is not None:
            _serialize_call_analytics_language_identification(
                serializer,
                _SCHEMA_UTTERANCE_EVENT.members["LanguageIdentification"],
                self.language_identification,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["utterance_id"] = de.read_string(
                        _SCHEMA_UTTERANCE_EVENT.members["UtteranceId"]
                    )

                case 1:
                    kwargs["is_partial"] = de.read_boolean(
                        _SCHEMA_UTTERANCE_EVENT.members["IsPartial"]
                    )

                case 2:
                    kwargs["participant_role"] = de.read_string(
                        _SCHEMA_UTTERANCE_EVENT.members["ParticipantRole"]
                    )

                case 3:
                    kwargs["begin_offset_millis"] = de.read_long(
                        _SCHEMA_UTTERANCE_EVENT.members["BeginOffsetMillis"]
                    )

                case 4:
                    kwargs["end_offset_millis"] = de.read_long(
                        _SCHEMA_UTTERANCE_EVENT.members["EndOffsetMillis"]
                    )

                case 5:
                    kwargs["transcript"] = de.read_string(
                        _SCHEMA_UTTERANCE_EVENT.members["Transcript"]
                    )

                case 6:
                    kwargs["items"] = _deserialize_call_analytics_item_list(
                        de, _SCHEMA_UTTERANCE_EVENT.members["Items"]
                    )

                case 7:
                    kwargs["entities"] = _deserialize_call_analytics_entity_list(
                        de, _SCHEMA_UTTERANCE_EVENT.members["Entities"]
                    )

                case 8:
                    kwargs["sentiment"] = de.read_string(
                        _SCHEMA_UTTERANCE_EVENT.members["Sentiment"]
                    )

                case 9:
                    kwargs["issues_detected"] = _deserialize_issues_detected(
                        de, _SCHEMA_UTTERANCE_EVENT.members["IssuesDetected"]
                    )

                case 10:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_UTTERANCE_EVENT.members["LanguageCode"]
                    )

                case 11:
                    kwargs["language_identification"] = (
                        _deserialize_call_analytics_language_identification(
                            de,
                            _SCHEMA_UTTERANCE_EVENT.members["LanguageIdentification"],
                        )
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UTTERANCE_EVENT, consumer=_consumer)
        return kwargs


@dataclass
class CallAnalyticsTranscriptResultStreamUtteranceEvent:
    """
    Contains set of transcription results from one or more audio segments, along
    with additional information per your request parameters. This can include
    information relating to channel definitions, partial result stabilization,
    sentiment, issue detection, and other transcription-related data.

    """

    value: UtteranceEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM.members["UtteranceEvent"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=UtteranceEvent.deserialize(deserializer))


@dataclass
class CallAnalyticsTranscriptResultStreamCategoryEvent:
    """
    Provides information on matched categories that were used to generate real-time
    supervisor alerts.

    """

    value: CategoryEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM.members["CategoryEvent"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=CategoryEvent.deserialize(deserializer))


@dataclass
class CallAnalyticsTranscriptResultStreamBadRequestException:
    """
    One or more arguments to the ``StartStreamTranscription``,
    ``StartMedicalStreamTranscription``, or
    ``StartCallAnalyticsStreamTranscription`` operation was not valid. For example,
    ``MediaEncoding`` or ``LanguageCode`` used unsupported values. Check the
    specified parameters and try your request again.

    """

    value: BadRequestException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM.members[
                "BadRequestException"
            ],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=BadRequestException.deserialize(deserializer))


@dataclass
class CallAnalyticsTranscriptResultStreamLimitExceededException:
    """
    Your client has exceeded one of the Amazon Transcribe limits. This is typically
    the audio length limit. Break your audio stream into smaller chunks and try your
    request again.

    """

    value: LimitExceededException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM.members[
                "LimitExceededException"
            ],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=LimitExceededException.deserialize(deserializer))


@dataclass
class CallAnalyticsTranscriptResultStreamInternalFailureException:
    """
    A problem occurred while processing the audio. Amazon Transcribe terminated
    processing.

    """

    value: InternalFailureException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM.members[
                "InternalFailureException"
            ],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=InternalFailureException.deserialize(deserializer))


@dataclass
class CallAnalyticsTranscriptResultStreamConflictException:
    """
    A new stream started with the same session ID. The current stream has been
    terminated.

    """

    value: ConflictException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM.members[
                "ConflictException"
            ],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ConflictException.deserialize(deserializer))


@dataclass
class CallAnalyticsTranscriptResultStreamServiceUnavailableException:
    """
    The service is currently unavailable. Try your request later.

    """

    value: ServiceUnavailableException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM.members[
                "ServiceUnavailableException"
            ],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ServiceUnavailableException.deserialize(deserializer))


@dataclass
class CallAnalyticsTranscriptResultStreamUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()


CallAnalyticsTranscriptResultStream = Union[
    CallAnalyticsTranscriptResultStreamUtteranceEvent
    | CallAnalyticsTranscriptResultStreamCategoryEvent
    | CallAnalyticsTranscriptResultStreamBadRequestException
    | CallAnalyticsTranscriptResultStreamLimitExceededException
    | CallAnalyticsTranscriptResultStreamInternalFailureException
    | CallAnalyticsTranscriptResultStreamConflictException
    | CallAnalyticsTranscriptResultStreamServiceUnavailableException
    | CallAnalyticsTranscriptResultStreamUnknown
]

"""
Contains detailed information about your real-time Call Analytics session. These
details are provided in the ``UtteranceEvent`` and ``CategoryEvent`` objects.

"""


class _CallAnalyticsTranscriptResultStreamDeserializer:
    _result: CallAnalyticsTranscriptResultStream | None = None

    def deserialize(
        self, deserializer: ShapeDeserializer
    ) -> CallAnalyticsTranscriptResultStream:
        self._result = None
        deserializer.read_struct(
            _SCHEMA_CALL_ANALYTICS_TRANSCRIPT_RESULT_STREAM, self._consumer
        )

        if self._result is None:
            raise SerializationError(
                "Unions must have exactly one value, but found none."
            )

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(
                    CallAnalyticsTranscriptResultStreamUtteranceEvent.deserialize(de)
                )

            case 1:
                self._set_result(
                    CallAnalyticsTranscriptResultStreamCategoryEvent.deserialize(de)
                )

            case 2:
                self._set_result(
                    CallAnalyticsTranscriptResultStreamBadRequestException.deserialize(
                        de
                    )
                )

            case 3:
                self._set_result(
                    CallAnalyticsTranscriptResultStreamLimitExceededException.deserialize(
                        de
                    )
                )

            case 4:
                self._set_result(
                    CallAnalyticsTranscriptResultStreamInternalFailureException.deserialize(
                        de
                    )
                )

            case 5:
                self._set_result(
                    CallAnalyticsTranscriptResultStreamConflictException.deserialize(de)
                )

            case 6:
                self._set_result(
                    CallAnalyticsTranscriptResultStreamServiceUnavailableException.deserialize(
                        de
                    )
                )

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: CallAnalyticsTranscriptResultStream) -> None:
        if self._result is not None:
            raise SerializationError(
                "Unions must have exactly one value, but found more than one."
            )
        self._result = value


class ClinicalNoteGenerationStatus(StrEnum):
    IN_PROGRESS = "IN_PROGRESS"
    FAILED = "FAILED"
    COMPLETED = "COMPLETED"


@dataclass(kw_only=True)
class ClinicalNoteGenerationResult:
    """
    The details for clinical note generation, including status, and output locations
    for clinical note and aggregated transcript if the analytics completed, or
    failure reason if the analytics failed.

    """

    clinical_note_output_location: str | None = None
    """
    Holds the Amazon S3 URI for the output Clinical Note.
    """
    transcript_output_location: str | None = None
    """
    Holds the Amazon S3 URI for the output Transcript.
    """
    status: str | None = None
    """
    The status of the clinical note generation.

    Possible Values:

    * ``IN_PROGRESS``

    * ``FAILED``

    * ``COMPLETED``

     After audio streaming finishes, and you send a
     ``MedicalScribeSessionControlEvent`` event (with END_OF_SESSION as the Type),
     the status is set to ``IN_PROGRESS``. If the status is ``COMPLETED``, the
     analytics completed successfully, and you can find the results at the locations
     specified in ``ClinicalNoteOutputLocation`` and ``TranscriptOutputLocation``. If
     the status is ``FAILED``, ``FailureReason`` provides details about the failure.
    """
    failure_reason: str | None = None
    """
    If ``ClinicalNoteGenerationResult`` is ``FAILED``, information about why it
    failed.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CLINICAL_NOTE_GENERATION_RESULT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.clinical_note_output_location is not None:
            serializer.write_string(
                _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members[
                    "ClinicalNoteOutputLocation"
                ],
                self.clinical_note_output_location,
            )

        if self.transcript_output_location is not None:
            serializer.write_string(
                _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members[
                    "TranscriptOutputLocation"
                ],
                self.transcript_output_location,
            )

        if self.status is not None:
            serializer.write_string(
                _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members["Status"], self.status
            )

        if self.failure_reason is not None:
            serializer.write_string(
                _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members["FailureReason"],
                self.failure_reason,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["clinical_note_output_location"] = de.read_string(
                        _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members[
                            "ClinicalNoteOutputLocation"
                        ]
                    )

                case 1:
                    kwargs["transcript_output_location"] = de.read_string(
                        _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members[
                            "TranscriptOutputLocation"
                        ]
                    )

                case 2:
                    kwargs["status"] = de.read_string(
                        _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members["Status"]
                    )

                case 3:
                    kwargs["failure_reason"] = de.read_string(
                        _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT.members["FailureReason"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_CLINICAL_NOTE_GENERATION_RESULT, consumer=_consumer
        )
        return kwargs


class MedicalScribeNoteTemplate(StrEnum):
    HISTORY_AND_PHYSICAL = "HISTORY_AND_PHYSICAL"
    GIRPP = "GIRPP"
    DAP = "DAP"
    SIRP = "SIRP"
    BIRP = "BIRP"
    BEHAVIORAL_SOAP = "BEHAVIORAL_SOAP"
    PHYSICAL_SOAP = "PHYSICAL_SOAP"


@dataclass(kw_only=True)
class ClinicalNoteGenerationSettings:
    """
    The output configuration for aggregated transcript and clinical note generation.

    """

    output_bucket_name: str
    """
    The name of the Amazon S3 bucket where you want the output of Amazon Web
    Services HealthScribe post-stream analytics stored. Don't include the ``S3://``
    prefix of the specified bucket.

    HealthScribe outputs transcript and clinical note files under the prefix:
    ``S3://$$output-bucket-name/healthscribe-streaming/session-id/post-stream-analytics/clinical-notes``

    The role ``ResourceAccessRoleArn`` specified in the ``MedicalScribeConfigurationEvent`` must have permission to use the specified location. You can change Amazon S3 permissions using the ` Amazon Web Services Management Console  <https://console.aws.amazon.com/s3>`_.
    See also `Permissions Required for IAM User Roles  <https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user>`_
    .
    """

    note_template: str | None = None
    """
    Specify one of the following templates to use for the clinical note summary. The
    default is ``HISTORY_AND_PHYSICAL``.

    * HISTORY_AND_PHYSICAL: Provides summaries for key sections of the clinical
      documentation. Examples of sections include Chief Complaint, History of Present
      Illness, Review of Systems, Past Medical History, Assessment, and Plan.

    * GIRPP: Provides summaries based on the patients progress toward goals.
      Examples of sections include Goal, Intervention, Response, Progress, and Plan.

    * BIRP: Focuses on the patient's behavioral patterns and responses. Examples of
      sections include Behavior, Intervention, Response, and Plan.

    * SIRP: Emphasizes the situational context of therapy. Examples of sections
      include Situation, Intervention, Response, and Plan.

    * DAP: Provides a simplified format for clinical documentation. Examples of
      sections include Data, Assessment, and Plan.

    * BEHAVIORAL_SOAP: Behavioral health focused documentation format. Examples of
      sections include Subjective, Objective, Assessment, and Plan.

    * PHYSICAL_SOAP: Physical health focused documentation format. Examples of
      sections include Subjective, Objective, Assessment, and Plan.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CLINICAL_NOTE_GENERATION_SETTINGS, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(
            _SCHEMA_CLINICAL_NOTE_GENERATION_SETTINGS.members["OutputBucketName"],
            self.output_bucket_name,
        )
        if self.note_template is not None:
            serializer.write_string(
                _SCHEMA_CLINICAL_NOTE_GENERATION_SETTINGS.members["NoteTemplate"],
                self.note_template,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["output_bucket_name"] = de.read_string(
                        _SCHEMA_CLINICAL_NOTE_GENERATION_SETTINGS.members[
                            "OutputBucketName"
                        ]
                    )

                case 1:
                    kwargs["note_template"] = de.read_string(
                        _SCHEMA_CLINICAL_NOTE_GENERATION_SETTINGS.members[
                            "NoteTemplate"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_CLINICAL_NOTE_GENERATION_SETTINGS, consumer=_consumer
        )
        return kwargs


class ContentIdentificationType(StrEnum):
    PII = "PII"


class ContentRedactionType(StrEnum):
    PII = "PII"


@dataclass(kw_only=True)
class GetMedicalScribeStreamInput:
    session_id: str | None = None
    """
    The identifier of the HealthScribe streaming session you want information about.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_MEDICAL_SCRIBE_STREAM_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_GET_MEDICAL_SCRIBE_STREAM_INPUT.members["SessionId"],
                self.session_id,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_GET_MEDICAL_SCRIBE_STREAM_INPUT.members["SessionId"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_GET_MEDICAL_SCRIBE_STREAM_INPUT, consumer=_consumer
        )
        return kwargs


class MedicalScribeParticipantRole(StrEnum):
    PATIENT = "PATIENT"
    CLINICIAN = "CLINICIAN"


@dataclass(kw_only=True)
class MedicalScribeChannelDefinition:
    """
    Makes it possible to specify which speaker is on which channel. For example, if
    the clinician is the first participant to speak, you would set the ``ChannelId``
    of the first ``ChannelDefinition`` in the list to ``0`` (to indicate the first
    channel) and ``ParticipantRole`` to ``CLINICIAN`` (to indicate that it's the
    clinician speaking). Then you would set the ``ChannelId`` of the second
    ``ChannelDefinition`` in the list to ``1`` (to indicate the second channel) and
    ``ParticipantRole`` to ``PATIENT`` (to indicate that it's the patient speaking).

    If you don't specify a channel definition, HealthScribe will diarize the
    transcription and identify speaker roles for each speaker.

    """

    participant_role: str
    """
    Specify the participant that you want to flag. The allowed options are
    ``CLINICIAN`` and ``PATIENT``.
    """

    channel_id: int = 0
    """
    Specify the audio channel you want to define.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_CHANNEL_DEFINITION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_integer(
            _SCHEMA_MEDICAL_SCRIBE_CHANNEL_DEFINITION.members["ChannelId"],
            self.channel_id,
        )
        serializer.write_string(
            _SCHEMA_MEDICAL_SCRIBE_CHANNEL_DEFINITION.members["ParticipantRole"],
            self.participant_role,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["channel_id"] = de.read_integer(
                        _SCHEMA_MEDICAL_SCRIBE_CHANNEL_DEFINITION.members["ChannelId"]
                    )

                case 1:
                    kwargs["participant_role"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_CHANNEL_DEFINITION.members[
                            "ParticipantRole"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_CHANNEL_DEFINITION, consumer=_consumer
        )
        return kwargs


def _serialize_medical_scribe_channel_definitions(
    serializer: ShapeSerializer,
    schema: Schema,
    value: list[MedicalScribeChannelDefinition],
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_medical_scribe_channel_definitions(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[MedicalScribeChannelDefinition]:
    result: list[MedicalScribeChannelDefinition] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(MedicalScribeChannelDefinition.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


def _serialize_kms_encryption_context_map(
    serializer: ShapeSerializer, schema: Schema, value: dict[str, str]
) -> None:
    with serializer.begin_map(schema, len(value)) as m:
        value_schema = schema.members["value"]
        for k, v in value.items():
            m.entry(k, lambda vs: vs.write_string(value_schema, v))


def _deserialize_kms_encryption_context_map(
    deserializer: ShapeDeserializer, schema: Schema
) -> dict[str, str]:
    result: dict[str, str] = {}
    value_schema = schema.members["value"]

    def _read_value(k: str, d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result[k] = d.read_string(value_schema)

    deserializer.read_map(schema, _read_value)
    return result


@dataclass(kw_only=True)
class MedicalScribeEncryptionSettings:
    """
    Contains encryption related settings to be used for data encryption with Key
    Management Service, including KmsEncryptionContext and KmsKeyId. The KmsKeyId is
    required, while KmsEncryptionContext is optional for additional layer of
    security.

    By default, Amazon Web Services HealthScribe provides encryption at rest to
    protect sensitive customer data using Amazon S3-managed keys. HealthScribe uses
    the KMS key you specify as a second layer of encryption.

    Your ``ResourceAccessRoleArn`` must permission to use your KMS key. For more information, see ``Data Encryption at rest for Amazon Web Services HealthScribe <https://docs.aws.amazon.com/transcribe/latest/dg/health-scribe-encryption.html>``_
    .

    """

    kms_key_id: str
    """
    The ID of the KMS key you want to use for your streaming session. You can
    specify its KMS key ID, key Amazon Resource Name (ARN), alias name, or alias
    ARN. When using an alias name, prefix it with ``"alias/"``. To specify a KMS key
    in a different Amazon Web Services account, you must use the key ARN or alias
    ARN.

    For example:

    * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

    * Key ARN:
      arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

    *  Alias name: alias/ExampleAlias

    *  Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

     To get the key ID and key ARN for a KMS key, use the `ListKeys <https://docs.aws.amazon.com/kms/latest/APIReference/API_ListKeys.html>`_
     or `DescribeKey <https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html>`_
     KMS API operations. To get the alias name and alias ARN, use `ListKeys <https://docs.aws.amazon.com/kms/latest/APIReference/API_ListAliases.html>`_
     API operation.
    """

    kms_encryption_context: dict[str, str] | None = None
    """
    A map of plain text, non-secret key:value pairs, known as encryption context
    pairs, that provide an added layer of security for your data. For more
    information, see `KMSencryption context  <https://docs.aws.amazon.com/transcribe/latest/dg/key-management.html#kms-context>`_
    and `Asymmetric keys in KMS  <https://docs.aws.amazon.com/transcribe/latest/dg/symmetric-asymmetric.html>`_
    .
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_ENCRYPTION_SETTINGS, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.kms_encryption_context is not None:
            _serialize_kms_encryption_context_map(
                serializer,
                _SCHEMA_MEDICAL_SCRIBE_ENCRYPTION_SETTINGS.members[
                    "KmsEncryptionContext"
                ],
                self.kms_encryption_context,
            )

        serializer.write_string(
            _SCHEMA_MEDICAL_SCRIBE_ENCRYPTION_SETTINGS.members["KmsKeyId"],
            self.kms_key_id,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["kms_encryption_context"] = (
                        _deserialize_kms_encryption_context_map(
                            de,
                            _SCHEMA_MEDICAL_SCRIBE_ENCRYPTION_SETTINGS.members[
                                "KmsEncryptionContext"
                            ],
                        )
                    )

                case 1:
                    kwargs["kms_key_id"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_ENCRYPTION_SETTINGS.members["KmsKeyId"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_ENCRYPTION_SETTINGS, consumer=_consumer
        )
        return kwargs


class MedicalScribeLanguageCode(StrEnum):
    EN_US = "en-US"


class MedicalScribeMediaEncoding(StrEnum):
    PCM = "pcm"
    OGG_OPUS = "ogg-opus"
    FLAC = "flac"


@dataclass(kw_only=True)
class MedicalScribePostStreamAnalyticsResult:
    """
    Contains details for the result of post-stream analytics.

    """

    clinical_note_generation_result: ClinicalNoteGenerationResult | None = None
    """
    Provides the Clinical Note Generation result for post-stream analytics.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_RESULT, self
        )

    def serialize_members(self, serializer: ShapeSerializer):
        if self.clinical_note_generation_result is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_RESULT.members[
                    "ClinicalNoteGenerationResult"
                ],
                self.clinical_note_generation_result,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["clinical_note_generation_result"] = (
                        ClinicalNoteGenerationResult.deserialize(de)
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_RESULT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class MedicalScribePostStreamAnalyticsSettings:
    """
    The settings for post-stream analytics.

    """

    clinical_note_generation_settings: ClinicalNoteGenerationSettings
    """
    Specify settings for the post-stream clinical note generation.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS, self
        )

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS.members[
                "ClinicalNoteGenerationSettings"
            ],
            self.clinical_note_generation_settings,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["clinical_note_generation_settings"] = (
                        ClinicalNoteGenerationSettings.deserialize(de)
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_POST_STREAM_ANALYTICS_SETTINGS, consumer=_consumer
        )
        return kwargs


class MedicalScribeStreamStatus(StrEnum):
    IN_PROGRESS = "IN_PROGRESS"
    PAUSED = "PAUSED"
    FAILED = "FAILED"
    COMPLETED = "COMPLETED"


class MedicalScribeVocabularyFilterMethod(StrEnum):
    REMOVE = "remove"
    MASK = "mask"
    TAG = "tag"


@dataclass(kw_only=True)
class MedicalScribeStreamDetails:
    """
    Contains details about a Amazon Web Services HealthScribe streaming session.

    """

    session_id: str | None = None
    """
    The identifier of the HealthScribe streaming session.
    """
    stream_created_at: datetime | None = None
    """
    The date and time when the HealthScribe streaming session was created.
    """
    stream_ended_at: datetime | None = None
    """
    The date and time when the HealthScribe streaming session was ended.
    """
    language_code: str | None = None
    """
    The Language Code of the HealthScribe streaming session.
    """
    media_sample_rate_hertz: int | None = None
    """
    The sample rate (in hertz) of the HealthScribe streaming session.
    """
    media_encoding: str | None = None
    """
    The Media Encoding of the HealthScribe streaming session.
    """
    vocabulary_name: str | None = None
    """
    The vocabulary name of the HealthScribe streaming session.
    """
    vocabulary_filter_name: str | None = None
    """
    The name of the vocabulary filter used for the HealthScribe streaming session .
    """
    vocabulary_filter_method: str | None = None
    """
    The method of the vocabulary filter for the HealthScribe streaming session.
    """
    resource_access_role_arn: str | None = None
    """
    The Amazon Resource Name (ARN) of the role used in the HealthScribe streaming
    session.
    """
    channel_definitions: list[MedicalScribeChannelDefinition] | None = None
    """
    The Channel Definitions of the HealthScribe streaming session.
    """
    encryption_settings: MedicalScribeEncryptionSettings | None = None
    """
    The Encryption Settings of the HealthScribe streaming session.
    """
    stream_status: str | None = None
    """
    The streaming status of the HealthScribe streaming session.

    Possible Values:

    * ``IN_PROGRESS``

    * ``PAUSED``

    * ``FAILED``

    * ``COMPLETED``

    .. note::
        This status is specific to real-time streaming. A ``COMPLETED`` status doesn't
        mean that the post-stream analytics is complete. To get status of an analytics
        result, check the ``Status`` field for the analytics result within the
        ``MedicalScribePostStreamAnalyticsResult``. For example, you can view the status
        of the ``ClinicalNoteGenerationResult``.
    """
    post_stream_analytics_settings: MedicalScribePostStreamAnalyticsSettings | None = (
        None
    )
    """
    The post-stream analytics settings of the HealthScribe streaming session.
    """
    post_stream_analytics_result: MedicalScribePostStreamAnalyticsResult | None = None
    """
    The result of post-stream analytics for the HealthScribe streaming session.
    """
    medical_scribe_context_provided: bool | None = None
    """
    Indicates whether the ``MedicalScribeContext`` object was provided when the
    stream was started.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["SessionId"],
                self.session_id,
            )

        if self.stream_created_at is not None:
            serializer.write_timestamp(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["StreamCreatedAt"],
                self.stream_created_at,
            )

        if self.stream_ended_at is not None:
            serializer.write_timestamp(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["StreamEndedAt"],
                self.stream_ended_at,
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["LanguageCode"],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["MediaSampleRateHertz"],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["MediaEncoding"],
                self.media_encoding,
            )

        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["VocabularyName"],
                self.vocabulary_name,
            )

        if self.vocabulary_filter_name is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["VocabularyFilterName"],
                self.vocabulary_filter_name,
            )

        if self.vocabulary_filter_method is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["VocabularyFilterMethod"],
                self.vocabulary_filter_method,
            )

        if self.resource_access_role_arn is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["ResourceAccessRoleArn"],
                self.resource_access_role_arn,
            )

        if self.channel_definitions is not None:
            _serialize_medical_scribe_channel_definitions(
                serializer,
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["ChannelDefinitions"],
                self.channel_definitions,
            )

        if self.encryption_settings is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["EncryptionSettings"],
                self.encryption_settings,
            )

        if self.stream_status is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["StreamStatus"],
                self.stream_status,
            )

        if self.post_stream_analytics_settings is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                    "PostStreamAnalyticsSettings"
                ],
                self.post_stream_analytics_settings,
            )

        if self.post_stream_analytics_result is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                    "PostStreamAnalyticsResult"
                ],
                self.post_stream_analytics_result,
            )

        if self.medical_scribe_context_provided is not None:
            serializer.write_boolean(
                _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                    "MedicalScribeContextProvided"
                ],
                self.medical_scribe_context_provided,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["SessionId"]
                    )

                case 1:
                    kwargs["stream_created_at"] = de.read_timestamp(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["StreamCreatedAt"]
                    )

                case 2:
                    kwargs["stream_ended_at"] = de.read_timestamp(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["StreamEndedAt"]
                    )

                case 3:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["LanguageCode"]
                    )

                case 4:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 5:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["MediaEncoding"]
                    )

                case 6:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["VocabularyName"]
                    )

                case 7:
                    kwargs["vocabulary_filter_name"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                            "VocabularyFilterName"
                        ]
                    )

                case 8:
                    kwargs["vocabulary_filter_method"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                            "VocabularyFilterMethod"
                        ]
                    )

                case 9:
                    kwargs["resource_access_role_arn"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                            "ResourceAccessRoleArn"
                        ]
                    )

                case 10:
                    kwargs["channel_definitions"] = (
                        _deserialize_medical_scribe_channel_definitions(
                            de,
                            _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                                "ChannelDefinitions"
                            ],
                        )
                    )

                case 11:
                    kwargs["encryption_settings"] = (
                        MedicalScribeEncryptionSettings.deserialize(de)
                    )

                case 12:
                    kwargs["stream_status"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members["StreamStatus"]
                    )

                case 13:
                    kwargs["post_stream_analytics_settings"] = (
                        MedicalScribePostStreamAnalyticsSettings.deserialize(de)
                    )

                case 14:
                    kwargs["post_stream_analytics_result"] = (
                        MedicalScribePostStreamAnalyticsResult.deserialize(de)
                    )

                case 15:
                    kwargs["medical_scribe_context_provided"] = de.read_boolean(
                        _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS.members[
                            "MedicalScribeContextProvided"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_STREAM_DETAILS, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class GetMedicalScribeStreamOutput:
    medical_scribe_stream_details: MedicalScribeStreamDetails | None = None
    """
    Provides details about a HealthScribe streaming session.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_MEDICAL_SCRIBE_STREAM_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.medical_scribe_stream_details is not None:
            serializer.write_struct(
                _SCHEMA_GET_MEDICAL_SCRIBE_STREAM_OUTPUT.members[
                    "MedicalScribeStreamDetails"
                ],
                self.medical_scribe_stream_details,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["medical_scribe_stream_details"] = (
                        MedicalScribeStreamDetails.deserialize(de)
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_GET_MEDICAL_SCRIBE_STREAM_OUTPUT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class ResourceNotFoundException(ServiceError):
    """
    The request references a resource which doesn't exist.

    """

    fault: Literal["client", "server"] | None = "client"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_RESOURCE_NOT_FOUND_EXCEPTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.message is not None:
            serializer.write_string(
                _SCHEMA_RESOURCE_NOT_FOUND_EXCEPTION.members["Message"], self.message
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["message"] = de.read_string(
                        _SCHEMA_RESOURCE_NOT_FOUND_EXCEPTION.members["Message"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_RESOURCE_NOT_FOUND_EXCEPTION, consumer=_consumer
        )
        return kwargs


GET_MEDICAL_SCRIBE_STREAM = APIOperation(
    input=GetMedicalScribeStreamInput,
    output=GetMedicalScribeStreamOutput,
    schema=_SCHEMA_GET_MEDICAL_SCRIBE_STREAM,
    input_schema=_SCHEMA_GET_MEDICAL_SCRIBE_STREAM_INPUT,
    output_schema=_SCHEMA_GET_MEDICAL_SCRIBE_STREAM_OUTPUT,
    error_registry=TypeRegistry(
        {
            ShapeID(
                "com.amazonaws.transcribestreaming#BadRequestException"
            ): BadRequestException,
            ShapeID(
                "com.amazonaws.transcribestreaming#InternalFailureException"
            ): InternalFailureException,
            ShapeID(
                "com.amazonaws.transcribestreaming#LimitExceededException"
            ): LimitExceededException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ResourceNotFoundException"
            ): ResourceNotFoundException,
        }
    ),
    effective_auth_schemes=[ShapeID("aws.auth#sigv4")],
)


class LanguageCode(StrEnum):
    EN_US = "en-US"
    EN_GB = "en-GB"
    ES_US = "es-US"
    FR_CA = "fr-CA"
    FR_FR = "fr-FR"
    EN_AU = "en-AU"
    IT_IT = "it-IT"
    DE_DE = "de-DE"
    PT_BR = "pt-BR"
    JA_JP = "ja-JP"
    KO_KR = "ko-KR"
    ZH_CN = "zh-CN"
    TH_TH = "th-TH"
    ES_ES = "es-ES"
    AR_SA = "ar-SA"
    PT_PT = "pt-PT"
    CA_ES = "ca-ES"
    AR_AE = "ar-AE"
    HI_IN = "hi-IN"
    ZH_HK = "zh-HK"
    NL_NL = "nl-NL"
    NO_NO = "no-NO"
    SV_SE = "sv-SE"
    PL_PL = "pl-PL"
    FI_FI = "fi-FI"
    ZH_TW = "zh-TW"
    EN_IN = "en-IN"
    EN_IE = "en-IE"
    EN_NZ = "en-NZ"
    EN_AB = "en-AB"
    EN_ZA = "en-ZA"
    EN_WL = "en-WL"
    DE_CH = "de-CH"
    AF_ZA = "af-ZA"
    EU_ES = "eu-ES"
    HR_HR = "hr-HR"
    CS_CZ = "cs-CZ"
    DA_DK = "da-DK"
    FA_IR = "fa-IR"
    GL_ES = "gl-ES"
    EL_GR = "el-GR"
    HE_IL = "he-IL"
    ID_ID = "id-ID"
    LV_LV = "lv-LV"
    MS_MY = "ms-MY"
    RO_RO = "ro-RO"
    RU_RU = "ru-RU"
    SR_RS = "sr-RS"
    SK_SK = "sk-SK"
    SO_SO = "so-SO"
    TL_PH = "tl-PH"
    UK_UA = "uk-UA"
    VI_VN = "vi-VN"
    ZU_ZA = "zu-ZA"


@dataclass(kw_only=True)
class LanguageWithScore:
    """
    The language code that represents the language identified in your audio,
    including the associated confidence score. If you enabled channel identification
    in your request and each channel contained a different language, you will have
    more than one ``LanguageWithScore`` result.

    """

    language_code: str | None = None
    """
    The language code of the identified language.
    """
    score: float = 0
    """
    The confidence score associated with the identified language code. Confidence
    scores are values between zero and one; larger values indicate a higher
    confidence in the identified language.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LANGUAGE_WITH_SCORE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_LANGUAGE_WITH_SCORE.members["LanguageCode"], self.language_code
            )

        serializer.write_double(
            _SCHEMA_LANGUAGE_WITH_SCORE.members["Score"], self.score
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_LANGUAGE_WITH_SCORE.members["LanguageCode"]
                    )

                case 1:
                    kwargs["score"] = de.read_double(
                        _SCHEMA_LANGUAGE_WITH_SCORE.members["Score"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LANGUAGE_WITH_SCORE, consumer=_consumer)
        return kwargs


def _serialize_language_identification(
    serializer: ShapeSerializer, schema: Schema, value: list[LanguageWithScore]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_language_identification(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[LanguageWithScore]:
    result: list[LanguageWithScore] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(LanguageWithScore.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


class MediaEncoding(StrEnum):
    PCM = "pcm"
    OGG_OPUS = "ogg-opus"
    FLAC = "flac"


@dataclass(kw_only=True)
class MedicalEntity:
    """
    Contains entities identified as personal health information (PHI) in your
    transcription output, along with various associated attributes. Examples include
    category, confidence score, type, stability score, and start and end times.

    """

    start_time: float = 0
    """
    The start time, in seconds, of the utterance that was identified as PHI.
    """
    end_time: float = 0
    """
    The end time, in seconds, of the utterance that was identified as PHI.
    """
    category: str | None = None
    """
    The category of information identified. The only category is ``PHI``.
    """
    content: str | None = None
    """
    The word or words identified as PHI.
    """
    confidence: float | None = None
    """
    The confidence score associated with the identified PHI entity in your audio.

    Confidence scores are values between 0 and 1. A larger value indicates a higher
    probability that the identified entity correctly matches the entity spoken in
    your media.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_ENTITY, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_double(
            _SCHEMA_MEDICAL_ENTITY.members["StartTime"], self.start_time
        )
        serializer.write_double(
            _SCHEMA_MEDICAL_ENTITY.members["EndTime"], self.end_time
        )
        if self.category is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_ENTITY.members["Category"], self.category
            )

        if self.content is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_ENTITY.members["Content"], self.content
            )

        if self.confidence is not None:
            serializer.write_double(
                _SCHEMA_MEDICAL_ENTITY.members["Confidence"], self.confidence
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["start_time"] = de.read_double(
                        _SCHEMA_MEDICAL_ENTITY.members["StartTime"]
                    )

                case 1:
                    kwargs["end_time"] = de.read_double(
                        _SCHEMA_MEDICAL_ENTITY.members["EndTime"]
                    )

                case 2:
                    kwargs["category"] = de.read_string(
                        _SCHEMA_MEDICAL_ENTITY.members["Category"]
                    )

                case 3:
                    kwargs["content"] = de.read_string(
                        _SCHEMA_MEDICAL_ENTITY.members["Content"]
                    )

                case 4:
                    kwargs["confidence"] = de.read_double(
                        _SCHEMA_MEDICAL_ENTITY.members["Confidence"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_ENTITY, consumer=_consumer)
        return kwargs


def _serialize_medical_entity_list(
    serializer: ShapeSerializer, schema: Schema, value: list[MedicalEntity]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_medical_entity_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[MedicalEntity]:
    result: list[MedicalEntity] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(MedicalEntity.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class MedicalItem:
    """
    A word, phrase, or punctuation mark in your transcription output, along with
    various associated attributes, such as confidence score, type, and start and end
    times.

    """

    start_time: float = 0
    """
    The start time, in seconds, of the transcribed item.
    """
    end_time: float = 0
    """
    The end time, in seconds, of the transcribed item.
    """
    type: str | None = None
    """
    The type of item identified. Options are: ``PRONUNCIATION`` (spoken words) and
    ``PUNCTUATION``.
    """
    content: str | None = None
    """
    The word or punctuation that was transcribed.
    """
    confidence: float | None = None
    """
    The confidence score associated with a word or phrase in your transcript.

    Confidence scores are values between 0 and 1. A larger value indicates a higher
    probability that the identified item correctly matches the item spoken in your
    media.
    """
    speaker: str | None = None
    """
    If speaker partitioning is enabled, ``Speaker`` labels the speaker of the
    specified item.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_ITEM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_double(
            _SCHEMA_MEDICAL_ITEM.members["StartTime"], self.start_time
        )
        serializer.write_double(_SCHEMA_MEDICAL_ITEM.members["EndTime"], self.end_time)
        if self.type is not None:
            serializer.write_string(_SCHEMA_MEDICAL_ITEM.members["Type"], self.type)

        if self.content is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_ITEM.members["Content"], self.content
            )

        if self.confidence is not None:
            serializer.write_double(
                _SCHEMA_MEDICAL_ITEM.members["Confidence"], self.confidence
            )

        if self.speaker is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_ITEM.members["Speaker"], self.speaker
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["start_time"] = de.read_double(
                        _SCHEMA_MEDICAL_ITEM.members["StartTime"]
                    )

                case 1:
                    kwargs["end_time"] = de.read_double(
                        _SCHEMA_MEDICAL_ITEM.members["EndTime"]
                    )

                case 2:
                    kwargs["type"] = de.read_string(
                        _SCHEMA_MEDICAL_ITEM.members["Type"]
                    )

                case 3:
                    kwargs["content"] = de.read_string(
                        _SCHEMA_MEDICAL_ITEM.members["Content"]
                    )

                case 4:
                    kwargs["confidence"] = de.read_double(
                        _SCHEMA_MEDICAL_ITEM.members["Confidence"]
                    )

                case 5:
                    kwargs["speaker"] = de.read_string(
                        _SCHEMA_MEDICAL_ITEM.members["Speaker"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_ITEM, consumer=_consumer)
        return kwargs


def _serialize_medical_item_list(
    serializer: ShapeSerializer, schema: Schema, value: list[MedicalItem]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_medical_item_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[MedicalItem]:
    result: list[MedicalItem] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(MedicalItem.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class MedicalAlternative:
    """
    A list of possible alternative transcriptions for the input audio. Each
    alternative may contain one or more of ``Items``, ``Entities``, or
    ``Transcript``.

    """

    transcript: str | None = None
    """
    Contains transcribed text.
    """
    items: list[MedicalItem] | None = None
    """
    Contains words, phrases, or punctuation marks in your transcription output.
    """
    entities: list[MedicalEntity] | None = None
    """
    Contains entities identified as personal health information (PHI) in your
    transcription output.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_ALTERNATIVE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.transcript is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_ALTERNATIVE.members["Transcript"], self.transcript
            )

        if self.items is not None:
            _serialize_medical_item_list(
                serializer, _SCHEMA_MEDICAL_ALTERNATIVE.members["Items"], self.items
            )

        if self.entities is not None:
            _serialize_medical_entity_list(
                serializer,
                _SCHEMA_MEDICAL_ALTERNATIVE.members["Entities"],
                self.entities,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["transcript"] = de.read_string(
                        _SCHEMA_MEDICAL_ALTERNATIVE.members["Transcript"]
                    )

                case 1:
                    kwargs["items"] = _deserialize_medical_item_list(
                        de, _SCHEMA_MEDICAL_ALTERNATIVE.members["Items"]
                    )

                case 2:
                    kwargs["entities"] = _deserialize_medical_entity_list(
                        de, _SCHEMA_MEDICAL_ALTERNATIVE.members["Entities"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_ALTERNATIVE, consumer=_consumer)
        return kwargs


def _serialize_medical_alternative_list(
    serializer: ShapeSerializer, schema: Schema, value: list[MedicalAlternative]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_medical_alternative_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[MedicalAlternative]:
    result: list[MedicalAlternative] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(MedicalAlternative.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


class MedicalContentIdentificationType(StrEnum):
    PHI = "PHI"


@dataclass(kw_only=True)
class MedicalResult:
    """
    The ``Result`` associated with a ````.

    Contains a set of transcription results from one or more audio segments, along
    with additional information per your request parameters. This can include
    information relating to alternative transcriptions, channel identification,
    partial result stabilization, language identification, and other
    transcription-related data.

    """

    result_id: str | None = None
    """
    Provides a unique identifier for the ``Result``.
    """
    start_time: float = 0
    """
    The start time, in seconds, of the ``Result``.
    """
    end_time: float = 0
    """
    The end time, in seconds, of the ``Result``.
    """
    is_partial: bool = False
    """
    Indicates if the segment is complete.

    If ``IsPartial`` is ``true``, the segment is not complete. If ``IsPartial`` is
    ``false``, the segment is complete.
    """
    alternatives: list[MedicalAlternative] | None = None
    """
    A list of possible alternative transcriptions for the input audio. Each
    alternative may contain one or more of ``Items``, ``Entities``, or
    ``Transcript``.
    """
    channel_id: str | None = None
    """
    Indicates the channel identified for the ``Result``.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_RESULT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.result_id is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_RESULT.members["ResultId"], self.result_id
            )

        serializer.write_double(
            _SCHEMA_MEDICAL_RESULT.members["StartTime"], self.start_time
        )
        serializer.write_double(
            _SCHEMA_MEDICAL_RESULT.members["EndTime"], self.end_time
        )
        serializer.write_boolean(
            _SCHEMA_MEDICAL_RESULT.members["IsPartial"], self.is_partial
        )
        if self.alternatives is not None:
            _serialize_medical_alternative_list(
                serializer,
                _SCHEMA_MEDICAL_RESULT.members["Alternatives"],
                self.alternatives,
            )

        if self.channel_id is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_RESULT.members["ChannelId"], self.channel_id
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["result_id"] = de.read_string(
                        _SCHEMA_MEDICAL_RESULT.members["ResultId"]
                    )

                case 1:
                    kwargs["start_time"] = de.read_double(
                        _SCHEMA_MEDICAL_RESULT.members["StartTime"]
                    )

                case 2:
                    kwargs["end_time"] = de.read_double(
                        _SCHEMA_MEDICAL_RESULT.members["EndTime"]
                    )

                case 3:
                    kwargs["is_partial"] = de.read_boolean(
                        _SCHEMA_MEDICAL_RESULT.members["IsPartial"]
                    )

                case 4:
                    kwargs["alternatives"] = _deserialize_medical_alternative_list(
                        de, _SCHEMA_MEDICAL_RESULT.members["Alternatives"]
                    )

                case 5:
                    kwargs["channel_id"] = de.read_string(
                        _SCHEMA_MEDICAL_RESULT.members["ChannelId"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_RESULT, consumer=_consumer)
        return kwargs


def _serialize_medical_result_list(
    serializer: ShapeSerializer, schema: Schema, value: list[MedicalResult]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_medical_result_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[MedicalResult]:
    result: list[MedicalResult] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(MedicalResult.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class MedicalScribeAudioEvent:
    """
    A wrapper for your audio chunks

    For more information, see ``Event stream encoding <https://docs.aws.amazon.com/transcribe/latest/dg/event-stream.html>``_
    .

    """

    audio_chunk: bytes
    """
     An audio blob containing the next segment of audio from your application, with a
     maximum duration of 1 second. The maximum size in bytes varies based on audio
     properties.

    Find recommended size in `Transcribing streaming best practices <https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#best-practices>`_
    .

     Size calculation: ``Duration (s) * Sample Rate (Hz) * Number of Channels * 2
     (Bytes per Sample)``

     For example, a 1-second chunk of 16 kHz, 2-channel, 16-bit audio would be ``1 *
     16000 * 2 * 2 = 64000 bytes``.

     For 8 kHz, 1-channel, 16-bit audio, a 1-second chunk would be ``1 * 8000 * 1 * 2
     = 16000 bytes``.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_AUDIO_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_blob(
            _SCHEMA_MEDICAL_SCRIBE_AUDIO_EVENT.members["AudioChunk"], self.audio_chunk
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["audio_chunk"] = de.read_blob(
                        _SCHEMA_MEDICAL_SCRIBE_AUDIO_EVENT.members["AudioChunk"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_SCRIBE_AUDIO_EVENT, consumer=_consumer)
        return kwargs


class Pronouns(StrEnum):
    HE_HIM = "HE_HIM"
    SHE_HER = "SHE_HER"
    THEY_THEM = "THEY_THEM"


@dataclass(kw_only=True)
class MedicalScribePatientContext:
    """
    Contains patient-specific information.

    """

    pronouns: str | None = field(repr=False, default=None)
    """
    The patient's preferred pronouns that the user wants to provide as a context for
    clinical note generation .
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_PATIENT_CONTEXT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.pronouns is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_PATIENT_CONTEXT.members["Pronouns"],
                self.pronouns,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["pronouns"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_PATIENT_CONTEXT.members["Pronouns"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_PATIENT_CONTEXT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class MedicalScribeContext:
    """
    The ``MedicalScribeContext`` object that contains contextual information which
    is used during clinical note generation to add relevant context to the note.

    """

    patient_context: MedicalScribePatientContext | None = None
    """
    Contains patient-specific information used to customize the clinical note
    generation.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_CONTEXT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.patient_context is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_CONTEXT.members["PatientContext"],
                self.patient_context,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["patient_context"] = MedicalScribePatientContext.deserialize(
                        de
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_SCRIBE_CONTEXT, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class MedicalScribeConfigurationEvent:
    """
    Specify details to configure the streaming session, including channel
    definitions, encryption settings, post-stream analytics settings, resource
    access role ARN and vocabulary settings.

    Whether you are starting a new session or resuming an existing session, your
    first event must be a ``MedicalScribeConfigurationEvent``. If you are resuming a
    session, then this event must have the same configurations that you provided to
    start the session.

    """

    resource_access_role_arn: str
    """
    The Amazon Resource Name (ARN) of an IAM role that has permissions to access the
    Amazon S3 output bucket you specified, and use your KMS key if supplied. If the
    role that you specify doesn’t have the appropriate permissions, your request
    fails.

     IAM role ARNs have the format
     ``arn:partition:iam::account:role/role-name-with-path``. For example:
     ``arn:aws:iam::111122223333:role/Admin``.

    For more information, see `Amazon Web Services HealthScribe <https://docs.aws.amazon.com/transcribe/latest/dg/health-scribe-streaming.html>`_
    .
    """

    post_stream_analytics_settings: MedicalScribePostStreamAnalyticsSettings
    """
    Specify settings for post-stream analytics.
    """

    vocabulary_name: str | None = None
    """
    Specify the name of the custom vocabulary you want to use for your streaming
    session. Custom vocabulary names are case-sensitive.
    """
    vocabulary_filter_name: str | None = None
    """
    Specify the name of the custom vocabulary filter you want to include in your
    streaming session. Custom vocabulary filter names are case-sensitive.

    If you include ``VocabularyFilterName`` in the
    ``MedicalScribeConfigurationEvent``, you must also include
    ``VocabularyFilterMethod``.
    """
    vocabulary_filter_method: str | None = None
    """
    Specify how you want your custom vocabulary filter applied to the streaming
    session.

    To replace words with ``***``, specify ``mask``.

    To delete words, specify ``remove``.

    To flag words without changing them, specify ``tag``.
    """
    channel_definitions: list[MedicalScribeChannelDefinition] | None = None
    """
    Specify which speaker is on which audio channel.
    """
    encryption_settings: MedicalScribeEncryptionSettings | None = None
    """
    Specify the encryption settings for your streaming session.
    """
    medical_scribe_context: MedicalScribeContext | None = None
    """
    The ``MedicalScribeContext`` object that contains contextual information used to
    generate customized clinical notes.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members["VocabularyName"],
                self.vocabulary_name,
            )

        if self.vocabulary_filter_name is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                    "VocabularyFilterName"
                ],
                self.vocabulary_filter_name,
            )

        if self.vocabulary_filter_method is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                    "VocabularyFilterMethod"
                ],
                self.vocabulary_filter_method,
            )

        serializer.write_string(
            _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members["ResourceAccessRoleArn"],
            self.resource_access_role_arn,
        )
        if self.channel_definitions is not None:
            _serialize_medical_scribe_channel_definitions(
                serializer,
                _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                    "ChannelDefinitions"
                ],
                self.channel_definitions,
            )

        if self.encryption_settings is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                    "EncryptionSettings"
                ],
                self.encryption_settings,
            )

        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                "PostStreamAnalyticsSettings"
            ],
            self.post_stream_analytics_settings,
        )
        if self.medical_scribe_context is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                    "MedicalScribeContext"
                ],
                self.medical_scribe_context,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                            "VocabularyName"
                        ]
                    )

                case 1:
                    kwargs["vocabulary_filter_name"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                            "VocabularyFilterName"
                        ]
                    )

                case 2:
                    kwargs["vocabulary_filter_method"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                            "VocabularyFilterMethod"
                        ]
                    )

                case 3:
                    kwargs["resource_access_role_arn"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                            "ResourceAccessRoleArn"
                        ]
                    )

                case 4:
                    kwargs["channel_definitions"] = (
                        _deserialize_medical_scribe_channel_definitions(
                            de,
                            _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT.members[
                                "ChannelDefinitions"
                            ],
                        )
                    )

                case 5:
                    kwargs["encryption_settings"] = (
                        MedicalScribeEncryptionSettings.deserialize(de)
                    )

                case 6:
                    kwargs["post_stream_analytics_settings"] = (
                        MedicalScribePostStreamAnalyticsSettings.deserialize(de)
                    )

                case 7:
                    kwargs["medical_scribe_context"] = MedicalScribeContext.deserialize(
                        de
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_CONFIGURATION_EVENT, consumer=_consumer
        )
        return kwargs


class MedicalScribeSessionControlEventType(StrEnum):
    END_OF_SESSION = "END_OF_SESSION"


@dataclass(kw_only=True)
class MedicalScribeSessionControlEvent:
    """
    Specify the lifecycle of your streaming session.

    """

    type: str
    """
    The type of ``MedicalScribeSessionControlEvent``.

    Possible Values:

    * ``END_OF_SESSION`` - Indicates the audio streaming is complete. After you send an END_OF_SESSION event, Amazon Web Services HealthScribe starts the post-stream analytics. The session can't be resumed after this event is sent. After Amazon Web Services HealthScribe processes the event, the real-time ``StreamStatus`` is ``COMPLETED``. You get the ``StreamStatus`` and other stream details with the `GetMedicalScribeStream <https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_GetMedicalScribeStream.html>`_
      API operation. For more information about different streaming statuses, see the
      ``StreamStatus`` description in the `MedicalScribeStreamDetails <https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_MedicalScribeStreamDetails.html>`_
      .
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_SESSION_CONTROL_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(
            _SCHEMA_MEDICAL_SCRIBE_SESSION_CONTROL_EVENT.members["Type"], self.type
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["type"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_SESSION_CONTROL_EVENT.members["Type"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_SESSION_CONTROL_EVENT, consumer=_consumer
        )
        return kwargs


@dataclass
class MedicalScribeInputStreamAudioEvent:
    """
    A wrapper for your audio chunks

    For more information, see `Event stream encoding <https://docs.aws.amazon.com/transcribe/latest/dg/event-stream.html>`_
    .

    """

    value: MedicalScribeAudioEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM.members["AudioEvent"], self.value
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=MedicalScribeAudioEvent.deserialize(deserializer))


@dataclass
class MedicalScribeInputStreamSessionControlEvent:
    """
    Specify the lifecycle of your streaming session, such as ending the session.

    """

    value: MedicalScribeSessionControlEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM.members["SessionControlEvent"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=MedicalScribeSessionControlEvent.deserialize(deserializer))


@dataclass
class MedicalScribeInputStreamConfigurationEvent:
    """
    Specify additional streaming session configurations beyond those provided in
    your initial start request headers. For example, specify channel definitions,
    encryption settings, and post-stream analytics settings.

    Whether you are starting a new session or resuming an existing session, your
    first event must be a ``MedicalScribeConfigurationEvent``.

    """

    value: MedicalScribeConfigurationEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM.members["ConfigurationEvent"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=MedicalScribeConfigurationEvent.deserialize(deserializer))


@dataclass
class MedicalScribeInputStreamUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()


MedicalScribeInputStream = Union[
    MedicalScribeInputStreamAudioEvent
    | MedicalScribeInputStreamSessionControlEvent
    | MedicalScribeInputStreamConfigurationEvent
    | MedicalScribeInputStreamUnknown
]

"""
An encoded stream of events. The stream is encoded as HTTP/2 data frames.

An input stream consists of the following types of events. The first element of
the input stream must be the ``MedicalScribeConfigurationEvent`` event type.

* ``MedicalScribeConfigurationEvent``

* ``MedicalScribeAudioEvent``

* ``MedicalScribeSessionControlEvent``

"""


class _MedicalScribeInputStreamDeserializer:
    _result: MedicalScribeInputStream | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> MedicalScribeInputStream:
        self._result = None
        deserializer.read_struct(_SCHEMA_MEDICAL_SCRIBE_INPUT_STREAM, self._consumer)

        if self._result is None:
            raise SerializationError(
                "Unions must have exactly one value, but found none."
            )

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(MedicalScribeInputStreamAudioEvent.deserialize(de))

            case 1:
                self._set_result(
                    MedicalScribeInputStreamSessionControlEvent.deserialize(de)
                )

            case 2:
                self._set_result(
                    MedicalScribeInputStreamConfigurationEvent.deserialize(de)
                )

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: MedicalScribeInputStream) -> None:
        if self._result is not None:
            raise SerializationError(
                "Unions must have exactly one value, but found more than one."
            )
        self._result = value


class MedicalScribeTranscriptItemType(StrEnum):
    PRONUNCIATION = "pronunciation"
    PUNCTUATION = "punctuation"


@dataclass(kw_only=True)
class MedicalScribeTranscriptItem:
    """
    A word, phrase, or punctuation mark in your transcription output, along with
    various associated attributes, such as confidence score, type, and start and end
    times.

    """

    begin_audio_time: float = 0
    """
    The start time, in milliseconds, of the transcribed item.
    """
    end_audio_time: float = 0
    """
    The end time, in milliseconds, of the transcribed item.
    """
    type: str | None = None
    """
    The type of item identified. Options are: ``PRONUNCIATION`` (spoken words) and
    ``PUNCTUATION``.
    """
    confidence: float | None = None
    """
    The confidence score associated with a word or phrase in your transcript.

    Confidence scores are values between 0 and 1. A larger value indicates a higher
    probability that the identified item correctly matches the item spoken in your
    media.
    """
    content: str | None = None
    """
    The word, phrase or punctuation mark that was transcribed.
    """
    vocabulary_filter_match: bool | None = None
    """
    Indicates whether the specified item matches a word in the vocabulary filter
    included in your configuration event. If ``true``, there is a vocabulary filter
    match.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_double(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["BeginAudioTime"],
            self.begin_audio_time,
        )
        serializer.write_double(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["EndAudioTime"],
            self.end_audio_time,
        )
        if self.type is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["Type"], self.type
            )

        if self.confidence is not None:
            serializer.write_double(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["Confidence"],
                self.confidence,
            )

        if self.content is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["Content"], self.content
            )

        if self.vocabulary_filter_match is not None:
            serializer.write_boolean(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["VocabularyFilterMatch"],
                self.vocabulary_filter_match,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["begin_audio_time"] = de.read_double(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["BeginAudioTime"]
                    )

                case 1:
                    kwargs["end_audio_time"] = de.read_double(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["EndAudioTime"]
                    )

                case 2:
                    kwargs["type"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["Type"]
                    )

                case 3:
                    kwargs["confidence"] = de.read_double(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["Confidence"]
                    )

                case 4:
                    kwargs["content"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members["Content"]
                    )

                case 5:
                    kwargs["vocabulary_filter_match"] = de.read_boolean(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM.members[
                            "VocabularyFilterMatch"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_ITEM, consumer=_consumer
        )
        return kwargs


def _serialize_medical_scribe_transcript_item_list(
    serializer: ShapeSerializer,
    schema: Schema,
    value: list[MedicalScribeTranscriptItem],
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_medical_scribe_transcript_item_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[MedicalScribeTranscriptItem]:
    result: list[MedicalScribeTranscriptItem] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(MedicalScribeTranscriptItem.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


@dataclass(kw_only=True)
class MedicalScribeTranscriptSegment:
    """
    Contains a set of transcription results, along with additional information of
    the segment.

    """

    segment_id: str | None = None
    """
    The identifier of the segment.
    """
    begin_audio_time: float = 0
    """
    The start time, in milliseconds, of the segment.
    """
    end_audio_time: float = 0
    """
    The end time, in milliseconds, of the segment.
    """
    content: str | None = None
    """
    Contains transcribed text of the segment.
    """
    items: list[MedicalScribeTranscriptItem] | None = None
    """
    Contains words, phrases, or punctuation marks in your segment.
    """
    is_partial: bool = False
    """
    Indicates if the segment is complete.

    If ``IsPartial`` is ``true``, the segment is not complete. If ``IsPartial`` is
    ``false``, the segment is complete.
    """
    channel_id: str | None = None
    """
    Indicates which audio channel is associated with the
    ``MedicalScribeTranscriptSegment``.

    If ``MedicalScribeChannelDefinition`` is not provided in the
    ``MedicalScribeConfigurationEvent``, then this field will not be included.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.segment_id is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["SegmentId"],
                self.segment_id,
            )

        serializer.write_double(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["BeginAudioTime"],
            self.begin_audio_time,
        )
        serializer.write_double(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["EndAudioTime"],
            self.end_audio_time,
        )
        if self.content is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["Content"],
                self.content,
            )

        if self.items is not None:
            _serialize_medical_scribe_transcript_item_list(
                serializer,
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["Items"],
                self.items,
            )

        serializer.write_boolean(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["IsPartial"],
            self.is_partial,
        )
        if self.channel_id is not None:
            serializer.write_string(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["ChannelId"],
                self.channel_id,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["segment_id"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["SegmentId"]
                    )

                case 1:
                    kwargs["begin_audio_time"] = de.read_double(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members[
                            "BeginAudioTime"
                        ]
                    )

                case 2:
                    kwargs["end_audio_time"] = de.read_double(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members[
                            "EndAudioTime"
                        ]
                    )

                case 3:
                    kwargs["content"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["Content"]
                    )

                case 4:
                    kwargs["items"] = _deserialize_medical_scribe_transcript_item_list(
                        de, _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["Items"]
                    )

                case 5:
                    kwargs["is_partial"] = de.read_boolean(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["IsPartial"]
                    )

                case 6:
                    kwargs["channel_id"] = de.read_string(
                        _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT.members["ChannelId"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_SEGMENT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class MedicalScribeTranscriptEvent:
    """
    The event associated with ``MedicalScribeResultStream``.

    Contains ``MedicalScribeTranscriptSegment``, which contains segment related
    information.

    """

    transcript_segment: MedicalScribeTranscriptSegment | None = None
    """
    The ``TranscriptSegment`` associated with a ``MedicalScribeTranscriptEvent``.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.transcript_segment is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_EVENT.members["TranscriptSegment"],
                self.transcript_segment,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["transcript_segment"] = (
                        MedicalScribeTranscriptSegment.deserialize(de)
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_MEDICAL_SCRIBE_TRANSCRIPT_EVENT, consumer=_consumer
        )
        return kwargs


@dataclass
class MedicalScribeResultStreamTranscriptEvent:
    """
    The transcript event that contains real-time transcription results.

    """

    value: MedicalScribeTranscriptEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM.members["TranscriptEvent"], self.value
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=MedicalScribeTranscriptEvent.deserialize(deserializer))


@dataclass
class MedicalScribeResultStreamBadRequestException:
    """
    One or more arguments to the ``StartStreamTranscription``,
    ``StartMedicalStreamTranscription``, or
    ``StartCallAnalyticsStreamTranscription`` operation was not valid. For example,
    ``MediaEncoding`` or ``LanguageCode`` used unsupported values. Check the
    specified parameters and try your request again.

    """

    value: BadRequestException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM.members["BadRequestException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=BadRequestException.deserialize(deserializer))


@dataclass
class MedicalScribeResultStreamLimitExceededException:
    """
    Your client has exceeded one of the Amazon Transcribe limits. This is typically
    the audio length limit. Break your audio stream into smaller chunks and try your
    request again.

    """

    value: LimitExceededException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM.members["LimitExceededException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=LimitExceededException.deserialize(deserializer))


@dataclass
class MedicalScribeResultStreamInternalFailureException:
    """
    A problem occurred while processing the audio. Amazon Transcribe terminated
    processing.

    """

    value: InternalFailureException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM.members["InternalFailureException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=InternalFailureException.deserialize(deserializer))


@dataclass
class MedicalScribeResultStreamConflictException:
    """
    A new stream started with the same session ID. The current stream has been
    terminated.

    """

    value: ConflictException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM.members["ConflictException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ConflictException.deserialize(deserializer))


@dataclass
class MedicalScribeResultStreamServiceUnavailableException:
    """
    The service is currently unavailable. Try your request later.

    """

    value: ServiceUnavailableException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM.members["ServiceUnavailableException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ServiceUnavailableException.deserialize(deserializer))


@dataclass
class MedicalScribeResultStreamUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()


MedicalScribeResultStream = Union[
    MedicalScribeResultStreamTranscriptEvent
    | MedicalScribeResultStreamBadRequestException
    | MedicalScribeResultStreamLimitExceededException
    | MedicalScribeResultStreamInternalFailureException
    | MedicalScribeResultStreamConflictException
    | MedicalScribeResultStreamServiceUnavailableException
    | MedicalScribeResultStreamUnknown
]

"""
Result stream where you will receive the output events. The details are provided
in the ``MedicalScribeTranscriptEvent`` object.

"""


class _MedicalScribeResultStreamDeserializer:
    _result: MedicalScribeResultStream | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> MedicalScribeResultStream:
        self._result = None
        deserializer.read_struct(_SCHEMA_MEDICAL_SCRIBE_RESULT_STREAM, self._consumer)

        if self._result is None:
            raise SerializationError(
                "Unions must have exactly one value, but found none."
            )

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(
                    MedicalScribeResultStreamTranscriptEvent.deserialize(de)
                )

            case 1:
                self._set_result(
                    MedicalScribeResultStreamBadRequestException.deserialize(de)
                )

            case 2:
                self._set_result(
                    MedicalScribeResultStreamLimitExceededException.deserialize(de)
                )

            case 3:
                self._set_result(
                    MedicalScribeResultStreamInternalFailureException.deserialize(de)
                )

            case 4:
                self._set_result(
                    MedicalScribeResultStreamConflictException.deserialize(de)
                )

            case 5:
                self._set_result(
                    MedicalScribeResultStreamServiceUnavailableException.deserialize(de)
                )

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: MedicalScribeResultStream) -> None:
        if self._result is not None:
            raise SerializationError(
                "Unions must have exactly one value, but found more than one."
            )
        self._result = value


@dataclass(kw_only=True)
class MedicalTranscript:
    """
    The ``MedicalTranscript`` associated with a ````.

    ``MedicalTranscript`` contains ``Results``, which contains a set of
    transcription results from one or more audio segments, along with additional
    information per your request parameters.

    """

    results: list[MedicalResult] | None = None
    """
    Contains a set of transcription results from one or more audio segments, along
    with additional information per your request parameters. This can include
    information relating to alternative transcriptions, channel identification,
    partial result stabilization, language identification, and other
    transcription-related data.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.results is not None:
            _serialize_medical_result_list(
                serializer, _SCHEMA_MEDICAL_TRANSCRIPT.members["Results"], self.results
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["results"] = _deserialize_medical_result_list(
                        de, _SCHEMA_MEDICAL_TRANSCRIPT.members["Results"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_TRANSCRIPT, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class MedicalTranscriptEvent:
    """
    The ``MedicalTranscriptEvent`` associated with a
    ``MedicalTranscriptResultStream``.

    Contains a set of transcription results from one or more audio segments, along
    with additional information per your request parameters.

    """

    transcript: MedicalTranscript | None = None
    """
    Contains ``Results``, which contains a set of transcription results from one or
    more audio segments, along with additional information per your request
    parameters. This can include information relating to alternative transcriptions,
    channel identification, partial result stabilization, language identification,
    and other transcription-related data.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.transcript is not None:
            serializer.write_struct(
                _SCHEMA_MEDICAL_TRANSCRIPT_EVENT.members["Transcript"], self.transcript
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["transcript"] = MedicalTranscript.deserialize(de)

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MEDICAL_TRANSCRIPT_EVENT, consumer=_consumer)
        return kwargs


@dataclass
class MedicalTranscriptResultStreamTranscriptEvent:
    """
    The ``MedicalTranscriptEvent`` associated with a
    ``MedicalTranscriptResultStream``.

    Contains a set of transcription results from one or more audio segments, along
    with additional information per your request parameters. This can include
    information relating to alternative transcriptions, channel identification,
    partial result stabilization, language identification, and other
    transcription-related data.

    """

    value: MedicalTranscriptEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM.members["TranscriptEvent"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=MedicalTranscriptEvent.deserialize(deserializer))


@dataclass
class MedicalTranscriptResultStreamBadRequestException:
    """
    One or more arguments to the ``StartStreamTranscription``,
    ``StartMedicalStreamTranscription``, or
    ``StartCallAnalyticsStreamTranscription`` operation was not valid. For example,
    ``MediaEncoding`` or ``LanguageCode`` used unsupported values. Check the
    specified parameters and try your request again.

    """

    value: BadRequestException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM.members["BadRequestException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=BadRequestException.deserialize(deserializer))


@dataclass
class MedicalTranscriptResultStreamLimitExceededException:
    """
    Your client has exceeded one of the Amazon Transcribe limits. This is typically
    the audio length limit. Break your audio stream into smaller chunks and try your
    request again.

    """

    value: LimitExceededException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM.members["LimitExceededException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=LimitExceededException.deserialize(deserializer))


@dataclass
class MedicalTranscriptResultStreamInternalFailureException:
    """
    A problem occurred while processing the audio. Amazon Transcribe terminated
    processing.

    """

    value: InternalFailureException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM.members[
                "InternalFailureException"
            ],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=InternalFailureException.deserialize(deserializer))


@dataclass
class MedicalTranscriptResultStreamConflictException:
    """
    A new stream started with the same session ID. The current stream has been
    terminated.

    """

    value: ConflictException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM.members["ConflictException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ConflictException.deserialize(deserializer))


@dataclass
class MedicalTranscriptResultStreamServiceUnavailableException:
    """
    The service is currently unavailable. Try your request later.

    """

    value: ServiceUnavailableException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM.members[
                "ServiceUnavailableException"
            ],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ServiceUnavailableException.deserialize(deserializer))


@dataclass
class MedicalTranscriptResultStreamUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()


MedicalTranscriptResultStream = Union[
    MedicalTranscriptResultStreamTranscriptEvent
    | MedicalTranscriptResultStreamBadRequestException
    | MedicalTranscriptResultStreamLimitExceededException
    | MedicalTranscriptResultStreamInternalFailureException
    | MedicalTranscriptResultStreamConflictException
    | MedicalTranscriptResultStreamServiceUnavailableException
    | MedicalTranscriptResultStreamUnknown
]

"""
Contains detailed information about your streaming session.

"""


class _MedicalTranscriptResultStreamDeserializer:
    _result: MedicalTranscriptResultStream | None = None

    def deserialize(
        self, deserializer: ShapeDeserializer
    ) -> MedicalTranscriptResultStream:
        self._result = None
        deserializer.read_struct(
            _SCHEMA_MEDICAL_TRANSCRIPT_RESULT_STREAM, self._consumer
        )

        if self._result is None:
            raise SerializationError(
                "Unions must have exactly one value, but found none."
            )

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(
                    MedicalTranscriptResultStreamTranscriptEvent.deserialize(de)
                )

            case 1:
                self._set_result(
                    MedicalTranscriptResultStreamBadRequestException.deserialize(de)
                )

            case 2:
                self._set_result(
                    MedicalTranscriptResultStreamLimitExceededException.deserialize(de)
                )

            case 3:
                self._set_result(
                    MedicalTranscriptResultStreamInternalFailureException.deserialize(
                        de
                    )
                )

            case 4:
                self._set_result(
                    MedicalTranscriptResultStreamConflictException.deserialize(de)
                )

            case 5:
                self._set_result(
                    MedicalTranscriptResultStreamServiceUnavailableException.deserialize(
                        de
                    )
                )

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: MedicalTranscriptResultStream) -> None:
        if self._result is not None:
            raise SerializationError(
                "Unions must have exactly one value, but found more than one."
            )
        self._result = value


class PartialResultsStability(StrEnum):
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"


@dataclass(kw_only=True)
class Result:
    """
    The ``Result`` associated with a ````.

    Contains a set of transcription results from one or more audio segments, along
    with additional information per your request parameters. This can include
    information relating to alternative transcriptions, channel identification,
    partial result stabilization, language identification, and other
    transcription-related data.

    """

    result_id: str | None = None
    """
    Provides a unique identifier for the ``Result``.
    """
    start_time: float = 0
    """
    The start time of the ``Result`` in seconds, with millisecond precision (e.g.,
    1.056).
    """
    end_time: float = 0
    """
    The end time of the ``Result`` in seconds, with millisecond precision (e.g.,
    1.056).
    """
    is_partial: bool = False
    """
    Indicates if the segment is complete.

    If ``IsPartial`` is ``true``, the segment is not complete. If ``IsPartial`` is
    ``false``, the segment is complete.
    """
    alternatives: list[Alternative] | None = None
    """
    A list of possible alternative transcriptions for the input audio. Each
    alternative may contain one or more of ``Items``, ``Entities``, or
    ``Transcript``.
    """
    channel_id: str | None = None
    """
    Indicates which audio channel is associated with the ``Result``.
    """
    language_code: str | None = None
    """
    The language code that represents the language spoken in your audio stream.
    """
    language_identification: list[LanguageWithScore] | None = None
    """
    The language code of the dominant language identified in your stream.

    If you enabled channel identification and each channel of your audio contains a
    different language, you may have more than one result.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_RESULT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.result_id is not None:
            serializer.write_string(_SCHEMA_RESULT.members["ResultId"], self.result_id)

        serializer.write_double(_SCHEMA_RESULT.members["StartTime"], self.start_time)
        serializer.write_double(_SCHEMA_RESULT.members["EndTime"], self.end_time)
        serializer.write_boolean(_SCHEMA_RESULT.members["IsPartial"], self.is_partial)
        if self.alternatives is not None:
            _serialize_alternative_list(
                serializer, _SCHEMA_RESULT.members["Alternatives"], self.alternatives
            )

        if self.channel_id is not None:
            serializer.write_string(
                _SCHEMA_RESULT.members["ChannelId"], self.channel_id
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_RESULT.members["LanguageCode"], self.language_code
            )

        if self.language_identification is not None:
            _serialize_language_identification(
                serializer,
                _SCHEMA_RESULT.members["LanguageIdentification"],
                self.language_identification,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["result_id"] = de.read_string(
                        _SCHEMA_RESULT.members["ResultId"]
                    )

                case 1:
                    kwargs["start_time"] = de.read_double(
                        _SCHEMA_RESULT.members["StartTime"]
                    )

                case 2:
                    kwargs["end_time"] = de.read_double(
                        _SCHEMA_RESULT.members["EndTime"]
                    )

                case 3:
                    kwargs["is_partial"] = de.read_boolean(
                        _SCHEMA_RESULT.members["IsPartial"]
                    )

                case 4:
                    kwargs["alternatives"] = _deserialize_alternative_list(
                        de, _SCHEMA_RESULT.members["Alternatives"]
                    )

                case 5:
                    kwargs["channel_id"] = de.read_string(
                        _SCHEMA_RESULT.members["ChannelId"]
                    )

                case 6:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_RESULT.members["LanguageCode"]
                    )

                case 7:
                    kwargs["language_identification"] = (
                        _deserialize_language_identification(
                            de, _SCHEMA_RESULT.members["LanguageIdentification"]
                        )
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_RESULT, consumer=_consumer)
        return kwargs


def _serialize_result_list(
    serializer: ShapeSerializer, schema: Schema, value: list[Result]
) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)


def _deserialize_result_list(
    deserializer: ShapeDeserializer, schema: Schema
) -> list[Result]:
    result: list[Result] = []

    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(Result.deserialize(d))

    deserializer.read_list(schema, _read_value)
    return result


class Specialty(StrEnum):
    PRIMARYCARE = "PRIMARYCARE"
    CARDIOLOGY = "CARDIOLOGY"
    NEUROLOGY = "NEUROLOGY"
    ONCOLOGY = "ONCOLOGY"
    RADIOLOGY = "RADIOLOGY"
    UROLOGY = "UROLOGY"


class VocabularyFilterMethod(StrEnum):
    REMOVE = "remove"
    MASK = "mask"
    TAG = "tag"


@dataclass(kw_only=True)
class StartCallAnalyticsStreamTranscriptionInput:
    language_code: str | None = None
    """
    Specify the language code that represents the language spoken in your audio.

    For a list of languages supported with real-time Call Analytics, refer to the
    `Supported languages <https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html>`_
    table.
    """
    media_sample_rate_hertz: int | None = None
    """
    The sample rate of the input audio (in hertz). Low-quality audio, such as
    telephone audio, is typically around 8,000 Hz. High-quality audio typically
    ranges from 16,000 Hz to 48,000 Hz. Note that the sample rate you specify must
    match that of your audio.
    """
    media_encoding: str | None = None
    """
    Specify the encoding of your input audio. Supported formats are:

    * FLAC

    * OPUS-encoded audio in an Ogg container

    * PCM (only signed 16-bit little-endian audio formats, which does not include
      WAV)

    For more information, see `Media formats <https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio>`_
    .
    """
    vocabulary_name: str | None = None
    """
    Specify the name of the custom vocabulary that you want to use when processing
    your transcription. Note that vocabulary names are case sensitive.

    If the language of the specified custom vocabulary doesn't match the language
    identified in your media, the custom vocabulary is not applied to your
    transcription.

    For more information, see `Custom vocabularies <https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html>`_
    .
    """
    session_id: str | None = None
    """
    Specify a name for your Call Analytics transcription session. If you don't
    include this parameter in your request, Amazon Transcribe generates an ID and
    returns it in the response.
    """
    vocabulary_filter_name: str | None = None
    """
    Specify the name of the custom vocabulary filter that you want to use when
    processing your transcription. Note that vocabulary filter names are case
    sensitive.

    If the language of the specified custom vocabulary filter doesn't match the
    language identified in your media, the vocabulary filter is not applied to your
    transcription.

    For more information, see `Using vocabulary filtering with unwanted words <https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html>`_
    .
    """
    vocabulary_filter_method: str | None = None
    """
    Specify how you want your vocabulary filter applied to your transcript.

    To replace words with ``***``, choose ``mask``.

    To delete words, choose ``remove``.

    To flag words without changing them, choose ``tag``.
    """
    language_model_name: str | None = None
    """
    Specify the name of the custom language model that you want to use when
    processing your transcription. Note that language model names are case
    sensitive.

    The language of the specified language model must match the language code you
    specify in your transcription request. If the languages don't match, the custom
    language model isn't applied. There are no errors or warnings associated with a
    language mismatch.

    For more information, see `Custom language models <https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html>`_
    .
    """
    identify_language: bool = False
    """
    Enables automatic language identification for your Call Analytics transcription.

    If you include ``IdentifyLanguage``, you must include a list of language codes,
    using ``LanguageOptions``, that you think may be present in your audio stream.
    You must provide a minimum of two language selections.

    You can also include a preferred language using ``PreferredLanguage``. Adding a
    preferred language can help Amazon Transcribe identify the language faster than
    if you omit this parameter.

    Note that you must include either ``LanguageCode`` or ``IdentifyLanguage`` in
    your request. If you include both parameters, your transcription job fails.
    """
    language_options: str | None = None
    """
    Specify two or more language codes that represent the languages you think may be
    present in your media.

    Including language options can improve the accuracy of language identification.

    If you include ``LanguageOptions`` in your request, you must also include
    ``IdentifyLanguage``.

    For a list of languages supported with Call Analytics streaming, refer to the
    `Supported languages <https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html>`_
    table.

    .. important::
        You can only include one language dialect per language per stream. For example,
        you cannot include ``en-US`` and ``en-AU`` in the same request.
    """
    preferred_language: str | None = None
    """
    Specify a preferred language from the subset of languages codes you specified in
    ``LanguageOptions``.

    You can only use this parameter if you've included ``IdentifyLanguage`` and
    ``LanguageOptions`` in your request.
    """
    vocabulary_names: str | None = None
    """
    Specify the names of the custom vocabularies that you want to use when
    processing your Call Analytics transcription. Note that vocabulary names are
    case sensitive.

    If the custom vocabulary's language doesn't match the identified media language,
    it won't be applied to the transcription.

    .. important::
        This parameter is only intended for use **with** the ``IdentifyLanguage``
        parameter. If you're **not** including ``IdentifyLanguage`` in your request and
        want to use a custom vocabulary with your transcription, use the
        ``VocabularyName`` parameter instead.

    For more information, see `Custom vocabularies <https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html>`_
    .
    """
    vocabulary_filter_names: str | None = None
    """
    Specify the names of the custom vocabulary filters that you want to use when
    processing your Call Analytics transcription. Note that vocabulary filter names
    are case sensitive.

    These filters serve to customize the transcript output.

    .. important::
        This parameter is only intended for use **with** the ``IdentifyLanguage``
        parameter. If you're **not** including ``IdentifyLanguage`` in your request and
        want to use a custom vocabulary filter with your transcription, use the
        ``VocabularyFilterName`` parameter instead.

    For more information, see `Using vocabulary filtering with unwanted words <https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html>`_
    .
    """
    enable_partial_results_stabilization: bool = False
    """
    Enables partial result stabilization for your transcription. Partial result
    stabilization can reduce latency in your output, but may impact accuracy. For
    more information, see `Partial-result stabilization <https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization>`_
    .
    """
    partial_results_stability: str | None = None
    """
    Specify the level of stability to use when you enable partial results
    stabilization (``EnablePartialResultsStabilization``).

    Low stability provides the highest accuracy. High stability transcribes faster,
    but with slightly lower accuracy.

    For more information, see `Partial-result stabilization <https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization>`_
    .
    """
    content_identification_type: str | None = None
    """
    Labels all personally identifiable information (PII) identified in your
    transcript.

    Content identification is performed at the segment level; PII specified in
    ``PiiEntityTypes`` is flagged upon complete transcription of an audio segment.
    If you don't include ``PiiEntityTypes`` in your request, all PII is identified.

    You can’t set ``ContentIdentificationType`` and ``ContentRedactionType`` in the
    same request. If you set both, your request returns a ``BadRequestException``.

    For more information, see `Redacting or identifying personally identifiable information <https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html>`_
    .
    """
    content_redaction_type: str | None = None
    """
    Redacts all personally identifiable information (PII) identified in your
    transcript.

    Content redaction is performed at the segment level; PII specified in
    ``PiiEntityTypes`` is redacted upon complete transcription of an audio segment.
    If you don't include ``PiiEntityTypes`` in your request, all PII is redacted.

    You can’t set ``ContentRedactionType`` and ``ContentIdentificationType`` in the
    same request. If you set both, your request returns a ``BadRequestException``.

    For more information, see `Redacting or identifying personally identifiable information <https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html>`_
    .
    """
    pii_entity_types: str | None = None
    """
    Specify which types of personally identifiable information (PII) you want to
    redact in your transcript. You can include as many types as you'd like, or you
    can select ``ALL``.

    Values must be comma-separated and can include: ``ADDRESS``,
    ``BANK_ACCOUNT_NUMBER``, ``BANK_ROUTING``, ``CREDIT_DEBIT_CVV``,
    ``CREDIT_DEBIT_EXPIRY``, ``CREDIT_DEBIT_NUMBER``, ``EMAIL``, ``NAME``,
    ``PHONE``, ``PIN``, ``SSN``, or ``ALL``.

    Note that if you include ``PiiEntityTypes`` in your request, you must also
    include ``ContentIdentificationType`` or ``ContentRedactionType``.

    If you include ``ContentRedactionType`` or ``ContentIdentificationType`` in your
    request, but do not include ``PiiEntityTypes``, all PII is redacted or
    identified.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT, self
        )

    def serialize_members(self, serializer: ShapeSerializer):
        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "LanguageCode"
                ],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "MediaEncoding"
                ],
                self.media_encoding,
            )

        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyName"
                ],
                self.vocabulary_name,
            )

        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "SessionId"
                ],
                self.session_id,
            )

        if self.vocabulary_filter_name is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyFilterName"
                ],
                self.vocabulary_filter_name,
            )

        if self.vocabulary_filter_method is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyFilterMethod"
                ],
                self.vocabulary_filter_method,
            )

        if self.language_model_name is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "LanguageModelName"
                ],
                self.language_model_name,
            )

        if self.identify_language is not None:
            serializer.write_boolean(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "IdentifyLanguage"
                ],
                self.identify_language,
            )

        if self.language_options is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "LanguageOptions"
                ],
                self.language_options,
            )

        if self.preferred_language is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "PreferredLanguage"
                ],
                self.preferred_language,
            )

        if self.vocabulary_names is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyNames"
                ],
                self.vocabulary_names,
            )

        if self.vocabulary_filter_names is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyFilterNames"
                ],
                self.vocabulary_filter_names,
            )

        if self.enable_partial_results_stabilization is not None:
            serializer.write_boolean(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "EnablePartialResultsStabilization"
                ],
                self.enable_partial_results_stabilization,
            )

        if self.partial_results_stability is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "PartialResultsStability"
                ],
                self.partial_results_stability,
            )

        if self.content_identification_type is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "ContentIdentificationType"
                ],
                self.content_identification_type,
            )

        if self.content_redaction_type is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "ContentRedactionType"
                ],
                self.content_redaction_type,
            )

        if self.pii_entity_types is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                    "PiiEntityTypes"
                ],
                self.pii_entity_types,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "LanguageCode"
                        ]
                    )

                case 1:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 2:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case 3:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyName"
                        ]
                    )

                case 4:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "SessionId"
                        ]
                    )

                case 6:
                    kwargs["vocabulary_filter_name"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyFilterName"
                        ]
                    )

                case 7:
                    kwargs["vocabulary_filter_method"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyFilterMethod"
                        ]
                    )

                case 8:
                    kwargs["language_model_name"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "LanguageModelName"
                        ]
                    )

                case 9:
                    kwargs["identify_language"] = de.read_boolean(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "IdentifyLanguage"
                        ]
                    )

                case 10:
                    kwargs["language_options"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "LanguageOptions"
                        ]
                    )

                case 11:
                    kwargs["preferred_language"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "PreferredLanguage"
                        ]
                    )

                case 12:
                    kwargs["vocabulary_names"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyNames"
                        ]
                    )

                case 13:
                    kwargs["vocabulary_filter_names"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyFilterNames"
                        ]
                    )

                case 14:
                    kwargs["enable_partial_results_stabilization"] = de.read_boolean(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "EnablePartialResultsStabilization"
                        ]
                    )

                case 15:
                    kwargs["partial_results_stability"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "PartialResultsStability"
                        ]
                    )

                case 16:
                    kwargs["content_identification_type"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "ContentIdentificationType"
                        ]
                    )

                case 17:
                    kwargs["content_redaction_type"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "ContentRedactionType"
                        ]
                    )

                case 18:
                    kwargs["pii_entity_types"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT.members[
                            "PiiEntityTypes"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class StartCallAnalyticsStreamTranscriptionOutput:
    request_id: str | None = None
    """
    Provides the identifier for your real-time Call Analytics request.
    """
    language_code: str | None = None
    """
    Provides the language code that you specified in your Call Analytics request.
    """
    media_sample_rate_hertz: int | None = None
    """
    Provides the sample rate that you specified in your Call Analytics request.
    """
    media_encoding: str | None = None
    """
    Provides the media encoding you specified in your Call Analytics request.
    """
    vocabulary_name: str | None = None
    """
    Provides the name of the custom vocabulary that you specified in your Call
    Analytics request.
    """
    session_id: str | None = None
    """
    Provides the identifier for your Call Analytics transcription session.
    """
    vocabulary_filter_name: str | None = None
    """
    Provides the name of the custom vocabulary filter that you specified in your
    Call Analytics request.
    """
    vocabulary_filter_method: str | None = None
    """
    Provides the vocabulary filtering method used in your Call Analytics
    transcription.
    """
    language_model_name: str | None = None
    """
    Provides the name of the custom language model that you specified in your Call
    Analytics request.
    """
    identify_language: bool = False
    """
    Shows whether automatic language identification was enabled for your Call
    Analytics transcription.
    """
    language_options: str | None = None
    """
    Provides the language codes that you specified in your Call Analytics request.
    """
    preferred_language: str | None = None
    """
    Provides the preferred language that you specified in your Call Analytics
    request.
    """
    vocabulary_names: str | None = None
    """
    Provides the names of the custom vocabularies that you specified in your Call
    Analytics request.
    """
    vocabulary_filter_names: str | None = None
    """
    Provides the names of the custom vocabulary filters that you specified in your
    Call Analytics request.
    """
    enable_partial_results_stabilization: bool = False
    """
    Shows whether partial results stabilization was enabled for your Call Analytics
    transcription.
    """
    partial_results_stability: str | None = None
    """
    Provides the stabilization level used for your transcription.
    """
    content_identification_type: str | None = None
    """
    Shows whether content identification was enabled for your Call Analytics
    transcription.
    """
    content_redaction_type: str | None = None
    """
    Shows whether content redaction was enabled for your Call Analytics
    transcription.
    """
    pii_entity_types: str | None = None
    """
    Lists the PII entity types you specified in your Call Analytics request.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT, self
        )

    def serialize_members(self, serializer: ShapeSerializer):
        if self.request_id is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "RequestId"
                ],
                self.request_id,
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "LanguageCode"
                ],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "MediaEncoding"
                ],
                self.media_encoding,
            )

        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyName"
                ],
                self.vocabulary_name,
            )

        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "SessionId"
                ],
                self.session_id,
            )

        if self.vocabulary_filter_name is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyFilterName"
                ],
                self.vocabulary_filter_name,
            )

        if self.vocabulary_filter_method is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyFilterMethod"
                ],
                self.vocabulary_filter_method,
            )

        if self.language_model_name is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "LanguageModelName"
                ],
                self.language_model_name,
            )

        serializer.write_boolean(
            _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                "IdentifyLanguage"
            ],
            self.identify_language,
        )
        if self.language_options is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "LanguageOptions"
                ],
                self.language_options,
            )

        if self.preferred_language is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "PreferredLanguage"
                ],
                self.preferred_language,
            )

        if self.vocabulary_names is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyNames"
                ],
                self.vocabulary_names,
            )

        if self.vocabulary_filter_names is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyFilterNames"
                ],
                self.vocabulary_filter_names,
            )

        serializer.write_boolean(
            _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                "EnablePartialResultsStabilization"
            ],
            self.enable_partial_results_stabilization,
        )
        if self.partial_results_stability is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "PartialResultsStability"
                ],
                self.partial_results_stability,
            )

        if self.content_identification_type is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "ContentIdentificationType"
                ],
                self.content_identification_type,
            )

        if self.content_redaction_type is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "ContentRedactionType"
                ],
                self.content_redaction_type,
            )

        if self.pii_entity_types is not None:
            serializer.write_string(
                _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "PiiEntityTypes"
                ],
                self.pii_entity_types,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["request_id"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "RequestId"
                        ]
                    )

                case 1:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "LanguageCode"
                        ]
                    )

                case 2:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 3:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case 4:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyName"
                        ]
                    )

                case 5:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "SessionId"
                        ]
                    )

                case 7:
                    kwargs["vocabulary_filter_name"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyFilterName"
                        ]
                    )

                case 8:
                    kwargs["vocabulary_filter_method"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyFilterMethod"
                        ]
                    )

                case 9:
                    kwargs["language_model_name"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "LanguageModelName"
                        ]
                    )

                case 10:
                    kwargs["identify_language"] = de.read_boolean(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "IdentifyLanguage"
                        ]
                    )

                case 11:
                    kwargs["language_options"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "LanguageOptions"
                        ]
                    )

                case 12:
                    kwargs["preferred_language"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "PreferredLanguage"
                        ]
                    )

                case 13:
                    kwargs["vocabulary_names"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyNames"
                        ]
                    )

                case 14:
                    kwargs["vocabulary_filter_names"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyFilterNames"
                        ]
                    )

                case 15:
                    kwargs["enable_partial_results_stabilization"] = de.read_boolean(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "EnablePartialResultsStabilization"
                        ]
                    )

                case 16:
                    kwargs["partial_results_stability"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "PartialResultsStability"
                        ]
                    )

                case 17:
                    kwargs["content_identification_type"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "ContentIdentificationType"
                        ]
                    )

                case 18:
                    kwargs["content_redaction_type"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "ContentRedactionType"
                        ]
                    )

                case 19:
                    kwargs["pii_entity_types"] = de.read_string(
                        _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "PiiEntityTypes"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT, consumer=_consumer
        )
        return kwargs


START_CALL_ANALYTICS_STREAM_TRANSCRIPTION = APIOperation(
    input=StartCallAnalyticsStreamTranscriptionInput,
    output=StartCallAnalyticsStreamTranscriptionOutput,
    schema=_SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION,
    input_schema=_SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_INPUT,
    output_schema=_SCHEMA_START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_OUTPUT,
    error_registry=TypeRegistry(
        {
            ShapeID(
                "com.amazonaws.transcribestreaming#BadRequestException"
            ): BadRequestException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ConflictException"
            ): ConflictException,
            ShapeID(
                "com.amazonaws.transcribestreaming#InternalFailureException"
            ): InternalFailureException,
            ShapeID(
                "com.amazonaws.transcribestreaming#LimitExceededException"
            ): LimitExceededException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ServiceUnavailableException"
            ): ServiceUnavailableException,
        }
    ),
    effective_auth_schemes=[ShapeID("aws.auth#sigv4")],
)


@dataclass(kw_only=True)
class StartMedicalScribeStreamInput:
    session_id: str | None = None
    """
    Specify an identifier for your streaming session (in UUID format). If you don't
    include a SessionId in your request, Amazon Web Services HealthScribe generates
    an ID and returns it in the response.
    """
    language_code: str | None = None
    """
    Specify the language code for your HealthScribe streaming session.
    """
    media_sample_rate_hertz: int | None = None
    """
    Specify the sample rate of the input audio (in hertz). Amazon Web Services
    HealthScribe supports a range from 16,000 Hz to 48,000 Hz. The sample rate you
    specify must match that of your audio.
    """
    media_encoding: str | None = None
    """
    Specify the encoding used for the input audio.

    Supported formats are:

    * FLAC

    * OPUS-encoded audio in an Ogg container

    * PCM (only signed 16-bit little-endian audio formats, which does not include
      WAV)

    For more information, see `Media formats <https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio>`_
    .
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members["SessionId"],
                self.session_id,
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members["LanguageCode"],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members["MediaEncoding"],
                self.media_encoding,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members["SessionId"]
                    )

                case 1:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members[
                            "LanguageCode"
                        ]
                    )

                case 2:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 3:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class StartMedicalScribeStreamOutput:
    session_id: str | None = None
    """
    The identifier (in UUID format) for your streaming session.

    If you already started streaming, this is same ID as the one you specified in
    your initial ``StartMedicalScribeStreamRequest``.
    """
    request_id: str | None = None
    """
    The unique identifier for your streaming request.
    """
    language_code: str | None = None
    """
    The Language Code that you specified in your request. Same as provided in the
    ``StartMedicalScribeStreamRequest``.
    """
    media_sample_rate_hertz: int | None = None
    """
    The sample rate (in hertz) that you specified in your request. Same as provided
    in the ``StartMedicalScribeStreamRequest``
    """
    media_encoding: str | None = None
    """
    The Media Encoding you specified in your request. Same as provided in the
    ``StartMedicalScribeStreamRequest``
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members["SessionId"],
                self.session_id,
            )

        if self.request_id is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members["RequestId"],
                self.request_id,
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members["LanguageCode"],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members["MediaEncoding"],
                self.media_encoding,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members["SessionId"]
                    )

                case 1:
                    kwargs["request_id"] = de.read_string(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members["RequestId"]
                    )

                case 2:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members[
                            "LanguageCode"
                        ]
                    )

                case 3:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 4:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT, consumer=_consumer
        )
        return kwargs


START_MEDICAL_SCRIBE_STREAM = APIOperation(
    input=StartMedicalScribeStreamInput,
    output=StartMedicalScribeStreamOutput,
    schema=_SCHEMA_START_MEDICAL_SCRIBE_STREAM,
    input_schema=_SCHEMA_START_MEDICAL_SCRIBE_STREAM_INPUT,
    output_schema=_SCHEMA_START_MEDICAL_SCRIBE_STREAM_OUTPUT,
    error_registry=TypeRegistry(
        {
            ShapeID(
                "com.amazonaws.transcribestreaming#BadRequestException"
            ): BadRequestException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ConflictException"
            ): ConflictException,
            ShapeID(
                "com.amazonaws.transcribestreaming#InternalFailureException"
            ): InternalFailureException,
            ShapeID(
                "com.amazonaws.transcribestreaming#LimitExceededException"
            ): LimitExceededException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ServiceUnavailableException"
            ): ServiceUnavailableException,
        }
    ),
    effective_auth_schemes=[ShapeID("aws.auth#sigv4")],
)


class Type(StrEnum):
    CONVERSATION = "CONVERSATION"
    DICTATION = "DICTATION"


@dataclass(kw_only=True)
class StartMedicalStreamTranscriptionInput:
    language_code: str | None = None
    """
    Specify the language code that represents the language spoken in your audio.

    .. important::
        Amazon Transcribe Medical only supports US English (``en-US``).
    """
    media_sample_rate_hertz: int | None = None
    """
    The sample rate of the input audio (in hertz). Amazon Transcribe Medical
    supports a range from 16,000 Hz to 48,000 Hz. Note that the sample rate you
    specify must match that of your audio.
    """
    media_encoding: str | None = None
    """
    Specify the encoding used for the input audio. Supported formats are:

    * FLAC

    * OPUS-encoded audio in an Ogg container

    * PCM (only signed 16-bit little-endian audio formats, which does not include
      WAV)

    For more information, see `Media formats <https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio>`_
    .
    """
    vocabulary_name: str | None = None
    """
    Specify the name of the custom vocabulary that you want to use when processing
    your transcription. Note that vocabulary names are case sensitive.
    """
    specialty: str | None = None
    """
    Specify the medical specialty contained in your audio.
    """
    type: str | None = None
    """
    Specify the type of input audio. For example, choose ``DICTATION`` for a
    provider dictating patient notes and ``CONVERSATION`` for a dialogue between a
    patient and a medical professional.
    """
    show_speaker_label: bool = False
    """
    Enables speaker partitioning (diarization) in your transcription output. Speaker
    partitioning labels the speech from individual speakers in your media file.

    For more information, see `Partitioning speakers (diarization) <https://docs.aws.amazon.com/transcribe/latest/dg/diarization.html>`_
    .
    """
    session_id: str | None = None
    """
    Specify a name for your transcription session. If you don't include this
    parameter in your request, Amazon Transcribe Medical generates an ID and returns
    it in the response.
    """
    enable_channel_identification: bool = False
    """
    Enables channel identification in multi-channel audio.

    Channel identification transcribes the audio on each channel independently, then
    appends the output for each channel into one transcript.

    If you have multi-channel audio and do not enable channel identification, your
    audio is transcribed in a continuous manner and your transcript is not separated
    by channel.

    If you include ``EnableChannelIdentification`` in your request, you must also
    include ``NumberOfChannels``.

    For more information, see `Transcribing multi-channel audio <https://docs.aws.amazon.com/transcribe/latest/dg/channel-id.html>`_
    .
    """
    number_of_channels: int | None = None
    """
    Specify the number of channels in your audio stream. This value must be ``2``,
    as only two channels are supported. If your audio doesn't contain multiple
    channels, do not include this parameter in your request.

    If you include ``NumberOfChannels`` in your request, you must also include
    ``EnableChannelIdentification``.
    """
    content_identification_type: str | None = None
    """
    Labels all personal health information (PHI) identified in your transcript.

    Content identification is performed at the segment level; PHI is flagged upon
    complete transcription of an audio segment.

    For more information, see `Identifying personal health information (PHI) in a transcription <https://docs.aws.amazon.com/transcribe/latest/dg/phi-id.html>`_
    .
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "LanguageCode"
                ],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "MediaEncoding"
                ],
                self.media_encoding,
            )

        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyName"
                ],
                self.vocabulary_name,
            )

        if self.specialty is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members["Specialty"],
                self.specialty,
            )

        if self.type is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members["Type"],
                self.type,
            )

        if self.show_speaker_label is not None:
            serializer.write_boolean(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "ShowSpeakerLabel"
                ],
                self.show_speaker_label,
            )

        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members["SessionId"],
                self.session_id,
            )

        if self.enable_channel_identification is not None:
            serializer.write_boolean(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "EnableChannelIdentification"
                ],
                self.enable_channel_identification,
            )

        if self.number_of_channels is not None:
            serializer.write_integer(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "NumberOfChannels"
                ],
                self.number_of_channels,
            )

        if self.content_identification_type is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                    "ContentIdentificationType"
                ],
                self.content_identification_type,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "LanguageCode"
                        ]
                    )

                case 1:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 2:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case 3:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyName"
                        ]
                    )

                case 4:
                    kwargs["specialty"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "Specialty"
                        ]
                    )

                case 5:
                    kwargs["type"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members["Type"]
                    )

                case 6:
                    kwargs["show_speaker_label"] = de.read_boolean(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "ShowSpeakerLabel"
                        ]
                    )

                case 7:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "SessionId"
                        ]
                    )

                case 9:
                    kwargs["enable_channel_identification"] = de.read_boolean(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "EnableChannelIdentification"
                        ]
                    )

                case 10:
                    kwargs["number_of_channels"] = de.read_integer(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "NumberOfChannels"
                        ]
                    )

                case 11:
                    kwargs["content_identification_type"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT.members[
                            "ContentIdentificationType"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class StartMedicalStreamTranscriptionOutput:
    request_id: str | None = None
    """
    Provides the identifier for your streaming request.
    """
    language_code: str | None = None
    """
    Provides the language code that you specified in your request. This must be
    ``en-US``.
    """
    media_sample_rate_hertz: int | None = None
    """
    Provides the sample rate that you specified in your request.
    """
    media_encoding: str | None = None
    """
    Provides the media encoding you specified in your request.
    """
    vocabulary_name: str | None = None
    """
    Provides the name of the custom vocabulary that you specified in your request.
    """
    specialty: str | None = None
    """
    Provides the medical specialty that you specified in your request.
    """
    type: str | None = None
    """
    Provides the type of audio you specified in your request.
    """
    show_speaker_label: bool = False
    """
    Shows whether speaker partitioning was enabled for your transcription.
    """
    session_id: str | None = None
    """
    Provides the identifier for your transcription session.
    """
    enable_channel_identification: bool = False
    """
    Shows whether channel identification was enabled for your transcription.
    """
    number_of_channels: int | None = None
    """
    Provides the number of channels that you specified in your request.
    """
    content_identification_type: str | None = None
    """
    Shows whether content identification was enabled for your transcription.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.request_id is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members["RequestId"],
                self.request_id,
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "LanguageCode"
                ],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "MediaEncoding"
                ],
                self.media_encoding,
            )

        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyName"
                ],
                self.vocabulary_name,
            )

        if self.specialty is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members["Specialty"],
                self.specialty,
            )

        if self.type is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members["Type"],
                self.type,
            )

        serializer.write_boolean(
            _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                "ShowSpeakerLabel"
            ],
            self.show_speaker_label,
        )
        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members["SessionId"],
                self.session_id,
            )

        serializer.write_boolean(
            _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                "EnableChannelIdentification"
            ],
            self.enable_channel_identification,
        )
        if self.number_of_channels is not None:
            serializer.write_integer(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "NumberOfChannels"
                ],
                self.number_of_channels,
            )

        if self.content_identification_type is not None:
            serializer.write_string(
                _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "ContentIdentificationType"
                ],
                self.content_identification_type,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["request_id"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "RequestId"
                        ]
                    )

                case 1:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "LanguageCode"
                        ]
                    )

                case 2:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 3:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case 4:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyName"
                        ]
                    )

                case 5:
                    kwargs["specialty"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "Specialty"
                        ]
                    )

                case 6:
                    kwargs["type"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "Type"
                        ]
                    )

                case 7:
                    kwargs["show_speaker_label"] = de.read_boolean(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "ShowSpeakerLabel"
                        ]
                    )

                case 8:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "SessionId"
                        ]
                    )

                case 10:
                    kwargs["enable_channel_identification"] = de.read_boolean(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "EnableChannelIdentification"
                        ]
                    )

                case 11:
                    kwargs["number_of_channels"] = de.read_integer(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "NumberOfChannels"
                        ]
                    )

                case 12:
                    kwargs["content_identification_type"] = de.read_string(
                        _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "ContentIdentificationType"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT, consumer=_consumer
        )
        return kwargs


START_MEDICAL_STREAM_TRANSCRIPTION = APIOperation(
    input=StartMedicalStreamTranscriptionInput,
    output=StartMedicalStreamTranscriptionOutput,
    schema=_SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION,
    input_schema=_SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_INPUT,
    output_schema=_SCHEMA_START_MEDICAL_STREAM_TRANSCRIPTION_OUTPUT,
    error_registry=TypeRegistry(
        {
            ShapeID(
                "com.amazonaws.transcribestreaming#BadRequestException"
            ): BadRequestException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ConflictException"
            ): ConflictException,
            ShapeID(
                "com.amazonaws.transcribestreaming#InternalFailureException"
            ): InternalFailureException,
            ShapeID(
                "com.amazonaws.transcribestreaming#LimitExceededException"
            ): LimitExceededException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ServiceUnavailableException"
            ): ServiceUnavailableException,
        }
    ),
    effective_auth_schemes=[ShapeID("aws.auth#sigv4")],
)


@dataclass(kw_only=True)
class StartStreamTranscriptionInput:
    language_code: str | None = None
    """
    Specify the language code that represents the language spoken in your audio.

    If you're unsure of the language spoken in your audio, consider using
    ``IdentifyLanguage`` to enable automatic language identification.

    For a list of languages supported with Amazon Transcribe streaming, refer to the
    `Supported languages <https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html>`_
    table.
    """
    media_sample_rate_hertz: int | None = None
    """
    The sample rate of the input audio (in hertz). Low-quality audio, such as
    telephone audio, is typically around 8,000 Hz. High-quality audio typically
    ranges from 16,000 Hz to 48,000 Hz. Note that the sample rate you specify must
    match that of your audio.
    """
    media_encoding: str | None = None
    """
    Specify the encoding of your input audio. Supported formats are:

    * FLAC

    * OPUS-encoded audio in an Ogg container

    * PCM (only signed 16-bit little-endian audio formats, which does not include
      WAV)

    For more information, see `Media formats <https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio>`_
    .
    """
    vocabulary_name: str | None = None
    """
    Specify the name of the custom vocabulary that you want to use when processing
    your transcription. Note that vocabulary names are case sensitive.

    If the language of the specified custom vocabulary doesn't match the language
    identified in your media, the custom vocabulary is not applied to your
    transcription.

    .. important::
        This parameter is **not** intended for use with the ``IdentifyLanguage``
        parameter. If you're including ``IdentifyLanguage`` in your request and want to
        use one or more custom vocabularies with your transcription, use the
        ``VocabularyNames`` parameter instead.

    For more information, see `Custom vocabularies <https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html>`_
    .
    """
    session_id: str | None = None
    """
    Specify a name for your transcription session. If you don't include this
    parameter in your request, Amazon Transcribe generates an ID and returns it in
    the response.
    """
    vocabulary_filter_name: str | None = None
    """
    Specify the name of the custom vocabulary filter that you want to use when
    processing your transcription. Note that vocabulary filter names are case
    sensitive.

    If the language of the specified custom vocabulary filter doesn't match the
    language identified in your media, the vocabulary filter is not applied to your
    transcription.

    .. important::
        This parameter is **not** intended for use with the ``IdentifyLanguage``
        parameter. If you're including ``IdentifyLanguage`` in your request and want to
        use one or more vocabulary filters with your transcription, use the
        ``VocabularyFilterNames`` parameter instead.

    For more information, see `Using vocabulary filtering with unwanted words <https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html>`_
    .
    """
    vocabulary_filter_method: str | None = None
    """
    Specify how you want your vocabulary filter applied to your transcript.

    To replace words with ``***``, choose ``mask``.

    To delete words, choose ``remove``.

    To flag words without changing them, choose ``tag``.
    """
    show_speaker_label: bool = False
    """
    Enables speaker partitioning (diarization) in your transcription output. Speaker
    partitioning labels the speech from individual speakers in your media file.

    For more information, see `Partitioning speakers (diarization) <https://docs.aws.amazon.com/transcribe/latest/dg/diarization.html>`_
    .
    """
    enable_channel_identification: bool = False
    """
    Enables channel identification in multi-channel audio.

    Channel identification transcribes the audio on each channel independently, then
    appends the output for each channel into one transcript.

    If you have multi-channel audio and do not enable channel identification, your
    audio is transcribed in a continuous manner and your transcript is not separated
    by channel.

    If you include ``EnableChannelIdentification`` in your request, you must also
    include ``NumberOfChannels``.

    For more information, see `Transcribing multi-channel audio <https://docs.aws.amazon.com/transcribe/latest/dg/channel-id.html>`_
    .
    """
    number_of_channels: int | None = None
    """
    Specify the number of channels in your audio stream. This value must be ``2``,
    as only two channels are supported. If your audio doesn't contain multiple
    channels, do not include this parameter in your request.

    If you include ``NumberOfChannels`` in your request, you must also include
    ``EnableChannelIdentification``.
    """
    enable_partial_results_stabilization: bool = False
    """
    Enables partial result stabilization for your transcription. Partial result
    stabilization can reduce latency in your output, but may impact accuracy. For
    more information, see `Partial-result stabilization <https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization>`_
    .
    """
    partial_results_stability: str | None = None
    """
    Specify the level of stability to use when you enable partial results
    stabilization (``EnablePartialResultsStabilization``).

    Low stability provides the highest accuracy. High stability transcribes faster,
    but with slightly lower accuracy.

    For more information, see `Partial-result stabilization <https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization>`_
    .
    """
    content_identification_type: str | None = None
    """
    Labels all personally identifiable information (PII) identified in your
    transcript.

    Content identification is performed at the segment level; PII specified in
    ``PiiEntityTypes`` is flagged upon complete transcription of an audio segment.
    If you don't include ``PiiEntityTypes`` in your request, all PII is identified.

    You can’t set ``ContentIdentificationType`` and ``ContentRedactionType`` in the
    same request. If you set both, your request returns a ``BadRequestException``.

    For more information, see `Redacting or identifying personally identifiable information <https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html>`_
    .
    """
    content_redaction_type: str | None = None
    """
    Redacts all personally identifiable information (PII) identified in your
    transcript.

    Content redaction is performed at the segment level; PII specified in
    ``PiiEntityTypes`` is redacted upon complete transcription of an audio segment.
    If you don't include ``PiiEntityTypes`` in your request, all PII is redacted.

    You can’t set ``ContentRedactionType`` and ``ContentIdentificationType`` in the
    same request. If you set both, your request returns a ``BadRequestException``.

    For more information, see `Redacting or identifying personally identifiable information <https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html>`_
    .
    """
    pii_entity_types: str | None = None
    """
    Specify which types of personally identifiable information (PII) you want to
    redact in your transcript. You can include as many types as you'd like, or you
    can select ``ALL``.

    Values must be comma-separated and can include: ``ADDRESS``,
    ``BANK_ACCOUNT_NUMBER``, ``BANK_ROUTING``, ``CREDIT_DEBIT_CVV``,
    ``CREDIT_DEBIT_EXPIRY``, ``CREDIT_DEBIT_NUMBER``, ``EMAIL``, ``NAME``,
    ``PHONE``, ``PIN``, ``SSN``, or ``ALL``.

    Note that if you include ``PiiEntityTypes`` in your request, you must also
    include ``ContentIdentificationType`` or ``ContentRedactionType``.

    If you include ``ContentRedactionType`` or ``ContentIdentificationType`` in your
    request, but do not include ``PiiEntityTypes``, all PII is redacted or
    identified.
    """
    language_model_name: str | None = None
    """
    Specify the name of the custom language model that you want to use when
    processing your transcription. Note that language model names are case
    sensitive.

    The language of the specified language model must match the language code you
    specify in your transcription request. If the languages don't match, the custom
    language model isn't applied. There are no errors or warnings associated with a
    language mismatch.

    For more information, see `Custom language models <https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html>`_
    .
    """
    identify_language: bool = False
    """
    Enables automatic language identification for your transcription.

    If you include ``IdentifyLanguage``, you must include a list of language codes,
    using ``LanguageOptions``, that you think may be present in your audio stream.

    You can also include a preferred language using ``PreferredLanguage``. Adding a
    preferred language can help Amazon Transcribe identify the language faster than
    if you omit this parameter.

    If you have multi-channel audio that contains different languages on each
    channel, and you've enabled channel identification, automatic language
    identification identifies the dominant language on each audio channel.

    Note that you must include either ``LanguageCode`` or ``IdentifyLanguage`` or
    ``IdentifyMultipleLanguages`` in your request. If you include more than one of
    these parameters, your transcription job fails.

    Streaming language identification can't be combined with custom language models
    or redaction.
    """
    language_options: str | None = None
    """
    Specify two or more language codes that represent the languages you think may be
    present in your media; including more than five is not recommended.

    Including language options can improve the accuracy of language identification.

    If you include ``LanguageOptions`` in your request, you must also include
    ``IdentifyLanguage`` or ``IdentifyMultipleLanguages``.

    For a list of languages supported with Amazon Transcribe streaming, refer to the
    `Supported languages <https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html>`_
    table.

    .. important::
        You can only include one language dialect per language per stream. For example,
        you cannot include ``en-US`` and ``en-AU`` in the same request.
    """
    preferred_language: str | None = None
    """
    Specify a preferred language from the subset of languages codes you specified in
    ``LanguageOptions``.

    You can only use this parameter if you've included ``IdentifyLanguage`` and
    ``LanguageOptions`` in your request.
    """
    identify_multiple_languages: bool = False
    """
    Enables automatic multi-language identification in your transcription job
    request. Use this parameter if your stream contains more than one language. If
    your stream contains only one language, use IdentifyLanguage instead.

    If you include ``IdentifyMultipleLanguages``, you must include a list of
    language codes, using ``LanguageOptions``, that you think may be present in your
    stream.

    If you want to apply a custom vocabulary or a custom vocabulary filter to your
    automatic multiple language identification request, include ``VocabularyNames``
    or ``VocabularyFilterNames``.

    Note that you must include one of ``LanguageCode``, ``IdentifyLanguage``, or
    ``IdentifyMultipleLanguages`` in your request. If you include more than one of
    these parameters, your transcription job fails.
    """
    vocabulary_names: str | None = None
    """
    Specify the names of the custom vocabularies that you want to use when
    processing your transcription. Note that vocabulary names are case sensitive.

    If none of the languages of the specified custom vocabularies match the language
    identified in your media, your job fails.

    .. important::
        This parameter is only intended for use **with** the ``IdentifyLanguage``
        parameter. If you're **not** including ``IdentifyLanguage`` in your request and
        want to use a custom vocabulary with your transcription, use the
        ``VocabularyName`` parameter instead.

    For more information, see `Custom vocabularies <https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html>`_
    .
    """
    vocabulary_filter_names: str | None = None
    """
    Specify the names of the custom vocabulary filters that you want to use when
    processing your transcription. Note that vocabulary filter names are case
    sensitive.

    If none of the languages of the specified custom vocabulary filters match the
    language identified in your media, your job fails.

    .. important::
        This parameter is only intended for use **with** the ``IdentifyLanguage``
        parameter. If you're **not** including ``IdentifyLanguage`` in your request and
        want to use a custom vocabulary filter with your transcription, use the
        ``VocabularyFilterName`` parameter instead.

    For more information, see `Using vocabulary filtering with unwanted words <https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html>`_
    .
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_START_STREAM_TRANSCRIPTION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["LanguageCode"],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["MediaEncoding"],
                self.media_encoding,
            )

        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["VocabularyName"],
                self.vocabulary_name,
            )

        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["SessionId"],
                self.session_id,
            )

        if self.vocabulary_filter_name is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyFilterName"
                ],
                self.vocabulary_filter_name,
            )

        if self.vocabulary_filter_method is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyFilterMethod"
                ],
                self.vocabulary_filter_method,
            )

        if self.show_speaker_label is not None:
            serializer.write_boolean(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["ShowSpeakerLabel"],
                self.show_speaker_label,
            )

        if self.enable_channel_identification is not None:
            serializer.write_boolean(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "EnableChannelIdentification"
                ],
                self.enable_channel_identification,
            )

        if self.number_of_channels is not None:
            serializer.write_integer(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["NumberOfChannels"],
                self.number_of_channels,
            )

        if self.enable_partial_results_stabilization is not None:
            serializer.write_boolean(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "EnablePartialResultsStabilization"
                ],
                self.enable_partial_results_stabilization,
            )

        if self.partial_results_stability is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "PartialResultsStability"
                ],
                self.partial_results_stability,
            )

        if self.content_identification_type is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "ContentIdentificationType"
                ],
                self.content_identification_type,
            )

        if self.content_redaction_type is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "ContentRedactionType"
                ],
                self.content_redaction_type,
            )

        if self.pii_entity_types is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["PiiEntityTypes"],
                self.pii_entity_types,
            )

        if self.language_model_name is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["LanguageModelName"],
                self.language_model_name,
            )

        if self.identify_language is not None:
            serializer.write_boolean(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["IdentifyLanguage"],
                self.identify_language,
            )

        if self.language_options is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["LanguageOptions"],
                self.language_options,
            )

        if self.preferred_language is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["PreferredLanguage"],
                self.preferred_language,
            )

        if self.identify_multiple_languages is not None:
            serializer.write_boolean(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "IdentifyMultipleLanguages"
                ],
                self.identify_multiple_languages,
            )

        if self.vocabulary_names is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["VocabularyNames"],
                self.vocabulary_names,
            )

        if self.vocabulary_filter_names is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                    "VocabularyFilterNames"
                ],
                self.vocabulary_filter_names,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["LanguageCode"]
                    )

                case 1:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 2:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case 3:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyName"
                        ]
                    )

                case 4:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members["SessionId"]
                    )

                case 6:
                    kwargs["vocabulary_filter_name"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyFilterName"
                        ]
                    )

                case 7:
                    kwargs["vocabulary_filter_method"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyFilterMethod"
                        ]
                    )

                case 8:
                    kwargs["show_speaker_label"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "ShowSpeakerLabel"
                        ]
                    )

                case 9:
                    kwargs["enable_channel_identification"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "EnableChannelIdentification"
                        ]
                    )

                case 10:
                    kwargs["number_of_channels"] = de.read_integer(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "NumberOfChannels"
                        ]
                    )

                case 11:
                    kwargs["enable_partial_results_stabilization"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "EnablePartialResultsStabilization"
                        ]
                    )

                case 12:
                    kwargs["partial_results_stability"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "PartialResultsStability"
                        ]
                    )

                case 13:
                    kwargs["content_identification_type"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "ContentIdentificationType"
                        ]
                    )

                case 14:
                    kwargs["content_redaction_type"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "ContentRedactionType"
                        ]
                    )

                case 15:
                    kwargs["pii_entity_types"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "PiiEntityTypes"
                        ]
                    )

                case 16:
                    kwargs["language_model_name"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "LanguageModelName"
                        ]
                    )

                case 17:
                    kwargs["identify_language"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "IdentifyLanguage"
                        ]
                    )

                case 18:
                    kwargs["language_options"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "LanguageOptions"
                        ]
                    )

                case 19:
                    kwargs["preferred_language"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "PreferredLanguage"
                        ]
                    )

                case 20:
                    kwargs["identify_multiple_languages"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "IdentifyMultipleLanguages"
                        ]
                    )

                case 21:
                    kwargs["vocabulary_names"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyNames"
                        ]
                    )

                case 22:
                    kwargs["vocabulary_filter_names"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT.members[
                            "VocabularyFilterNames"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_STREAM_TRANSCRIPTION_INPUT, consumer=_consumer
        )
        return kwargs


@dataclass(kw_only=True)
class Transcript:
    """
    The ``Transcript`` associated with a ````.

    ``Transcript`` contains ``Results``, which contains a set of transcription
    results from one or more audio segments, along with additional information per
    your request parameters.

    """

    results: list[Result] | None = None
    """
    Contains a set of transcription results from one or more audio segments, along
    with additional information per your request parameters. This can include
    information relating to alternative transcriptions, channel identification,
    partial result stabilization, language identification, and other
    transcription-related data.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.results is not None:
            _serialize_result_list(
                serializer, _SCHEMA_TRANSCRIPT.members["Results"], self.results
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["results"] = _deserialize_result_list(
                        de, _SCHEMA_TRANSCRIPT.members["Results"]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_TRANSCRIPT, consumer=_consumer)
        return kwargs


@dataclass(kw_only=True)
class TranscriptEvent:
    """
    The ``TranscriptEvent`` associated with a ``TranscriptResultStream``.

    Contains a set of transcription results from one or more audio segments, along
    with additional information per your request parameters.

    """

    transcript: Transcript | None = None
    """
    Contains ``Results``, which contains a set of transcription results from one or
    more audio segments, along with additional information per your request
    parameters. This can include information relating to alternative transcriptions,
    channel identification, partial result stabilization, language identification,
    and other transcription-related data.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT_EVENT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.transcript is not None:
            serializer.write_struct(
                _SCHEMA_TRANSCRIPT_EVENT.members["Transcript"], self.transcript
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["transcript"] = Transcript.deserialize(de)

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_TRANSCRIPT_EVENT, consumer=_consumer)
        return kwargs


@dataclass
class TranscriptResultStreamTranscriptEvent:
    """
    Contains ``Transcript``, which contains ``Results``. The ```` object contains a
    set of transcription results from one or more audio segments, along with
    additional information per your request parameters.

    """

    value: TranscriptEvent

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_TRANSCRIPT_RESULT_STREAM.members["TranscriptEvent"], self.value
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=TranscriptEvent.deserialize(deserializer))


@dataclass
class TranscriptResultStreamBadRequestException:
    """
    A client error occurred when the stream was created. Check the parameters of the
    request and try your request again.

    """

    value: BadRequestException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_TRANSCRIPT_RESULT_STREAM.members["BadRequestException"], self.value
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=BadRequestException.deserialize(deserializer))


@dataclass
class TranscriptResultStreamLimitExceededException:
    """
    Your client has exceeded one of the Amazon Transcribe limits. This is typically
    the audio length limit. Break your audio stream into smaller chunks and try your
    request again.

    """

    value: LimitExceededException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_TRANSCRIPT_RESULT_STREAM.members["LimitExceededException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=LimitExceededException.deserialize(deserializer))


@dataclass
class TranscriptResultStreamInternalFailureException:
    """
    A problem occurred while processing the audio. Amazon Transcribe terminated
    processing.

    """

    value: InternalFailureException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_TRANSCRIPT_RESULT_STREAM.members["InternalFailureException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=InternalFailureException.deserialize(deserializer))


@dataclass
class TranscriptResultStreamConflictException:
    """
    A new stream started with the same session ID. The current stream has been
    terminated.

    """

    value: ConflictException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_TRANSCRIPT_RESULT_STREAM.members["ConflictException"], self.value
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ConflictException.deserialize(deserializer))


@dataclass
class TranscriptResultStreamServiceUnavailableException:
    """
    The service is currently unavailable. Try your request later.

    """

    value: ServiceUnavailableException

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TRANSCRIPT_RESULT_STREAM, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(
            _SCHEMA_TRANSCRIPT_RESULT_STREAM.members["ServiceUnavailableException"],
            self.value,
        )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ServiceUnavailableException.deserialize(deserializer))


@dataclass
class TranscriptResultStreamUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SerializationError("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()


TranscriptResultStream = Union[
    TranscriptResultStreamTranscriptEvent
    | TranscriptResultStreamBadRequestException
    | TranscriptResultStreamLimitExceededException
    | TranscriptResultStreamInternalFailureException
    | TranscriptResultStreamConflictException
    | TranscriptResultStreamServiceUnavailableException
    | TranscriptResultStreamUnknown
]

"""
Contains detailed information about your streaming session.

"""


class _TranscriptResultStreamDeserializer:
    _result: TranscriptResultStream | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> TranscriptResultStream:
        self._result = None
        deserializer.read_struct(_SCHEMA_TRANSCRIPT_RESULT_STREAM, self._consumer)

        if self._result is None:
            raise SerializationError(
                "Unions must have exactly one value, but found none."
            )

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(TranscriptResultStreamTranscriptEvent.deserialize(de))

            case 1:
                self._set_result(
                    TranscriptResultStreamBadRequestException.deserialize(de)
                )

            case 2:
                self._set_result(
                    TranscriptResultStreamLimitExceededException.deserialize(de)
                )

            case 3:
                self._set_result(
                    TranscriptResultStreamInternalFailureException.deserialize(de)
                )

            case 4:
                self._set_result(
                    TranscriptResultStreamConflictException.deserialize(de)
                )

            case 5:
                self._set_result(
                    TranscriptResultStreamServiceUnavailableException.deserialize(de)
                )

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: TranscriptResultStream) -> None:
        if self._result is not None:
            raise SerializationError(
                "Unions must have exactly one value, but found more than one."
            )
        self._result = value


@dataclass(kw_only=True)
class StartStreamTranscriptionOutput:
    request_id: str | None = None
    """
    Provides the identifier for your streaming request.
    """
    language_code: str | None = None
    """
    Provides the language code that you specified in your request.
    """
    media_sample_rate_hertz: int | None = None
    """
    Provides the sample rate that you specified in your request.
    """
    media_encoding: str | None = None
    """
    Provides the media encoding you specified in your request.
    """
    vocabulary_name: str | None = None
    """
    Provides the name of the custom vocabulary that you specified in your request.
    """
    session_id: str | None = None
    """
    Provides the identifier for your transcription session.
    """
    vocabulary_filter_name: str | None = None
    """
    Provides the name of the custom vocabulary filter that you specified in your
    request.
    """
    vocabulary_filter_method: str | None = None
    """
    Provides the vocabulary filtering method used in your transcription.
    """
    show_speaker_label: bool = False
    """
    Shows whether speaker partitioning was enabled for your transcription.
    """
    enable_channel_identification: bool = False
    """
    Shows whether channel identification was enabled for your transcription.
    """
    number_of_channels: int | None = None
    """
    Provides the number of channels that you specified in your request.
    """
    enable_partial_results_stabilization: bool = False
    """
    Shows whether partial results stabilization was enabled for your transcription.
    """
    partial_results_stability: str | None = None
    """
    Provides the stabilization level used for your transcription.
    """
    content_identification_type: str | None = None
    """
    Shows whether content identification was enabled for your transcription.
    """
    content_redaction_type: str | None = None
    """
    Shows whether content redaction was enabled for your transcription.
    """
    pii_entity_types: str | None = None
    """
    Lists the PII entity types you specified in your request.
    """
    language_model_name: str | None = None
    """
    Provides the name of the custom language model that you specified in your
    request.
    """
    identify_language: bool = False
    """
    Shows whether automatic language identification was enabled for your
    transcription.
    """
    language_options: str | None = None
    """
    Provides the language codes that you specified in your request.
    """
    preferred_language: str | None = None
    """
    Provides the preferred language that you specified in your request.
    """
    identify_multiple_languages: bool = False
    """
    Shows whether automatic multi-language identification was enabled for your
    transcription.
    """
    vocabulary_names: str | None = None
    """
    Provides the names of the custom vocabularies that you specified in your
    request.
    """
    vocabulary_filter_names: str | None = None
    """
    Provides the names of the custom vocabulary filters that you specified in your
    request.
    """

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.request_id is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["RequestId"],
                self.request_id,
            )

        if self.language_code is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["LanguageCode"],
                self.language_code,
            )

        if self.media_sample_rate_hertz is not None:
            serializer.write_integer(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "MediaSampleRateHertz"
                ],
                self.media_sample_rate_hertz,
            )

        if self.media_encoding is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["MediaEncoding"],
                self.media_encoding,
            )

        if self.vocabulary_name is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["VocabularyName"],
                self.vocabulary_name,
            )

        if self.session_id is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["SessionId"],
                self.session_id,
            )

        if self.vocabulary_filter_name is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyFilterName"
                ],
                self.vocabulary_filter_name,
            )

        if self.vocabulary_filter_method is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyFilterMethod"
                ],
                self.vocabulary_filter_method,
            )

        serializer.write_boolean(
            _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["ShowSpeakerLabel"],
            self.show_speaker_label,
        )
        serializer.write_boolean(
            _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                "EnableChannelIdentification"
            ],
            self.enable_channel_identification,
        )
        if self.number_of_channels is not None:
            serializer.write_integer(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["NumberOfChannels"],
                self.number_of_channels,
            )

        serializer.write_boolean(
            _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                "EnablePartialResultsStabilization"
            ],
            self.enable_partial_results_stabilization,
        )
        if self.partial_results_stability is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "PartialResultsStability"
                ],
                self.partial_results_stability,
            )

        if self.content_identification_type is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "ContentIdentificationType"
                ],
                self.content_identification_type,
            )

        if self.content_redaction_type is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "ContentRedactionType"
                ],
                self.content_redaction_type,
            )

        if self.pii_entity_types is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["PiiEntityTypes"],
                self.pii_entity_types,
            )

        if self.language_model_name is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["LanguageModelName"],
                self.language_model_name,
            )

        serializer.write_boolean(
            _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["IdentifyLanguage"],
            self.identify_language,
        )
        if self.language_options is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["LanguageOptions"],
                self.language_options,
            )

        if self.preferred_language is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["PreferredLanguage"],
                self.preferred_language,
            )

        serializer.write_boolean(
            _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                "IdentifyMultipleLanguages"
            ],
            self.identify_multiple_languages,
        )
        if self.vocabulary_names is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["VocabularyNames"],
                self.vocabulary_names,
            )

        if self.vocabulary_filter_names is not None:
            serializer.write_string(
                _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                    "VocabularyFilterNames"
                ],
                self.vocabulary_filter_names,
            )

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["request_id"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["RequestId"]
                    )

                case 1:
                    kwargs["language_code"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "LanguageCode"
                        ]
                    )

                case 2:
                    kwargs["media_sample_rate_hertz"] = de.read_integer(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "MediaSampleRateHertz"
                        ]
                    )

                case 3:
                    kwargs["media_encoding"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "MediaEncoding"
                        ]
                    )

                case 4:
                    kwargs["vocabulary_name"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyName"
                        ]
                    )

                case 5:
                    kwargs["session_id"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members["SessionId"]
                    )

                case 7:
                    kwargs["vocabulary_filter_name"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyFilterName"
                        ]
                    )

                case 8:
                    kwargs["vocabulary_filter_method"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyFilterMethod"
                        ]
                    )

                case 9:
                    kwargs["show_speaker_label"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "ShowSpeakerLabel"
                        ]
                    )

                case 10:
                    kwargs["enable_channel_identification"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "EnableChannelIdentification"
                        ]
                    )

                case 11:
                    kwargs["number_of_channels"] = de.read_integer(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "NumberOfChannels"
                        ]
                    )

                case 12:
                    kwargs["enable_partial_results_stabilization"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "EnablePartialResultsStabilization"
                        ]
                    )

                case 13:
                    kwargs["partial_results_stability"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "PartialResultsStability"
                        ]
                    )

                case 14:
                    kwargs["content_identification_type"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "ContentIdentificationType"
                        ]
                    )

                case 15:
                    kwargs["content_redaction_type"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "ContentRedactionType"
                        ]
                    )

                case 16:
                    kwargs["pii_entity_types"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "PiiEntityTypes"
                        ]
                    )

                case 17:
                    kwargs["language_model_name"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "LanguageModelName"
                        ]
                    )

                case 18:
                    kwargs["identify_language"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "IdentifyLanguage"
                        ]
                    )

                case 19:
                    kwargs["language_options"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "LanguageOptions"
                        ]
                    )

                case 20:
                    kwargs["preferred_language"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "PreferredLanguage"
                        ]
                    )

                case 21:
                    kwargs["identify_multiple_languages"] = de.read_boolean(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "IdentifyMultipleLanguages"
                        ]
                    )

                case 22:
                    kwargs["vocabulary_names"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyNames"
                        ]
                    )

                case 23:
                    kwargs["vocabulary_filter_names"] = de.read_string(
                        _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT.members[
                            "VocabularyFilterNames"
                        ]
                    )

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(
            _SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT, consumer=_consumer
        )
        return kwargs


START_STREAM_TRANSCRIPTION = APIOperation(
    input=StartStreamTranscriptionInput,
    output=StartStreamTranscriptionOutput,
    schema=_SCHEMA_START_STREAM_TRANSCRIPTION,
    input_schema=_SCHEMA_START_STREAM_TRANSCRIPTION_INPUT,
    output_schema=_SCHEMA_START_STREAM_TRANSCRIPTION_OUTPUT,
    error_registry=TypeRegistry(
        {
            ShapeID(
                "com.amazonaws.transcribestreaming#BadRequestException"
            ): BadRequestException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ConflictException"
            ): ConflictException,
            ShapeID(
                "com.amazonaws.transcribestreaming#InternalFailureException"
            ): InternalFailureException,
            ShapeID(
                "com.amazonaws.transcribestreaming#LimitExceededException"
            ): LimitExceededException,
            ShapeID(
                "com.amazonaws.transcribestreaming#ServiceUnavailableException"
            ): ServiceUnavailableException,
        }
    ),
    effective_auth_schemes=[ShapeID("aws.auth#sigv4")],
)
